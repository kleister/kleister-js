/* tslint:disable */
/* eslint-disable */
/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthToken } from '../model';
// @ts-ignore
import { GeneralError } from '../model';
// @ts-ignore
import { Profile } from '../model';
// @ts-ignore
import { ValidationError } from '../model';
/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve an unlimited auth token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an unlimited auth token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an unlimited auth token
         * @param {Profile} profile The profile data to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile: async (profile: Profile, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profile' is not null or undefined
            assertParamExists('updateProfile', 'profile', profile)
            const localVarPath = `/profile/self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profile, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve an unlimited auth token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an unlimited auth token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an unlimited auth token
         * @param {Profile} profile The profile data to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfile(profile: Profile, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfile(profile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve an unlimited auth token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showProfile(options?: any): AxiosPromise<Profile> {
            return localVarFp.showProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an unlimited auth token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenProfile(options?: any): AxiosPromise<AuthToken> {
            return localVarFp.tokenProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an unlimited auth token
         * @param {Profile} profile The profile data to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile(profile: Profile, options?: any): AxiosPromise<Profile> {
            return localVarFp.updateProfile(profile, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for updateProfile operation in ProfileApi.
 * @export
 * @interface ProfileApiUpdateProfileRequest
 */
export interface ProfileApiUpdateProfileRequest {
    /**
     * The profile data to update
     * @type {Profile}
     * @memberof ProfileApiUpdateProfile
     */
    readonly profile: Profile
}

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve an unlimited auth token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public showProfile(options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).showProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an unlimited auth token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public tokenProfile(options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).tokenProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an unlimited auth token
     * @param {ProfileApiUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public updateProfile(requestParameters: ProfileApiUpdateProfileRequest, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).updateProfile(requestParameters.profile, options).then((request) => request(this.axios, this.basePath));
    }
}
