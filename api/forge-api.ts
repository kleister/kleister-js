/* tslint:disable */
/* eslint-disable */
/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * Contact: kleister@webhippie.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { ForgeBuildParams } from "../model";
// @ts-ignore
import type { ForgeBuilds } from "../model";
// @ts-ignore
import type { Forges } from "../model";
// @ts-ignore
import type { Notification } from "../model";
/**
 * ForgeApi - axios parameter creator
 * @export
 */
export const ForgeApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Attach a build to a Forge version
     * @param {string} forgeId A forge identifier or slug
     * @param {ForgeBuildParams} forgeBuildParams The build data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachForgeToBuild: async (
      forgeId: string,
      forgeBuildParams: ForgeBuildParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'forgeId' is not null or undefined
      assertParamExists("attachForgeToBuild", "forgeId", forgeId);
      // verify required parameter 'forgeBuildParams' is not null or undefined
      assertParamExists(
        "attachForgeToBuild",
        "forgeBuildParams",
        forgeBuildParams,
      );
      const localVarPath = `/forge/{forge_id}/builds`.replace(
        `{${"forge_id"}}`,
        encodeURIComponent(String(forgeId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        forgeBuildParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a build from a Forge version
     * @param {string} forgeId A forge identifier or slug
     * @param {ForgeBuildParams} forgeBuildParams The build data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteForgeFromBuild: async (
      forgeId: string,
      forgeBuildParams: ForgeBuildParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'forgeId' is not null or undefined
      assertParamExists("deleteForgeFromBuild", "forgeId", forgeId);
      // verify required parameter 'forgeBuildParams' is not null or undefined
      assertParamExists(
        "deleteForgeFromBuild",
        "forgeBuildParams",
        forgeBuildParams,
      );
      const localVarPath = `/forge/{forge_id}/builds`.replace(
        `{${"forge_id"}}`,
        encodeURIComponent(String(forgeId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        forgeBuildParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch the builds attached to a Forge version
     * @param {string} forgeId A forge identifier or slug
     * @param {string} [search] Search query
     * @param {ListForgeBuildsSortEnum} [sort] Sorting column
     * @param {ListForgeBuildsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listForgeBuilds: async (
      forgeId: string,
      search?: string,
      sort?: ListForgeBuildsSortEnum,
      order?: ListForgeBuildsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'forgeId' is not null or undefined
      assertParamExists("listForgeBuilds", "forgeId", forgeId);
      const localVarPath = `/forge/{forge_id}/builds`.replace(
        `{${"forge_id"}}`,
        encodeURIComponent(String(forgeId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch the available Forge versions
     * @param {string} [search] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listForges: async (
      search?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/forge`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the available Forge versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateForge: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/forge`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ForgeApi - functional programming interface
 * @export
 */
export const ForgeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ForgeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Attach a build to a Forge version
     * @param {string} forgeId A forge identifier or slug
     * @param {ForgeBuildParams} forgeBuildParams The build data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachForgeToBuild(
      forgeId: string,
      forgeBuildParams: ForgeBuildParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachForgeToBuild(
          forgeId,
          forgeBuildParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ForgeApi.attachForgeToBuild"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a build from a Forge version
     * @param {string} forgeId A forge identifier or slug
     * @param {ForgeBuildParams} forgeBuildParams The build data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteForgeFromBuild(
      forgeId: string,
      forgeBuildParams: ForgeBuildParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteForgeFromBuild(
          forgeId,
          forgeBuildParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ForgeApi.deleteForgeFromBuild"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch the builds attached to a Forge version
     * @param {string} forgeId A forge identifier or slug
     * @param {string} [search] Search query
     * @param {ListForgeBuildsSortEnum} [sort] Sorting column
     * @param {ListForgeBuildsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listForgeBuilds(
      forgeId: string,
      search?: string,
      sort?: ListForgeBuildsSortEnum,
      order?: ListForgeBuildsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForgeBuilds>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listForgeBuilds(
        forgeId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ForgeApi.listForgeBuilds"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch the available Forge versions
     * @param {string} [search] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listForges(
      search?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Forges>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listForges(
        search,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ForgeApi.listForges"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update the available Forge versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateForge(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateForge(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ForgeApi.updateForge"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ForgeApi - factory interface
 * @export
 */
export const ForgeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ForgeApiFp(configuration);
  return {
    /**
     *
     * @summary Attach a build to a Forge version
     * @param {ForgeApiAttachForgeToBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachForgeToBuild(
      requestParameters: ForgeApiAttachForgeToBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachForgeToBuild(
          requestParameters.forgeId,
          requestParameters.forgeBuildParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a build from a Forge version
     * @param {ForgeApiDeleteForgeFromBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteForgeFromBuild(
      requestParameters: ForgeApiDeleteForgeFromBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteForgeFromBuild(
          requestParameters.forgeId,
          requestParameters.forgeBuildParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch the builds attached to a Forge version
     * @param {ForgeApiListForgeBuildsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listForgeBuilds(
      requestParameters: ForgeApiListForgeBuildsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ForgeBuilds> {
      return localVarFp
        .listForgeBuilds(
          requestParameters.forgeId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch the available Forge versions
     * @param {ForgeApiListForgesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listForges(
      requestParameters: ForgeApiListForgesRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Forges> {
      return localVarFp
        .listForges(requestParameters.search, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the available Forge versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateForge(options?: RawAxiosRequestConfig): AxiosPromise<Notification> {
      return localVarFp
        .updateForge(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for attachForgeToBuild operation in ForgeApi.
 * @export
 * @interface ForgeApiAttachForgeToBuildRequest
 */
export interface ForgeApiAttachForgeToBuildRequest {
  /**
   * A forge identifier or slug
   * @type {string}
   * @memberof ForgeApiAttachForgeToBuild
   */
  readonly forgeId: string;

  /**
   * The build data to attach
   * @type {ForgeBuildParams}
   * @memberof ForgeApiAttachForgeToBuild
   */
  readonly forgeBuildParams: ForgeBuildParams;
}

/**
 * Request parameters for deleteForgeFromBuild operation in ForgeApi.
 * @export
 * @interface ForgeApiDeleteForgeFromBuildRequest
 */
export interface ForgeApiDeleteForgeFromBuildRequest {
  /**
   * A forge identifier or slug
   * @type {string}
   * @memberof ForgeApiDeleteForgeFromBuild
   */
  readonly forgeId: string;

  /**
   * The build data to unlink
   * @type {ForgeBuildParams}
   * @memberof ForgeApiDeleteForgeFromBuild
   */
  readonly forgeBuildParams: ForgeBuildParams;
}

/**
 * Request parameters for listForgeBuilds operation in ForgeApi.
 * @export
 * @interface ForgeApiListForgeBuildsRequest
 */
export interface ForgeApiListForgeBuildsRequest {
  /**
   * A forge identifier or slug
   * @type {string}
   * @memberof ForgeApiListForgeBuilds
   */
  readonly forgeId: string;

  /**
   * Search query
   * @type {string}
   * @memberof ForgeApiListForgeBuilds
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'build_name' | 'build_public' | 'pack_slug' | 'pack_name'}
   * @memberof ForgeApiListForgeBuilds
   */
  readonly sort?: ListForgeBuildsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof ForgeApiListForgeBuilds
   */
  readonly order?: ListForgeBuildsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof ForgeApiListForgeBuilds
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof ForgeApiListForgeBuilds
   */
  readonly offset?: number;
}

/**
 * Request parameters for listForges operation in ForgeApi.
 * @export
 * @interface ForgeApiListForgesRequest
 */
export interface ForgeApiListForgesRequest {
  /**
   * Search query
   * @type {string}
   * @memberof ForgeApiListForges
   */
  readonly search?: string;
}

/**
 * ForgeApi - object-oriented interface
 * @export
 * @class ForgeApi
 * @extends {BaseAPI}
 */
export class ForgeApi extends BaseAPI {
  /**
   *
   * @summary Attach a build to a Forge version
   * @param {ForgeApiAttachForgeToBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForgeApi
   */
  public attachForgeToBuild(
    requestParameters: ForgeApiAttachForgeToBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ForgeApiFp(this.configuration)
      .attachForgeToBuild(
        requestParameters.forgeId,
        requestParameters.forgeBuildParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a build from a Forge version
   * @param {ForgeApiDeleteForgeFromBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForgeApi
   */
  public deleteForgeFromBuild(
    requestParameters: ForgeApiDeleteForgeFromBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ForgeApiFp(this.configuration)
      .deleteForgeFromBuild(
        requestParameters.forgeId,
        requestParameters.forgeBuildParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch the builds attached to a Forge version
   * @param {ForgeApiListForgeBuildsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForgeApi
   */
  public listForgeBuilds(
    requestParameters: ForgeApiListForgeBuildsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ForgeApiFp(this.configuration)
      .listForgeBuilds(
        requestParameters.forgeId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch the available Forge versions
   * @param {ForgeApiListForgesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForgeApi
   */
  public listForges(
    requestParameters: ForgeApiListForgesRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return ForgeApiFp(this.configuration)
      .listForges(requestParameters.search, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the available Forge versions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForgeApi
   */
  public updateForge(options?: RawAxiosRequestConfig) {
    return ForgeApiFp(this.configuration)
      .updateForge(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ListForgeBuildsSortEnum = {
  BuildName: "build_name",
  BuildPublic: "build_public",
  PackSlug: "pack_slug",
  PackName: "pack_name",
} as const;
export type ListForgeBuildsSortEnum =
  (typeof ListForgeBuildsSortEnum)[keyof typeof ListForgeBuildsSortEnum];
/**
 * @export
 */
export const ListForgeBuildsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListForgeBuildsOrderEnum =
  (typeof ListForgeBuildsOrderEnum)[keyof typeof ListForgeBuildsOrderEnum];
