/* tslint:disable */
/* eslint-disable */
/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { Build } from "../model";
// @ts-ignore
import { Forge } from "../model";
// @ts-ignore
import { ForgeBuildParams } from "../model";
// @ts-ignore
import { GeneralError } from "../model";
// @ts-ignore
import { ValidationError } from "../model";
/**
 * ForgeApi - axios parameter creator
 * @export
 */
export const ForgeApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Assign a build to a Forge version
     * @param {string} forgeId A forge UUID or slug
     * @param {ForgeBuildParams} forgeBuild The build data to append
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appendForgeToBuild: async (
      forgeId: string,
      forgeBuild: ForgeBuildParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'forgeId' is not null or undefined
      assertParamExists("appendForgeToBuild", "forgeId", forgeId);
      // verify required parameter 'forgeBuild' is not null or undefined
      assertParamExists("appendForgeToBuild", "forgeBuild", forgeBuild);
      const localVarPath = `/forge/{forge_id}/builds`.replace(
        `{${"forge_id"}}`,
        encodeURIComponent(String(forgeId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        forgeBuild,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a build from a Forge version
     * @param {string} forgeId A forge UUID or slug
     * @param {ForgeBuildParams} forgeBuild The build data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteForgeFromBuild: async (
      forgeId: string,
      forgeBuild: ForgeBuildParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'forgeId' is not null or undefined
      assertParamExists("deleteForgeFromBuild", "forgeId", forgeId);
      // verify required parameter 'forgeBuild' is not null or undefined
      assertParamExists("deleteForgeFromBuild", "forgeBuild", forgeBuild);
      const localVarPath = `/forge/{forge_id}/builds`.replace(
        `{${"forge_id"}}`,
        encodeURIComponent(String(forgeId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        forgeBuild,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch the builds assigned to a Forge version
     * @param {string} forgeId A forge UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listForgeBuilds: async (
      forgeId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'forgeId' is not null or undefined
      assertParamExists("listForgeBuilds", "forgeId", forgeId);
      const localVarPath = `/forge/{forge_id}/builds`.replace(
        `{${"forge_id"}}`,
        encodeURIComponent(String(forgeId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch the available Forge versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listForges: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/forge`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search for available Forge versions
     * @param {string} forgeId A search token to search Forge versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForges: async (
      forgeId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'forgeId' is not null or undefined
      assertParamExists("searchForges", "forgeId", forgeId);
      const localVarPath = `/forge/{forge_id}`.replace(
        `{${"forge_id"}}`,
        encodeURIComponent(String(forgeId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the available Forge versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateForge: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/forge`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ForgeApi - functional programming interface
 * @export
 */
export const ForgeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ForgeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Assign a build to a Forge version
     * @param {string} forgeId A forge UUID or slug
     * @param {ForgeBuildParams} forgeBuild The build data to append
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appendForgeToBuild(
      forgeId: string,
      forgeBuild: ForgeBuildParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Build>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.appendForgeToBuild(
          forgeId,
          forgeBuild,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Unlink a build from a Forge version
     * @param {string} forgeId A forge UUID or slug
     * @param {ForgeBuildParams} forgeBuild The build data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteForgeFromBuild(
      forgeId: string,
      forgeBuild: ForgeBuildParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Build>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteForgeFromBuild(
          forgeId,
          forgeBuild,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Fetch the builds assigned to a Forge version
     * @param {string} forgeId A forge UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listForgeBuilds(
      forgeId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Build>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listForgeBuilds(
        forgeId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Fetch the available Forge versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listForges(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Forge>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listForges(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search for available Forge versions
     * @param {string} forgeId A search token to search Forge versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchForges(
      forgeId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Forge>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchForges(
        forgeId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update the available Forge versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateForge(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateForge(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ForgeApi - factory interface
 * @export
 */
export const ForgeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ForgeApiFp(configuration);
  return {
    /**
     *
     * @summary Assign a build to a Forge version
     * @param {string} forgeId A forge UUID or slug
     * @param {ForgeBuildParams} forgeBuild The build data to append
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appendForgeToBuild(
      forgeId: string,
      forgeBuild: ForgeBuildParams,
      options?: any
    ): AxiosPromise<Array<Build>> {
      return localVarFp
        .appendForgeToBuild(forgeId, forgeBuild, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a build from a Forge version
     * @param {string} forgeId A forge UUID or slug
     * @param {ForgeBuildParams} forgeBuild The build data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteForgeFromBuild(
      forgeId: string,
      forgeBuild: ForgeBuildParams,
      options?: any
    ): AxiosPromise<Array<Build>> {
      return localVarFp
        .deleteForgeFromBuild(forgeId, forgeBuild, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch the builds assigned to a Forge version
     * @param {string} forgeId A forge UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listForgeBuilds(
      forgeId: string,
      options?: any
    ): AxiosPromise<Array<Build>> {
      return localVarFp
        .listForgeBuilds(forgeId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch the available Forge versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listForges(options?: any): AxiosPromise<Array<Forge>> {
      return localVarFp
        .listForges(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search for available Forge versions
     * @param {string} forgeId A search token to search Forge versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForges(forgeId: string, options?: any): AxiosPromise<Array<Forge>> {
      return localVarFp
        .searchForges(forgeId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the available Forge versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateForge(options?: any): AxiosPromise<GeneralError> {
      return localVarFp
        .updateForge(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for appendForgeToBuild operation in ForgeApi.
 * @export
 * @interface ForgeApiAppendForgeToBuildRequest
 */
export interface ForgeApiAppendForgeToBuildRequest {
  /**
   * A forge UUID or slug
   * @type {string}
   * @memberof ForgeApiAppendForgeToBuild
   */
  readonly forgeId: string;

  /**
   * The build data to append
   * @type {ForgeBuildParams}
   * @memberof ForgeApiAppendForgeToBuild
   */
  readonly forgeBuild: ForgeBuildParams;
}

/**
 * Request parameters for deleteForgeFromBuild operation in ForgeApi.
 * @export
 * @interface ForgeApiDeleteForgeFromBuildRequest
 */
export interface ForgeApiDeleteForgeFromBuildRequest {
  /**
   * A forge UUID or slug
   * @type {string}
   * @memberof ForgeApiDeleteForgeFromBuild
   */
  readonly forgeId: string;

  /**
   * The build data to unlink
   * @type {ForgeBuildParams}
   * @memberof ForgeApiDeleteForgeFromBuild
   */
  readonly forgeBuild: ForgeBuildParams;
}

/**
 * Request parameters for listForgeBuilds operation in ForgeApi.
 * @export
 * @interface ForgeApiListForgeBuildsRequest
 */
export interface ForgeApiListForgeBuildsRequest {
  /**
   * A forge UUID or slug
   * @type {string}
   * @memberof ForgeApiListForgeBuilds
   */
  readonly forgeId: string;
}

/**
 * Request parameters for searchForges operation in ForgeApi.
 * @export
 * @interface ForgeApiSearchForgesRequest
 */
export interface ForgeApiSearchForgesRequest {
  /**
   * A search token to search Forge versions
   * @type {string}
   * @memberof ForgeApiSearchForges
   */
  readonly forgeId: string;
}

/**
 * ForgeApi - object-oriented interface
 * @export
 * @class ForgeApi
 * @extends {BaseAPI}
 */
export class ForgeApi extends BaseAPI {
  /**
   *
   * @summary Assign a build to a Forge version
   * @param {ForgeApiAppendForgeToBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForgeApi
   */
  public appendForgeToBuild(
    requestParameters: ForgeApiAppendForgeToBuildRequest,
    options?: AxiosRequestConfig
  ) {
    return ForgeApiFp(this.configuration)
      .appendForgeToBuild(
        requestParameters.forgeId,
        requestParameters.forgeBuild,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a build from a Forge version
   * @param {ForgeApiDeleteForgeFromBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForgeApi
   */
  public deleteForgeFromBuild(
    requestParameters: ForgeApiDeleteForgeFromBuildRequest,
    options?: AxiosRequestConfig
  ) {
    return ForgeApiFp(this.configuration)
      .deleteForgeFromBuild(
        requestParameters.forgeId,
        requestParameters.forgeBuild,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch the builds assigned to a Forge version
   * @param {ForgeApiListForgeBuildsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForgeApi
   */
  public listForgeBuilds(
    requestParameters: ForgeApiListForgeBuildsRequest,
    options?: AxiosRequestConfig
  ) {
    return ForgeApiFp(this.configuration)
      .listForgeBuilds(requestParameters.forgeId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch the available Forge versions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForgeApi
   */
  public listForges(options?: AxiosRequestConfig) {
    return ForgeApiFp(this.configuration)
      .listForges(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search for available Forge versions
   * @param {ForgeApiSearchForgesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForgeApi
   */
  public searchForges(
    requestParameters: ForgeApiSearchForgesRequest,
    options?: AxiosRequestConfig
  ) {
    return ForgeApiFp(this.configuration)
      .searchForges(requestParameters.forgeId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the available Forge versions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForgeApi
   */
  public updateForge(options?: AxiosRequestConfig) {
    return ForgeApiFp(this.configuration)
      .updateForge(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
