/* tslint:disable */
/* eslint-disable */
/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * Contact: kleister@webhippie.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { Build } from "../model";
// @ts-ignore
import type { BuildVersionParams } from "../model";
// @ts-ignore
import type { BuildVersions } from "../model";
// @ts-ignore
import type { Builds } from "../model";
// @ts-ignore
import type { Notification } from "../model";
// @ts-ignore
import type { Pack } from "../model";
// @ts-ignore
import type { PackTeamParams } from "../model";
// @ts-ignore
import type { PackTeams } from "../model";
// @ts-ignore
import type { PackUserParams } from "../model";
// @ts-ignore
import type { PackUsers } from "../model";
// @ts-ignore
import type { Packs } from "../model";
/**
 * PackApi - axios parameter creator
 * @export
 */
export const PackApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Attach a version to a build
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {BuildVersionParams} buildVersionParams The build version data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachBuildToVersion: async (
      packId: string,
      buildId: string,
      buildVersionParams: BuildVersionParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("attachBuildToVersion", "packId", packId);
      // verify required parameter 'buildId' is not null or undefined
      assertParamExists("attachBuildToVersion", "buildId", buildId);
      // verify required parameter 'buildVersionParams' is not null or undefined
      assertParamExists(
        "attachBuildToVersion",
        "buildVersionParams",
        buildVersionParams,
      );
      const localVarPath = `/packs/{pack_id}/builds/{build_id}/versions`
        .replace(`{${"pack_id"}}`, encodeURIComponent(String(packId)))
        .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        buildVersionParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Attach a team to pack
     * @param {string} packId A pack identifier or slug
     * @param {PackTeamParams} packTeamParams The team data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachPackToTeam: async (
      packId: string,
      packTeamParams: PackTeamParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("attachPackToTeam", "packId", packId);
      // verify required parameter 'packTeamParams' is not null or undefined
      assertParamExists("attachPackToTeam", "packTeamParams", packTeamParams);
      const localVarPath = `/packs/{pack_id}/teams`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        packTeamParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Attach a user to pack
     * @param {string} packId A pack identifier or slug
     * @param {PackUserParams} packUserParams The user data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachPackToUser: async (
      packId: string,
      packUserParams: PackUserParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("attachPackToUser", "packId", packId);
      // verify required parameter 'packUserParams' is not null or undefined
      assertParamExists("attachPackToUser", "packUserParams", packUserParams);
      const localVarPath = `/packs/{pack_id}/users`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        packUserParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {Build} build The build data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuild: async (
      packId: string,
      build: Build,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("createBuild", "packId", packId);
      // verify required parameter 'build' is not null or undefined
      assertParamExists("createBuild", "build", build);
      const localVarPath = `/packs/{pack_id}/builds`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        build,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new pack
     * @param {Pack} pack The pack data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPack: async (
      pack: Pack,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'pack' is not null or undefined
      assertParamExists("createPack", "pack", pack);
      const localVarPath = `/packs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        pack,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a specific build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuild: async (
      packId: string,
      buildId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("deleteBuild", "packId", packId);
      // verify required parameter 'buildId' is not null or undefined
      assertParamExists("deleteBuild", "buildId", buildId);
      const localVarPath = `/packs/{pack_id}/builds/{build_id}`
        .replace(`{${"pack_id"}}`, encodeURIComponent(String(packId)))
        .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a version from a build
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {BuildVersionParams} buildVersionParams The build version data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildFromVersion: async (
      packId: string,
      buildId: string,
      buildVersionParams: BuildVersionParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("deleteBuildFromVersion", "packId", packId);
      // verify required parameter 'buildId' is not null or undefined
      assertParamExists("deleteBuildFromVersion", "buildId", buildId);
      // verify required parameter 'buildVersionParams' is not null or undefined
      assertParamExists(
        "deleteBuildFromVersion",
        "buildVersionParams",
        buildVersionParams,
      );
      const localVarPath = `/packs/{pack_id}/builds/{build_id}/versions`
        .replace(`{${"pack_id"}}`, encodeURIComponent(String(packId)))
        .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        buildVersionParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a specific pack
     * @param {string} packId A pack identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePack: async (
      packId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("deletePack", "packId", packId);
      const localVarPath = `/packs/{pack_id}`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a team from pack
     * @param {string} packId A pack identifier or slug
     * @param {PackTeamParams} packTeamParams The pack team data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePackFromTeam: async (
      packId: string,
      packTeamParams: PackTeamParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("deletePackFromTeam", "packId", packId);
      // verify required parameter 'packTeamParams' is not null or undefined
      assertParamExists("deletePackFromTeam", "packTeamParams", packTeamParams);
      const localVarPath = `/packs/{pack_id}/teams`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        packTeamParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a user from pack
     * @param {string} packId A pack identifier or slug
     * @param {PackUserParams} packUserParams The pack user data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePackFromUser: async (
      packId: string,
      packUserParams: PackUserParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("deletePackFromUser", "packId", packId);
      // verify required parameter 'packUserParams' is not null or undefined
      assertParamExists("deletePackFromUser", "packUserParams", packUserParams);
      const localVarPath = `/packs/{pack_id}/users`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        packUserParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all versions attached to build
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {string} [search] Search query
     * @param {ListBuildVersionsSortEnum} [sort] Sorting column
     * @param {ListBuildVersionsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuildVersions: async (
      packId: string,
      buildId: string,
      search?: string,
      sort?: ListBuildVersionsSortEnum,
      order?: ListBuildVersionsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("listBuildVersions", "packId", packId);
      // verify required parameter 'buildId' is not null or undefined
      assertParamExists("listBuildVersions", "buildId", buildId);
      const localVarPath = `/packs/{pack_id}/builds/{build_id}/versions`
        .replace(`{${"pack_id"}}`, encodeURIComponent(String(packId)))
        .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all available builds for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} [search] Search query
     * @param {ListBuildsSortEnum} [sort] Sorting column
     * @param {ListBuildsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilds: async (
      packId: string,
      search?: string,
      sort?: ListBuildsSortEnum,
      order?: ListBuildsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("listBuilds", "packId", packId);
      const localVarPath = `/packs/{pack_id}/builds`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all teams attached to pack
     * @param {string} packId A pack identifier or slug
     * @param {string} [search] Search query
     * @param {ListPackTeamsSortEnum} [sort] Sorting column
     * @param {ListPackTeamsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPackTeams: async (
      packId: string,
      search?: string,
      sort?: ListPackTeamsSortEnum,
      order?: ListPackTeamsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("listPackTeams", "packId", packId);
      const localVarPath = `/packs/{pack_id}/teams`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all users attached to pack
     * @param {string} packId A pack identifier or slug
     * @param {string} [search] Search query
     * @param {ListPackUsersSortEnum} [sort] Sorting column
     * @param {ListPackUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPackUsers: async (
      packId: string,
      search?: string,
      sort?: ListPackUsersSortEnum,
      order?: ListPackUsersOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("listPackUsers", "packId", packId);
      const localVarPath = `/packs/{pack_id}/users`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all available packs
     * @param {string} [search] Search query
     * @param {ListPacksSortEnum} [sort] Sorting column
     * @param {ListPacksOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPacks: async (
      search?: string,
      sort?: ListPacksSortEnum,
      order?: ListPacksOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/packs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update team perms for pack
     * @param {string} packId A pack identifier or slug
     * @param {PackTeamParams} packTeamParams The team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitPackTeam: async (
      packId: string,
      packTeamParams: PackTeamParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("permitPackTeam", "packId", packId);
      // verify required parameter 'packTeamParams' is not null or undefined
      assertParamExists("permitPackTeam", "packTeamParams", packTeamParams);
      const localVarPath = `/packs/{pack_id}/teams`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        packTeamParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update user perms for pack
     * @param {string} packId A pack identifier or slug
     * @param {PackUserParams} packUserParams The user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitPackUser: async (
      packId: string,
      packUserParams: PackUserParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("permitPackUser", "packId", packId);
      // verify required parameter 'packUserParams' is not null or undefined
      assertParamExists("permitPackUser", "packUserParams", packUserParams);
      const localVarPath = `/packs/{pack_id}/users`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        packUserParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch a specific build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showBuild: async (
      packId: string,
      buildId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("showBuild", "packId", packId);
      // verify required parameter 'buildId' is not null or undefined
      assertParamExists("showBuild", "buildId", buildId);
      const localVarPath = `/packs/{pack_id}/builds/{build_id}`
        .replace(`{${"pack_id"}}`, encodeURIComponent(String(packId)))
        .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch a specific pack
     * @param {string} packId A pack identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showPack: async (
      packId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("showPack", "packId", packId);
      const localVarPath = `/packs/{pack_id}`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a specific build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {Build} build The build data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuild: async (
      packId: string,
      buildId: string,
      build: Build,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("updateBuild", "packId", packId);
      // verify required parameter 'buildId' is not null or undefined
      assertParamExists("updateBuild", "buildId", buildId);
      // verify required parameter 'build' is not null or undefined
      assertParamExists("updateBuild", "build", build);
      const localVarPath = `/packs/{pack_id}/builds/{build_id}`
        .replace(`{${"pack_id"}}`, encodeURIComponent(String(packId)))
        .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        build,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a specific pack
     * @param {string} packId A pack identifier or slug
     * @param {Pack} pack The pack data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePack: async (
      packId: string,
      pack: Pack,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("updatePack", "packId", packId);
      // verify required parameter 'pack' is not null or undefined
      assertParamExists("updatePack", "pack", pack);
      const localVarPath = `/packs/{pack_id}`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        pack,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PackApi - functional programming interface
 * @export
 */
export const PackApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PackApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Attach a version to a build
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {BuildVersionParams} buildVersionParams The build version data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachBuildToVersion(
      packId: string,
      buildId: string,
      buildVersionParams: BuildVersionParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachBuildToVersion(
          packId,
          buildId,
          buildVersionParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.attachBuildToVersion"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Attach a team to pack
     * @param {string} packId A pack identifier or slug
     * @param {PackTeamParams} packTeamParams The team data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachPackToTeam(
      packId: string,
      packTeamParams: PackTeamParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachPackToTeam(
          packId,
          packTeamParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.attachPackToTeam"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Attach a user to pack
     * @param {string} packId A pack identifier or slug
     * @param {PackUserParams} packUserParams The user data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachPackToUser(
      packId: string,
      packUserParams: PackUserParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachPackToUser(
          packId,
          packUserParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.attachPackToUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {Build} build The build data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBuild(
      packId: string,
      build: Build,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Build>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBuild(
        packId,
        build,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.createBuild"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new pack
     * @param {Pack} pack The pack data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPack(
      pack: Pack,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pack>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPack(
        pack,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.createPack"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a specific build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuild(
      packId: string,
      buildId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuild(
        packId,
        buildId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.deleteBuild"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a version from a build
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {BuildVersionParams} buildVersionParams The build version data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuildFromVersion(
      packId: string,
      buildId: string,
      buildVersionParams: BuildVersionParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteBuildFromVersion(
          packId,
          buildId,
          buildVersionParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.deleteBuildFromVersion"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a specific pack
     * @param {string} packId A pack identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePack(
      packId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePack(
        packId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.deletePack"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a team from pack
     * @param {string} packId A pack identifier or slug
     * @param {PackTeamParams} packTeamParams The pack team data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePackFromTeam(
      packId: string,
      packTeamParams: PackTeamParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deletePackFromTeam(
          packId,
          packTeamParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.deletePackFromTeam"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a user from pack
     * @param {string} packId A pack identifier or slug
     * @param {PackUserParams} packUserParams The pack user data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePackFromUser(
      packId: string,
      packUserParams: PackUserParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deletePackFromUser(
          packId,
          packUserParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.deletePackFromUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all versions attached to build
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {string} [search] Search query
     * @param {ListBuildVersionsSortEnum} [sort] Sorting column
     * @param {ListBuildVersionsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listBuildVersions(
      packId: string,
      buildId: string,
      search?: string,
      sort?: ListBuildVersionsSortEnum,
      order?: ListBuildVersionsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildVersions>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listBuildVersions(
          packId,
          buildId,
          search,
          sort,
          order,
          limit,
          offset,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.listBuildVersions"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all available builds for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} [search] Search query
     * @param {ListBuildsSortEnum} [sort] Sorting column
     * @param {ListBuildsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listBuilds(
      packId: string,
      search?: string,
      sort?: ListBuildsSortEnum,
      order?: ListBuildsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Builds>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listBuilds(
        packId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.listBuilds"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all teams attached to pack
     * @param {string} packId A pack identifier or slug
     * @param {string} [search] Search query
     * @param {ListPackTeamsSortEnum} [sort] Sorting column
     * @param {ListPackTeamsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPackTeams(
      packId: string,
      search?: string,
      sort?: ListPackTeamsSortEnum,
      order?: ListPackTeamsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackTeams>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPackTeams(
        packId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.listPackTeams"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all users attached to pack
     * @param {string} packId A pack identifier or slug
     * @param {string} [search] Search query
     * @param {ListPackUsersSortEnum} [sort] Sorting column
     * @param {ListPackUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPackUsers(
      packId: string,
      search?: string,
      sort?: ListPackUsersSortEnum,
      order?: ListPackUsersOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackUsers>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPackUsers(
        packId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.listPackUsers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all available packs
     * @param {string} [search] Search query
     * @param {ListPacksSortEnum} [sort] Sorting column
     * @param {ListPacksOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPacks(
      search?: string,
      sort?: ListPacksSortEnum,
      order?: ListPacksOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Packs>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPacks(
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.listPacks"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update team perms for pack
     * @param {string} packId A pack identifier or slug
     * @param {PackTeamParams} packTeamParams The team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitPackTeam(
      packId: string,
      packTeamParams: PackTeamParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitPackTeam(
        packId,
        packTeamParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.permitPackTeam"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update user perms for pack
     * @param {string} packId A pack identifier or slug
     * @param {PackUserParams} packUserParams The user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitPackUser(
      packId: string,
      packUserParams: PackUserParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitPackUser(
        packId,
        packUserParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.permitPackUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch a specific build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showBuild(
      packId: string,
      buildId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Build>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showBuild(
        packId,
        buildId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.showBuild"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch a specific pack
     * @param {string} packId A pack identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showPack(
      packId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pack>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showPack(
        packId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.showPack"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a specific build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {Build} build The build data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuild(
      packId: string,
      buildId: string,
      build: Build,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Build>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuild(
        packId,
        buildId,
        build,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.updateBuild"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a specific pack
     * @param {string} packId A pack identifier or slug
     * @param {Pack} pack The pack data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePack(
      packId: string,
      pack: Pack,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pack>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePack(
        packId,
        pack,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.updatePack"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PackApi - factory interface
 * @export
 */
export const PackApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PackApiFp(configuration);
  return {
    /**
     *
     * @summary Attach a version to a build
     * @param {PackApiAttachBuildToVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachBuildToVersion(
      requestParameters: PackApiAttachBuildToVersionRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachBuildToVersion(
          requestParameters.packId,
          requestParameters.buildId,
          requestParameters.buildVersionParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Attach a team to pack
     * @param {PackApiAttachPackToTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachPackToTeam(
      requestParameters: PackApiAttachPackToTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachPackToTeam(
          requestParameters.packId,
          requestParameters.packTeamParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Attach a user to pack
     * @param {PackApiAttachPackToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachPackToUser(
      requestParameters: PackApiAttachPackToUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachPackToUser(
          requestParameters.packId,
          requestParameters.packUserParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new build for a pack
     * @param {PackApiCreateBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuild(
      requestParameters: PackApiCreateBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Build> {
      return localVarFp
        .createBuild(requestParameters.packId, requestParameters.build, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new pack
     * @param {PackApiCreatePackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPack(
      requestParameters: PackApiCreatePackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Pack> {
      return localVarFp
        .createPack(requestParameters.pack, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a specific build for a pack
     * @param {PackApiDeleteBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuild(
      requestParameters: PackApiDeleteBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteBuild(
          requestParameters.packId,
          requestParameters.buildId,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a version from a build
     * @param {PackApiDeleteBuildFromVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildFromVersion(
      requestParameters: PackApiDeleteBuildFromVersionRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteBuildFromVersion(
          requestParameters.packId,
          requestParameters.buildId,
          requestParameters.buildVersionParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a specific pack
     * @param {PackApiDeletePackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePack(
      requestParameters: PackApiDeletePackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deletePack(requestParameters.packId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a team from pack
     * @param {PackApiDeletePackFromTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePackFromTeam(
      requestParameters: PackApiDeletePackFromTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deletePackFromTeam(
          requestParameters.packId,
          requestParameters.packTeamParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a user from pack
     * @param {PackApiDeletePackFromUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePackFromUser(
      requestParameters: PackApiDeletePackFromUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deletePackFromUser(
          requestParameters.packId,
          requestParameters.packUserParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all versions attached to build
     * @param {PackApiListBuildVersionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuildVersions(
      requestParameters: PackApiListBuildVersionsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BuildVersions> {
      return localVarFp
        .listBuildVersions(
          requestParameters.packId,
          requestParameters.buildId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all available builds for a pack
     * @param {PackApiListBuildsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilds(
      requestParameters: PackApiListBuildsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Builds> {
      return localVarFp
        .listBuilds(
          requestParameters.packId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all teams attached to pack
     * @param {PackApiListPackTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPackTeams(
      requestParameters: PackApiListPackTeamsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PackTeams> {
      return localVarFp
        .listPackTeams(
          requestParameters.packId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all users attached to pack
     * @param {PackApiListPackUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPackUsers(
      requestParameters: PackApiListPackUsersRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PackUsers> {
      return localVarFp
        .listPackUsers(
          requestParameters.packId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all available packs
     * @param {PackApiListPacksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPacks(
      requestParameters: PackApiListPacksRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Packs> {
      return localVarFp
        .listPacks(
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update team perms for pack
     * @param {PackApiPermitPackTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitPackTeam(
      requestParameters: PackApiPermitPackTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitPackTeam(
          requestParameters.packId,
          requestParameters.packTeamParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update user perms for pack
     * @param {PackApiPermitPackUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitPackUser(
      requestParameters: PackApiPermitPackUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitPackUser(
          requestParameters.packId,
          requestParameters.packUserParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch a specific build for a pack
     * @param {PackApiShowBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showBuild(
      requestParameters: PackApiShowBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Build> {
      return localVarFp
        .showBuild(requestParameters.packId, requestParameters.buildId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch a specific pack
     * @param {PackApiShowPackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showPack(
      requestParameters: PackApiShowPackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Pack> {
      return localVarFp
        .showPack(requestParameters.packId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a specific build for a pack
     * @param {PackApiUpdateBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuild(
      requestParameters: PackApiUpdateBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Build> {
      return localVarFp
        .updateBuild(
          requestParameters.packId,
          requestParameters.buildId,
          requestParameters.build,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a specific pack
     * @param {PackApiUpdatePackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePack(
      requestParameters: PackApiUpdatePackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Pack> {
      return localVarFp
        .updatePack(requestParameters.packId, requestParameters.pack, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for attachBuildToVersion operation in PackApi.
 * @export
 * @interface PackApiAttachBuildToVersionRequest
 */
export interface PackApiAttachBuildToVersionRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiAttachBuildToVersion
   */
  readonly packId: string;

  /**
   * A build identifier or slug
   * @type {string}
   * @memberof PackApiAttachBuildToVersion
   */
  readonly buildId: string;

  /**
   * The build version data to attach
   * @type {BuildVersionParams}
   * @memberof PackApiAttachBuildToVersion
   */
  readonly buildVersionParams: BuildVersionParams;
}

/**
 * Request parameters for attachPackToTeam operation in PackApi.
 * @export
 * @interface PackApiAttachPackToTeamRequest
 */
export interface PackApiAttachPackToTeamRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiAttachPackToTeam
   */
  readonly packId: string;

  /**
   * The team data to attach
   * @type {PackTeamParams}
   * @memberof PackApiAttachPackToTeam
   */
  readonly packTeamParams: PackTeamParams;
}

/**
 * Request parameters for attachPackToUser operation in PackApi.
 * @export
 * @interface PackApiAttachPackToUserRequest
 */
export interface PackApiAttachPackToUserRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiAttachPackToUser
   */
  readonly packId: string;

  /**
   * The user data to attach
   * @type {PackUserParams}
   * @memberof PackApiAttachPackToUser
   */
  readonly packUserParams: PackUserParams;
}

/**
 * Request parameters for createBuild operation in PackApi.
 * @export
 * @interface PackApiCreateBuildRequest
 */
export interface PackApiCreateBuildRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiCreateBuild
   */
  readonly packId: string;

  /**
   * The build data to create
   * @type {Build}
   * @memberof PackApiCreateBuild
   */
  readonly build: Build;
}

/**
 * Request parameters for createPack operation in PackApi.
 * @export
 * @interface PackApiCreatePackRequest
 */
export interface PackApiCreatePackRequest {
  /**
   * The pack data to create
   * @type {Pack}
   * @memberof PackApiCreatePack
   */
  readonly pack: Pack;
}

/**
 * Request parameters for deleteBuild operation in PackApi.
 * @export
 * @interface PackApiDeleteBuildRequest
 */
export interface PackApiDeleteBuildRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiDeleteBuild
   */
  readonly packId: string;

  /**
   * A build identifier or slug
   * @type {string}
   * @memberof PackApiDeleteBuild
   */
  readonly buildId: string;
}

/**
 * Request parameters for deleteBuildFromVersion operation in PackApi.
 * @export
 * @interface PackApiDeleteBuildFromVersionRequest
 */
export interface PackApiDeleteBuildFromVersionRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiDeleteBuildFromVersion
   */
  readonly packId: string;

  /**
   * A build identifier or slug
   * @type {string}
   * @memberof PackApiDeleteBuildFromVersion
   */
  readonly buildId: string;

  /**
   * The build version data to unlink
   * @type {BuildVersionParams}
   * @memberof PackApiDeleteBuildFromVersion
   */
  readonly buildVersionParams: BuildVersionParams;
}

/**
 * Request parameters for deletePack operation in PackApi.
 * @export
 * @interface PackApiDeletePackRequest
 */
export interface PackApiDeletePackRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiDeletePack
   */
  readonly packId: string;
}

/**
 * Request parameters for deletePackFromTeam operation in PackApi.
 * @export
 * @interface PackApiDeletePackFromTeamRequest
 */
export interface PackApiDeletePackFromTeamRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiDeletePackFromTeam
   */
  readonly packId: string;

  /**
   * The pack team data to unlink
   * @type {PackTeamParams}
   * @memberof PackApiDeletePackFromTeam
   */
  readonly packTeamParams: PackTeamParams;
}

/**
 * Request parameters for deletePackFromUser operation in PackApi.
 * @export
 * @interface PackApiDeletePackFromUserRequest
 */
export interface PackApiDeletePackFromUserRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiDeletePackFromUser
   */
  readonly packId: string;

  /**
   * The pack user data to unlink
   * @type {PackUserParams}
   * @memberof PackApiDeletePackFromUser
   */
  readonly packUserParams: PackUserParams;
}

/**
 * Request parameters for listBuildVersions operation in PackApi.
 * @export
 * @interface PackApiListBuildVersionsRequest
 */
export interface PackApiListBuildVersionsRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiListBuildVersions
   */
  readonly packId: string;

  /**
   * A build identifier or slug
   * @type {string}
   * @memberof PackApiListBuildVersions
   */
  readonly buildId: string;

  /**
   * Search query
   * @type {string}
   * @memberof PackApiListBuildVersions
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'name' | 'public'}
   * @memberof PackApiListBuildVersions
   */
  readonly sort?: ListBuildVersionsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof PackApiListBuildVersions
   */
  readonly order?: ListBuildVersionsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof PackApiListBuildVersions
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof PackApiListBuildVersions
   */
  readonly offset?: number;
}

/**
 * Request parameters for listBuilds operation in PackApi.
 * @export
 * @interface PackApiListBuildsRequest
 */
export interface PackApiListBuildsRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiListBuilds
   */
  readonly packId: string;

  /**
   * Search query
   * @type {string}
   * @memberof PackApiListBuilds
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'name' | 'public'}
   * @memberof PackApiListBuilds
   */
  readonly sort?: ListBuildsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof PackApiListBuilds
   */
  readonly order?: ListBuildsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof PackApiListBuilds
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof PackApiListBuilds
   */
  readonly offset?: number;
}

/**
 * Request parameters for listPackTeams operation in PackApi.
 * @export
 * @interface PackApiListPackTeamsRequest
 */
export interface PackApiListPackTeamsRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiListPackTeams
   */
  readonly packId: string;

  /**
   * Search query
   * @type {string}
   * @memberof PackApiListPackTeams
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'slug' | 'name'}
   * @memberof PackApiListPackTeams
   */
  readonly sort?: ListPackTeamsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof PackApiListPackTeams
   */
  readonly order?: ListPackTeamsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof PackApiListPackTeams
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof PackApiListPackTeams
   */
  readonly offset?: number;
}

/**
 * Request parameters for listPackUsers operation in PackApi.
 * @export
 * @interface PackApiListPackUsersRequest
 */
export interface PackApiListPackUsersRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiListPackUsers
   */
  readonly packId: string;

  /**
   * Search query
   * @type {string}
   * @memberof PackApiListPackUsers
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'username' | 'email' | 'fullname' | 'admin' | 'active'}
   * @memberof PackApiListPackUsers
   */
  readonly sort?: ListPackUsersSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof PackApiListPackUsers
   */
  readonly order?: ListPackUsersOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof PackApiListPackUsers
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof PackApiListPackUsers
   */
  readonly offset?: number;
}

/**
 * Request parameters for listPacks operation in PackApi.
 * @export
 * @interface PackApiListPacksRequest
 */
export interface PackApiListPacksRequest {
  /**
   * Search query
   * @type {string}
   * @memberof PackApiListPacks
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'slug' | 'name' | 'public'}
   * @memberof PackApiListPacks
   */
  readonly sort?: ListPacksSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof PackApiListPacks
   */
  readonly order?: ListPacksOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof PackApiListPacks
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof PackApiListPacks
   */
  readonly offset?: number;
}

/**
 * Request parameters for permitPackTeam operation in PackApi.
 * @export
 * @interface PackApiPermitPackTeamRequest
 */
export interface PackApiPermitPackTeamRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiPermitPackTeam
   */
  readonly packId: string;

  /**
   * The team data to update
   * @type {PackTeamParams}
   * @memberof PackApiPermitPackTeam
   */
  readonly packTeamParams: PackTeamParams;
}

/**
 * Request parameters for permitPackUser operation in PackApi.
 * @export
 * @interface PackApiPermitPackUserRequest
 */
export interface PackApiPermitPackUserRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiPermitPackUser
   */
  readonly packId: string;

  /**
   * The user data to update
   * @type {PackUserParams}
   * @memberof PackApiPermitPackUser
   */
  readonly packUserParams: PackUserParams;
}

/**
 * Request parameters for showBuild operation in PackApi.
 * @export
 * @interface PackApiShowBuildRequest
 */
export interface PackApiShowBuildRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiShowBuild
   */
  readonly packId: string;

  /**
   * A build identifier or slug
   * @type {string}
   * @memberof PackApiShowBuild
   */
  readonly buildId: string;
}

/**
 * Request parameters for showPack operation in PackApi.
 * @export
 * @interface PackApiShowPackRequest
 */
export interface PackApiShowPackRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiShowPack
   */
  readonly packId: string;
}

/**
 * Request parameters for updateBuild operation in PackApi.
 * @export
 * @interface PackApiUpdateBuildRequest
 */
export interface PackApiUpdateBuildRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiUpdateBuild
   */
  readonly packId: string;

  /**
   * A build identifier or slug
   * @type {string}
   * @memberof PackApiUpdateBuild
   */
  readonly buildId: string;

  /**
   * The build data to update
   * @type {Build}
   * @memberof PackApiUpdateBuild
   */
  readonly build: Build;
}

/**
 * Request parameters for updatePack operation in PackApi.
 * @export
 * @interface PackApiUpdatePackRequest
 */
export interface PackApiUpdatePackRequest {
  /**
   * A pack identifier or slug
   * @type {string}
   * @memberof PackApiUpdatePack
   */
  readonly packId: string;

  /**
   * The pack data to update
   * @type {Pack}
   * @memberof PackApiUpdatePack
   */
  readonly pack: Pack;
}

/**
 * PackApi - object-oriented interface
 * @export
 * @class PackApi
 * @extends {BaseAPI}
 */
export class PackApi extends BaseAPI {
  /**
   *
   * @summary Attach a version to a build
   * @param {PackApiAttachBuildToVersionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public attachBuildToVersion(
    requestParameters: PackApiAttachBuildToVersionRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .attachBuildToVersion(
        requestParameters.packId,
        requestParameters.buildId,
        requestParameters.buildVersionParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Attach a team to pack
   * @param {PackApiAttachPackToTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public attachPackToTeam(
    requestParameters: PackApiAttachPackToTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .attachPackToTeam(
        requestParameters.packId,
        requestParameters.packTeamParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Attach a user to pack
   * @param {PackApiAttachPackToUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public attachPackToUser(
    requestParameters: PackApiAttachPackToUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .attachPackToUser(
        requestParameters.packId,
        requestParameters.packUserParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new build for a pack
   * @param {PackApiCreateBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public createBuild(
    requestParameters: PackApiCreateBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .createBuild(requestParameters.packId, requestParameters.build, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new pack
   * @param {PackApiCreatePackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public createPack(
    requestParameters: PackApiCreatePackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .createPack(requestParameters.pack, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a specific build for a pack
   * @param {PackApiDeleteBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public deleteBuild(
    requestParameters: PackApiDeleteBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .deleteBuild(requestParameters.packId, requestParameters.buildId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a version from a build
   * @param {PackApiDeleteBuildFromVersionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public deleteBuildFromVersion(
    requestParameters: PackApiDeleteBuildFromVersionRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .deleteBuildFromVersion(
        requestParameters.packId,
        requestParameters.buildId,
        requestParameters.buildVersionParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a specific pack
   * @param {PackApiDeletePackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public deletePack(
    requestParameters: PackApiDeletePackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .deletePack(requestParameters.packId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a team from pack
   * @param {PackApiDeletePackFromTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public deletePackFromTeam(
    requestParameters: PackApiDeletePackFromTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .deletePackFromTeam(
        requestParameters.packId,
        requestParameters.packTeamParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a user from pack
   * @param {PackApiDeletePackFromUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public deletePackFromUser(
    requestParameters: PackApiDeletePackFromUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .deletePackFromUser(
        requestParameters.packId,
        requestParameters.packUserParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all versions attached to build
   * @param {PackApiListBuildVersionsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public listBuildVersions(
    requestParameters: PackApiListBuildVersionsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .listBuildVersions(
        requestParameters.packId,
        requestParameters.buildId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all available builds for a pack
   * @param {PackApiListBuildsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public listBuilds(
    requestParameters: PackApiListBuildsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .listBuilds(
        requestParameters.packId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all teams attached to pack
   * @param {PackApiListPackTeamsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public listPackTeams(
    requestParameters: PackApiListPackTeamsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .listPackTeams(
        requestParameters.packId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all users attached to pack
   * @param {PackApiListPackUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public listPackUsers(
    requestParameters: PackApiListPackUsersRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .listPackUsers(
        requestParameters.packId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all available packs
   * @param {PackApiListPacksRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public listPacks(
    requestParameters: PackApiListPacksRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .listPacks(
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update team perms for pack
   * @param {PackApiPermitPackTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public permitPackTeam(
    requestParameters: PackApiPermitPackTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .permitPackTeam(
        requestParameters.packId,
        requestParameters.packTeamParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update user perms for pack
   * @param {PackApiPermitPackUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public permitPackUser(
    requestParameters: PackApiPermitPackUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .permitPackUser(
        requestParameters.packId,
        requestParameters.packUserParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch a specific build for a pack
   * @param {PackApiShowBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public showBuild(
    requestParameters: PackApiShowBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .showBuild(requestParameters.packId, requestParameters.buildId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch a specific pack
   * @param {PackApiShowPackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public showPack(
    requestParameters: PackApiShowPackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .showPack(requestParameters.packId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a specific build for a pack
   * @param {PackApiUpdateBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public updateBuild(
    requestParameters: PackApiUpdateBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .updateBuild(
        requestParameters.packId,
        requestParameters.buildId,
        requestParameters.build,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a specific pack
   * @param {PackApiUpdatePackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackApi
   */
  public updatePack(
    requestParameters: PackApiUpdatePackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .updatePack(requestParameters.packId, requestParameters.pack, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ListBuildVersionsSortEnum = {
  Name: "name",
  Public: "public",
} as const;
export type ListBuildVersionsSortEnum =
  (typeof ListBuildVersionsSortEnum)[keyof typeof ListBuildVersionsSortEnum];
/**
 * @export
 */
export const ListBuildVersionsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListBuildVersionsOrderEnum =
  (typeof ListBuildVersionsOrderEnum)[keyof typeof ListBuildVersionsOrderEnum];
/**
 * @export
 */
export const ListBuildsSortEnum = {
  Name: "name",
  Public: "public",
} as const;
export type ListBuildsSortEnum =
  (typeof ListBuildsSortEnum)[keyof typeof ListBuildsSortEnum];
/**
 * @export
 */
export const ListBuildsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListBuildsOrderEnum =
  (typeof ListBuildsOrderEnum)[keyof typeof ListBuildsOrderEnum];
/**
 * @export
 */
export const ListPackTeamsSortEnum = {
  Slug: "slug",
  Name: "name",
} as const;
export type ListPackTeamsSortEnum =
  (typeof ListPackTeamsSortEnum)[keyof typeof ListPackTeamsSortEnum];
/**
 * @export
 */
export const ListPackTeamsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListPackTeamsOrderEnum =
  (typeof ListPackTeamsOrderEnum)[keyof typeof ListPackTeamsOrderEnum];
/**
 * @export
 */
export const ListPackUsersSortEnum = {
  Username: "username",
  Email: "email",
  Fullname: "fullname",
  Admin: "admin",
  Active: "active",
} as const;
export type ListPackUsersSortEnum =
  (typeof ListPackUsersSortEnum)[keyof typeof ListPackUsersSortEnum];
/**
 * @export
 */
export const ListPackUsersOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListPackUsersOrderEnum =
  (typeof ListPackUsersOrderEnum)[keyof typeof ListPackUsersOrderEnum];
/**
 * @export
 */
export const ListPacksSortEnum = {
  Slug: "slug",
  Name: "name",
  Public: "public",
} as const;
export type ListPacksSortEnum =
  (typeof ListPacksSortEnum)[keyof typeof ListPacksSortEnum];
/**
 * @export
 */
export const ListPacksOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListPacksOrderEnum =
  (typeof ListPacksOrderEnum)[keyof typeof ListPacksOrderEnum];
