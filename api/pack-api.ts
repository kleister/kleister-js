/* tslint:disable */
/* eslint-disable */
/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * Contact: kleister@webhippie.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { AttachBuildToVersionRequest } from "../model";
// @ts-ignore
import type { Build } from "../model";
// @ts-ignore
import type { CreateBuildRequest } from "../model";
// @ts-ignore
import type { CreatePackRequest } from "../model";
// @ts-ignore
import type { DeletePackFromGroupRequest } from "../model";
// @ts-ignore
import type { DeletePackFromUserRequest } from "../model";
// @ts-ignore
import type { ListBuildVersions200Response } from "../model";
// @ts-ignore
import type { ListBuilds200Response } from "../model";
// @ts-ignore
import type { ListPackGroups200Response } from "../model";
// @ts-ignore
import type { ListPackUsers200Response } from "../model";
// @ts-ignore
import type { ListPacks200Response } from "../model";
// @ts-ignore
import type { Notification } from "../model";
// @ts-ignore
import type { Pack } from "../model";
// @ts-ignore
import type { PermitPackGroupRequest } from "../model";
// @ts-ignore
import type { PermitPackUserRequest } from "../model";
/**
 * PackApi - axios parameter creator
 */
export const PackApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Attach a version to a build
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {AttachBuildToVersionRequest} attachBuildToVersionRequest The build version data to create or delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachBuildToVersion: async (
      packId: string,
      buildId: string,
      attachBuildToVersionRequest: AttachBuildToVersionRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("attachBuildToVersion", "packId", packId);
      // verify required parameter 'buildId' is not null or undefined
      assertParamExists("attachBuildToVersion", "buildId", buildId);
      // verify required parameter 'attachBuildToVersionRequest' is not null or undefined
      assertParamExists(
        "attachBuildToVersion",
        "attachBuildToVersionRequest",
        attachBuildToVersionRequest,
      );
      const localVarPath = `/packs/{pack_id}/builds/{build_id}/versions`
        .replace(`{${"pack_id"}}`, encodeURIComponent(String(packId)))
        .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        attachBuildToVersionRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Attach a group to pack
     * @param {string} packId A pack identifier or slug
     * @param {PermitPackGroupRequest} permitPackGroupRequest The pack group data to permit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachPackToGroup: async (
      packId: string,
      permitPackGroupRequest: PermitPackGroupRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("attachPackToGroup", "packId", packId);
      // verify required parameter 'permitPackGroupRequest' is not null or undefined
      assertParamExists(
        "attachPackToGroup",
        "permitPackGroupRequest",
        permitPackGroupRequest,
      );
      const localVarPath = `/packs/{pack_id}/groups`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        permitPackGroupRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Attach a user to pack
     * @param {string} packId A pack identifier or slug
     * @param {PermitPackUserRequest} permitPackUserRequest The pack user data to permit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachPackToUser: async (
      packId: string,
      permitPackUserRequest: PermitPackUserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("attachPackToUser", "packId", packId);
      // verify required parameter 'permitPackUserRequest' is not null or undefined
      assertParamExists(
        "attachPackToUser",
        "permitPackUserRequest",
        permitPackUserRequest,
      );
      const localVarPath = `/packs/{pack_id}/users`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        permitPackUserRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {CreateBuildRequest} createBuildRequest The build data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuild: async (
      packId: string,
      createBuildRequest: CreateBuildRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("createBuild", "packId", packId);
      // verify required parameter 'createBuildRequest' is not null or undefined
      assertParamExists(
        "createBuild",
        "createBuildRequest",
        createBuildRequest,
      );
      const localVarPath = `/packs/{pack_id}/builds`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createBuildRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new pack
     * @param {CreatePackRequest} createPackRequest The pack data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPack: async (
      createPackRequest: CreatePackRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createPackRequest' is not null or undefined
      assertParamExists("createPack", "createPackRequest", createPackRequest);
      const localVarPath = `/packs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPackRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a specific build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuild: async (
      packId: string,
      buildId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("deleteBuild", "packId", packId);
      // verify required parameter 'buildId' is not null or undefined
      assertParamExists("deleteBuild", "buildId", buildId);
      const localVarPath = `/packs/{pack_id}/builds/{build_id}`
        .replace(`{${"pack_id"}}`, encodeURIComponent(String(packId)))
        .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a version from a build
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {AttachBuildToVersionRequest} attachBuildToVersionRequest The build version data to create or delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildFromVersion: async (
      packId: string,
      buildId: string,
      attachBuildToVersionRequest: AttachBuildToVersionRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("deleteBuildFromVersion", "packId", packId);
      // verify required parameter 'buildId' is not null or undefined
      assertParamExists("deleteBuildFromVersion", "buildId", buildId);
      // verify required parameter 'attachBuildToVersionRequest' is not null or undefined
      assertParamExists(
        "deleteBuildFromVersion",
        "attachBuildToVersionRequest",
        attachBuildToVersionRequest,
      );
      const localVarPath = `/packs/{pack_id}/builds/{build_id}/versions`
        .replace(`{${"pack_id"}}`, encodeURIComponent(String(packId)))
        .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        attachBuildToVersionRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a specific pack
     * @param {string} packId A pack identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePack: async (
      packId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("deletePack", "packId", packId);
      const localVarPath = `/packs/{pack_id}`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a group from pack
     * @param {string} packId A pack identifier or slug
     * @param {DeletePackFromGroupRequest} deletePackFromGroupRequest The pack group data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePackFromGroup: async (
      packId: string,
      deletePackFromGroupRequest: DeletePackFromGroupRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("deletePackFromGroup", "packId", packId);
      // verify required parameter 'deletePackFromGroupRequest' is not null or undefined
      assertParamExists(
        "deletePackFromGroup",
        "deletePackFromGroupRequest",
        deletePackFromGroupRequest,
      );
      const localVarPath = `/packs/{pack_id}/groups`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deletePackFromGroupRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a user from pack
     * @param {string} packId A pack identifier or slug
     * @param {DeletePackFromUserRequest} deletePackFromUserRequest The pack user data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePackFromUser: async (
      packId: string,
      deletePackFromUserRequest: DeletePackFromUserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("deletePackFromUser", "packId", packId);
      // verify required parameter 'deletePackFromUserRequest' is not null or undefined
      assertParamExists(
        "deletePackFromUser",
        "deletePackFromUserRequest",
        deletePackFromUserRequest,
      );
      const localVarPath = `/packs/{pack_id}/users`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deletePackFromUserRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all versions attached to build
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListBuildVersionsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuildVersions: async (
      packId: string,
      buildId: string,
      search?: string,
      sort?: string,
      order?: ListBuildVersionsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("listBuildVersions", "packId", packId);
      // verify required parameter 'buildId' is not null or undefined
      assertParamExists("listBuildVersions", "buildId", buildId);
      const localVarPath = `/packs/{pack_id}/builds/{build_id}/versions`
        .replace(`{${"pack_id"}}`, encodeURIComponent(String(packId)))
        .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all available builds for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListBuildsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilds: async (
      packId: string,
      search?: string,
      sort?: string,
      order?: ListBuildsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("listBuilds", "packId", packId);
      const localVarPath = `/packs/{pack_id}/builds`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all groups attached to pack
     * @param {string} packId A pack identifier or slug
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListPackGroupsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPackGroups: async (
      packId: string,
      search?: string,
      sort?: string,
      order?: ListPackGroupsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("listPackGroups", "packId", packId);
      const localVarPath = `/packs/{pack_id}/groups`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all users attached to pack
     * @param {string} packId A pack identifier or slug
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListPackUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPackUsers: async (
      packId: string,
      search?: string,
      sort?: string,
      order?: ListPackUsersOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("listPackUsers", "packId", packId);
      const localVarPath = `/packs/{pack_id}/users`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all available packs
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListPacksOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPacks: async (
      search?: string,
      sort?: string,
      order?: ListPacksOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/packs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update group perms for pack
     * @param {string} packId A pack identifier or slug
     * @param {PermitPackGroupRequest} permitPackGroupRequest The pack group data to permit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitPackGroup: async (
      packId: string,
      permitPackGroupRequest: PermitPackGroupRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("permitPackGroup", "packId", packId);
      // verify required parameter 'permitPackGroupRequest' is not null or undefined
      assertParamExists(
        "permitPackGroup",
        "permitPackGroupRequest",
        permitPackGroupRequest,
      );
      const localVarPath = `/packs/{pack_id}/groups`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        permitPackGroupRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update user perms for pack
     * @param {string} packId A pack identifier or slug
     * @param {PermitPackUserRequest} permitPackUserRequest The pack user data to permit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitPackUser: async (
      packId: string,
      permitPackUserRequest: PermitPackUserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("permitPackUser", "packId", packId);
      // verify required parameter 'permitPackUserRequest' is not null or undefined
      assertParamExists(
        "permitPackUser",
        "permitPackUserRequest",
        permitPackUserRequest,
      );
      const localVarPath = `/packs/{pack_id}/users`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        permitPackUserRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch a specific build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showBuild: async (
      packId: string,
      buildId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("showBuild", "packId", packId);
      // verify required parameter 'buildId' is not null or undefined
      assertParamExists("showBuild", "buildId", buildId);
      const localVarPath = `/packs/{pack_id}/builds/{build_id}`
        .replace(`{${"pack_id"}}`, encodeURIComponent(String(packId)))
        .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch a specific pack
     * @param {string} packId A pack identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showPack: async (
      packId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("showPack", "packId", packId);
      const localVarPath = `/packs/{pack_id}`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a specific build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {CreateBuildRequest} createBuildRequest The build data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuild: async (
      packId: string,
      buildId: string,
      createBuildRequest: CreateBuildRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("updateBuild", "packId", packId);
      // verify required parameter 'buildId' is not null or undefined
      assertParamExists("updateBuild", "buildId", buildId);
      // verify required parameter 'createBuildRequest' is not null or undefined
      assertParamExists(
        "updateBuild",
        "createBuildRequest",
        createBuildRequest,
      );
      const localVarPath = `/packs/{pack_id}/builds/{build_id}`
        .replace(`{${"pack_id"}}`, encodeURIComponent(String(packId)))
        .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createBuildRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a specific pack
     * @param {string} packId A pack identifier or slug
     * @param {CreatePackRequest} createPackRequest The pack data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePack: async (
      packId: string,
      createPackRequest: CreatePackRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'packId' is not null or undefined
      assertParamExists("updatePack", "packId", packId);
      // verify required parameter 'createPackRequest' is not null or undefined
      assertParamExists("updatePack", "createPackRequest", createPackRequest);
      const localVarPath = `/packs/{pack_id}`.replace(
        `{${"pack_id"}}`,
        encodeURIComponent(String(packId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPackRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PackApi - functional programming interface
 */
export const PackApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PackApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Attach a version to a build
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {AttachBuildToVersionRequest} attachBuildToVersionRequest The build version data to create or delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachBuildToVersion(
      packId: string,
      buildId: string,
      attachBuildToVersionRequest: AttachBuildToVersionRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachBuildToVersion(
          packId,
          buildId,
          attachBuildToVersionRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.attachBuildToVersion"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Attach a group to pack
     * @param {string} packId A pack identifier or slug
     * @param {PermitPackGroupRequest} permitPackGroupRequest The pack group data to permit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachPackToGroup(
      packId: string,
      permitPackGroupRequest: PermitPackGroupRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachPackToGroup(
          packId,
          permitPackGroupRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.attachPackToGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Attach a user to pack
     * @param {string} packId A pack identifier or slug
     * @param {PermitPackUserRequest} permitPackUserRequest The pack user data to permit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachPackToUser(
      packId: string,
      permitPackUserRequest: PermitPackUserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachPackToUser(
          packId,
          permitPackUserRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.attachPackToUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {CreateBuildRequest} createBuildRequest The build data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBuild(
      packId: string,
      createBuildRequest: CreateBuildRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Build>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBuild(
        packId,
        createBuildRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.createBuild"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new pack
     * @param {CreatePackRequest} createPackRequest The pack data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPack(
      createPackRequest: CreatePackRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pack>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPack(
        createPackRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.createPack"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a specific build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuild(
      packId: string,
      buildId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuild(
        packId,
        buildId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.deleteBuild"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a version from a build
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {AttachBuildToVersionRequest} attachBuildToVersionRequest The build version data to create or delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBuildFromVersion(
      packId: string,
      buildId: string,
      attachBuildToVersionRequest: AttachBuildToVersionRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteBuildFromVersion(
          packId,
          buildId,
          attachBuildToVersionRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.deleteBuildFromVersion"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a specific pack
     * @param {string} packId A pack identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePack(
      packId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePack(
        packId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.deletePack"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a group from pack
     * @param {string} packId A pack identifier or slug
     * @param {DeletePackFromGroupRequest} deletePackFromGroupRequest The pack group data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePackFromGroup(
      packId: string,
      deletePackFromGroupRequest: DeletePackFromGroupRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deletePackFromGroup(
          packId,
          deletePackFromGroupRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.deletePackFromGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a user from pack
     * @param {string} packId A pack identifier or slug
     * @param {DeletePackFromUserRequest} deletePackFromUserRequest The pack user data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePackFromUser(
      packId: string,
      deletePackFromUserRequest: DeletePackFromUserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deletePackFromUser(
          packId,
          deletePackFromUserRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.deletePackFromUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all versions attached to build
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListBuildVersionsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listBuildVersions(
      packId: string,
      buildId: string,
      search?: string,
      sort?: string,
      order?: ListBuildVersionsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ListBuildVersions200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listBuildVersions(
          packId,
          buildId,
          search,
          sort,
          order,
          limit,
          offset,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.listBuildVersions"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all available builds for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListBuildsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listBuilds(
      packId: string,
      search?: string,
      sort?: string,
      order?: ListBuildsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ListBuilds200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listBuilds(
        packId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.listBuilds"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all groups attached to pack
     * @param {string} packId A pack identifier or slug
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListPackGroupsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPackGroups(
      packId: string,
      search?: string,
      sort?: string,
      order?: ListPackGroupsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ListPackGroups200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPackGroups(
        packId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.listPackGroups"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all users attached to pack
     * @param {string} packId A pack identifier or slug
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListPackUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPackUsers(
      packId: string,
      search?: string,
      sort?: string,
      order?: ListPackUsersOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ListPackUsers200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPackUsers(
        packId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.listPackUsers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all available packs
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListPacksOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPacks(
      search?: string,
      sort?: string,
      order?: ListPacksOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ListPacks200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPacks(
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.listPacks"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update group perms for pack
     * @param {string} packId A pack identifier or slug
     * @param {PermitPackGroupRequest} permitPackGroupRequest The pack group data to permit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitPackGroup(
      packId: string,
      permitPackGroupRequest: PermitPackGroupRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitPackGroup(
        packId,
        permitPackGroupRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.permitPackGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update user perms for pack
     * @param {string} packId A pack identifier or slug
     * @param {PermitPackUserRequest} permitPackUserRequest The pack user data to permit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitPackUser(
      packId: string,
      permitPackUserRequest: PermitPackUserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitPackUser(
        packId,
        permitPackUserRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.permitPackUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch a specific build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showBuild(
      packId: string,
      buildId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Build>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showBuild(
        packId,
        buildId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.showBuild"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch a specific pack
     * @param {string} packId A pack identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showPack(
      packId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pack>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showPack(
        packId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.showPack"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a specific build for a pack
     * @param {string} packId A pack identifier or slug
     * @param {string} buildId A build identifier or slug
     * @param {CreateBuildRequest} createBuildRequest The build data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBuild(
      packId: string,
      buildId: string,
      createBuildRequest: CreateBuildRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Build>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuild(
        packId,
        buildId,
        createBuildRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.updateBuild"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a specific pack
     * @param {string} packId A pack identifier or slug
     * @param {CreatePackRequest} createPackRequest The pack data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePack(
      packId: string,
      createPackRequest: CreatePackRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pack>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePack(
        packId,
        createPackRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PackApi.updatePack"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PackApi - factory interface
 */
export const PackApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PackApiFp(configuration);
  return {
    /**
     *
     * @summary Attach a version to a build
     * @param {PackApiAttachBuildToVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachBuildToVersion(
      requestParameters: PackApiAttachBuildToVersionRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachBuildToVersion(
          requestParameters.packId,
          requestParameters.buildId,
          requestParameters.attachBuildToVersionRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Attach a group to pack
     * @param {PackApiAttachPackToGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachPackToGroup(
      requestParameters: PackApiAttachPackToGroupRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachPackToGroup(
          requestParameters.packId,
          requestParameters.permitPackGroupRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Attach a user to pack
     * @param {PackApiAttachPackToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachPackToUser(
      requestParameters: PackApiAttachPackToUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachPackToUser(
          requestParameters.packId,
          requestParameters.permitPackUserRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new build for a pack
     * @param {PackApiCreateBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBuild(
      requestParameters: PackApiCreateBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Build> {
      return localVarFp
        .createBuild(
          requestParameters.packId,
          requestParameters.createBuildRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new pack
     * @param {PackApiCreatePackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPack(
      requestParameters: PackApiCreatePackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Pack> {
      return localVarFp
        .createPack(requestParameters.createPackRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a specific build for a pack
     * @param {PackApiDeleteBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuild(
      requestParameters: PackApiDeleteBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteBuild(
          requestParameters.packId,
          requestParameters.buildId,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a version from a build
     * @param {PackApiDeleteBuildFromVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBuildFromVersion(
      requestParameters: PackApiDeleteBuildFromVersionRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteBuildFromVersion(
          requestParameters.packId,
          requestParameters.buildId,
          requestParameters.attachBuildToVersionRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a specific pack
     * @param {PackApiDeletePackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePack(
      requestParameters: PackApiDeletePackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deletePack(requestParameters.packId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a group from pack
     * @param {PackApiDeletePackFromGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePackFromGroup(
      requestParameters: PackApiDeletePackFromGroupRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deletePackFromGroup(
          requestParameters.packId,
          requestParameters.deletePackFromGroupRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a user from pack
     * @param {PackApiDeletePackFromUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePackFromUser(
      requestParameters: PackApiDeletePackFromUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deletePackFromUser(
          requestParameters.packId,
          requestParameters.deletePackFromUserRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all versions attached to build
     * @param {PackApiListBuildVersionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuildVersions(
      requestParameters: PackApiListBuildVersionsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ListBuildVersions200Response> {
      return localVarFp
        .listBuildVersions(
          requestParameters.packId,
          requestParameters.buildId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all available builds for a pack
     * @param {PackApiListBuildsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBuilds(
      requestParameters: PackApiListBuildsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ListBuilds200Response> {
      return localVarFp
        .listBuilds(
          requestParameters.packId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all groups attached to pack
     * @param {PackApiListPackGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPackGroups(
      requestParameters: PackApiListPackGroupsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ListPackGroups200Response> {
      return localVarFp
        .listPackGroups(
          requestParameters.packId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all users attached to pack
     * @param {PackApiListPackUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPackUsers(
      requestParameters: PackApiListPackUsersRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ListPackUsers200Response> {
      return localVarFp
        .listPackUsers(
          requestParameters.packId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all available packs
     * @param {PackApiListPacksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPacks(
      requestParameters: PackApiListPacksRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ListPacks200Response> {
      return localVarFp
        .listPacks(
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update group perms for pack
     * @param {PackApiPermitPackGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitPackGroup(
      requestParameters: PackApiPermitPackGroupRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitPackGroup(
          requestParameters.packId,
          requestParameters.permitPackGroupRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update user perms for pack
     * @param {PackApiPermitPackUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitPackUser(
      requestParameters: PackApiPermitPackUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitPackUser(
          requestParameters.packId,
          requestParameters.permitPackUserRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch a specific build for a pack
     * @param {PackApiShowBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showBuild(
      requestParameters: PackApiShowBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Build> {
      return localVarFp
        .showBuild(requestParameters.packId, requestParameters.buildId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch a specific pack
     * @param {PackApiShowPackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showPack(
      requestParameters: PackApiShowPackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Pack> {
      return localVarFp
        .showPack(requestParameters.packId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a specific build for a pack
     * @param {PackApiUpdateBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBuild(
      requestParameters: PackApiUpdateBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Build> {
      return localVarFp
        .updateBuild(
          requestParameters.packId,
          requestParameters.buildId,
          requestParameters.createBuildRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a specific pack
     * @param {PackApiUpdatePackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePack(
      requestParameters: PackApiUpdatePackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Pack> {
      return localVarFp
        .updatePack(
          requestParameters.packId,
          requestParameters.createPackRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for attachBuildToVersion operation in PackApi.
 */
export interface PackApiAttachBuildToVersionRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * A build identifier or slug
   */
  readonly buildId: string;

  /**
   * The build version data to create or delete
   */
  readonly attachBuildToVersionRequest: AttachBuildToVersionRequest;
}

/**
 * Request parameters for attachPackToGroup operation in PackApi.
 */
export interface PackApiAttachPackToGroupRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * The pack group data to permit
   */
  readonly permitPackGroupRequest: PermitPackGroupRequest;
}

/**
 * Request parameters for attachPackToUser operation in PackApi.
 */
export interface PackApiAttachPackToUserRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * The pack user data to permit
   */
  readonly permitPackUserRequest: PermitPackUserRequest;
}

/**
 * Request parameters for createBuild operation in PackApi.
 */
export interface PackApiCreateBuildRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * The build data to create
   */
  readonly createBuildRequest: CreateBuildRequest;
}

/**
 * Request parameters for createPack operation in PackApi.
 */
export interface PackApiCreatePackRequest {
  /**
   * The pack data to create
   */
  readonly createPackRequest: CreatePackRequest;
}

/**
 * Request parameters for deleteBuild operation in PackApi.
 */
export interface PackApiDeleteBuildRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * A build identifier or slug
   */
  readonly buildId: string;
}

/**
 * Request parameters for deleteBuildFromVersion operation in PackApi.
 */
export interface PackApiDeleteBuildFromVersionRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * A build identifier or slug
   */
  readonly buildId: string;

  /**
   * The build version data to create or delete
   */
  readonly attachBuildToVersionRequest: AttachBuildToVersionRequest;
}

/**
 * Request parameters for deletePack operation in PackApi.
 */
export interface PackApiDeletePackRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;
}

/**
 * Request parameters for deletePackFromGroup operation in PackApi.
 */
export interface PackApiDeletePackFromGroupRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * The pack group data to unlink
   */
  readonly deletePackFromGroupRequest: DeletePackFromGroupRequest;
}

/**
 * Request parameters for deletePackFromUser operation in PackApi.
 */
export interface PackApiDeletePackFromUserRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * The pack user data to unlink
   */
  readonly deletePackFromUserRequest: DeletePackFromUserRequest;
}

/**
 * Request parameters for listBuildVersions operation in PackApi.
 */
export interface PackApiListBuildVersionsRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * A build identifier or slug
   */
  readonly buildId: string;

  /**
   * Search query
   */
  readonly search?: string;

  /**
   * Sorting column
   */
  readonly sort?: string;

  /**
   * Sorting order
   */
  readonly order?: ListBuildVersionsOrderEnum;

  /**
   * Paging limit
   */
  readonly limit?: number;

  /**
   * Paging offset
   */
  readonly offset?: number;
}

/**
 * Request parameters for listBuilds operation in PackApi.
 */
export interface PackApiListBuildsRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * Search query
   */
  readonly search?: string;

  /**
   * Sorting column
   */
  readonly sort?: string;

  /**
   * Sorting order
   */
  readonly order?: ListBuildsOrderEnum;

  /**
   * Paging limit
   */
  readonly limit?: number;

  /**
   * Paging offset
   */
  readonly offset?: number;
}

/**
 * Request parameters for listPackGroups operation in PackApi.
 */
export interface PackApiListPackGroupsRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * Search query
   */
  readonly search?: string;

  /**
   * Sorting column
   */
  readonly sort?: string;

  /**
   * Sorting order
   */
  readonly order?: ListPackGroupsOrderEnum;

  /**
   * Paging limit
   */
  readonly limit?: number;

  /**
   * Paging offset
   */
  readonly offset?: number;
}

/**
 * Request parameters for listPackUsers operation in PackApi.
 */
export interface PackApiListPackUsersRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * Search query
   */
  readonly search?: string;

  /**
   * Sorting column
   */
  readonly sort?: string;

  /**
   * Sorting order
   */
  readonly order?: ListPackUsersOrderEnum;

  /**
   * Paging limit
   */
  readonly limit?: number;

  /**
   * Paging offset
   */
  readonly offset?: number;
}

/**
 * Request parameters for listPacks operation in PackApi.
 */
export interface PackApiListPacksRequest {
  /**
   * Search query
   */
  readonly search?: string;

  /**
   * Sorting column
   */
  readonly sort?: string;

  /**
   * Sorting order
   */
  readonly order?: ListPacksOrderEnum;

  /**
   * Paging limit
   */
  readonly limit?: number;

  /**
   * Paging offset
   */
  readonly offset?: number;
}

/**
 * Request parameters for permitPackGroup operation in PackApi.
 */
export interface PackApiPermitPackGroupRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * The pack group data to permit
   */
  readonly permitPackGroupRequest: PermitPackGroupRequest;
}

/**
 * Request parameters for permitPackUser operation in PackApi.
 */
export interface PackApiPermitPackUserRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * The pack user data to permit
   */
  readonly permitPackUserRequest: PermitPackUserRequest;
}

/**
 * Request parameters for showBuild operation in PackApi.
 */
export interface PackApiShowBuildRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * A build identifier or slug
   */
  readonly buildId: string;
}

/**
 * Request parameters for showPack operation in PackApi.
 */
export interface PackApiShowPackRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;
}

/**
 * Request parameters for updateBuild operation in PackApi.
 */
export interface PackApiUpdateBuildRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * A build identifier or slug
   */
  readonly buildId: string;

  /**
   * The build data to update
   */
  readonly createBuildRequest: CreateBuildRequest;
}

/**
 * Request parameters for updatePack operation in PackApi.
 */
export interface PackApiUpdatePackRequest {
  /**
   * A pack identifier or slug
   */
  readonly packId: string;

  /**
   * The pack data to update
   */
  readonly createPackRequest: CreatePackRequest;
}

/**
 * PackApi - object-oriented interface
 */
export class PackApi extends BaseAPI {
  /**
   *
   * @summary Attach a version to a build
   * @param {PackApiAttachBuildToVersionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public attachBuildToVersion(
    requestParameters: PackApiAttachBuildToVersionRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .attachBuildToVersion(
        requestParameters.packId,
        requestParameters.buildId,
        requestParameters.attachBuildToVersionRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Attach a group to pack
   * @param {PackApiAttachPackToGroupRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public attachPackToGroup(
    requestParameters: PackApiAttachPackToGroupRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .attachPackToGroup(
        requestParameters.packId,
        requestParameters.permitPackGroupRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Attach a user to pack
   * @param {PackApiAttachPackToUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public attachPackToUser(
    requestParameters: PackApiAttachPackToUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .attachPackToUser(
        requestParameters.packId,
        requestParameters.permitPackUserRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new build for a pack
   * @param {PackApiCreateBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public createBuild(
    requestParameters: PackApiCreateBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .createBuild(
        requestParameters.packId,
        requestParameters.createBuildRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new pack
   * @param {PackApiCreatePackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public createPack(
    requestParameters: PackApiCreatePackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .createPack(requestParameters.createPackRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a specific build for a pack
   * @param {PackApiDeleteBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public deleteBuild(
    requestParameters: PackApiDeleteBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .deleteBuild(requestParameters.packId, requestParameters.buildId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a version from a build
   * @param {PackApiDeleteBuildFromVersionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public deleteBuildFromVersion(
    requestParameters: PackApiDeleteBuildFromVersionRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .deleteBuildFromVersion(
        requestParameters.packId,
        requestParameters.buildId,
        requestParameters.attachBuildToVersionRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a specific pack
   * @param {PackApiDeletePackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public deletePack(
    requestParameters: PackApiDeletePackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .deletePack(requestParameters.packId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a group from pack
   * @param {PackApiDeletePackFromGroupRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public deletePackFromGroup(
    requestParameters: PackApiDeletePackFromGroupRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .deletePackFromGroup(
        requestParameters.packId,
        requestParameters.deletePackFromGroupRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a user from pack
   * @param {PackApiDeletePackFromUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public deletePackFromUser(
    requestParameters: PackApiDeletePackFromUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .deletePackFromUser(
        requestParameters.packId,
        requestParameters.deletePackFromUserRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all versions attached to build
   * @param {PackApiListBuildVersionsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public listBuildVersions(
    requestParameters: PackApiListBuildVersionsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .listBuildVersions(
        requestParameters.packId,
        requestParameters.buildId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all available builds for a pack
   * @param {PackApiListBuildsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public listBuilds(
    requestParameters: PackApiListBuildsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .listBuilds(
        requestParameters.packId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all groups attached to pack
   * @param {PackApiListPackGroupsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public listPackGroups(
    requestParameters: PackApiListPackGroupsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .listPackGroups(
        requestParameters.packId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all users attached to pack
   * @param {PackApiListPackUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public listPackUsers(
    requestParameters: PackApiListPackUsersRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .listPackUsers(
        requestParameters.packId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all available packs
   * @param {PackApiListPacksRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public listPacks(
    requestParameters: PackApiListPacksRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .listPacks(
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update group perms for pack
   * @param {PackApiPermitPackGroupRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public permitPackGroup(
    requestParameters: PackApiPermitPackGroupRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .permitPackGroup(
        requestParameters.packId,
        requestParameters.permitPackGroupRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update user perms for pack
   * @param {PackApiPermitPackUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public permitPackUser(
    requestParameters: PackApiPermitPackUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .permitPackUser(
        requestParameters.packId,
        requestParameters.permitPackUserRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch a specific build for a pack
   * @param {PackApiShowBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public showBuild(
    requestParameters: PackApiShowBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .showBuild(requestParameters.packId, requestParameters.buildId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch a specific pack
   * @param {PackApiShowPackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public showPack(
    requestParameters: PackApiShowPackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .showPack(requestParameters.packId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a specific build for a pack
   * @param {PackApiUpdateBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public updateBuild(
    requestParameters: PackApiUpdateBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .updateBuild(
        requestParameters.packId,
        requestParameters.buildId,
        requestParameters.createBuildRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a specific pack
   * @param {PackApiUpdatePackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public updatePack(
    requestParameters: PackApiUpdatePackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PackApiFp(this.configuration)
      .updatePack(
        requestParameters.packId,
        requestParameters.createPackRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

export const ListBuildVersionsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListBuildVersionsOrderEnum =
  (typeof ListBuildVersionsOrderEnum)[keyof typeof ListBuildVersionsOrderEnum];
export const ListBuildsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListBuildsOrderEnum =
  (typeof ListBuildsOrderEnum)[keyof typeof ListBuildsOrderEnum];
export const ListPackGroupsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListPackGroupsOrderEnum =
  (typeof ListPackGroupsOrderEnum)[keyof typeof ListPackGroupsOrderEnum];
export const ListPackUsersOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListPackUsersOrderEnum =
  (typeof ListPackUsersOrderEnum)[keyof typeof ListPackUsersOrderEnum];
export const ListPacksOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListPacksOrderEnum =
  (typeof ListPacksOrderEnum)[keyof typeof ListPacksOrderEnum];
