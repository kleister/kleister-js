/* tslint:disable */
/* eslint-disable */
/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Build } from '../model';
// @ts-ignore
import { GeneralError } from '../model';
// @ts-ignore
import { Minecraft } from '../model';
// @ts-ignore
import { MinecraftBuildParams } from '../model';
// @ts-ignore
import { ValidationError } from '../model';
/**
 * MinecraftApi - axios parameter creator
 * @export
 */
export const MinecraftApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assign a build to a Minecraft version
         * @param {string} minecraftId A minecraft UUID or slug
         * @param {MinecraftBuildParams} minecraftBuild The build data to append
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appendMinecraftToBuild: async (minecraftId: string, minecraftBuild: MinecraftBuildParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minecraftId' is not null or undefined
            assertParamExists('appendMinecraftToBuild', 'minecraftId', minecraftId)
            // verify required parameter 'minecraftBuild' is not null or undefined
            assertParamExists('appendMinecraftToBuild', 'minecraftBuild', minecraftBuild)
            const localVarPath = `/minecraft/{minecraft_id}/builds`
                .replace(`{${"minecraft_id"}}`, encodeURIComponent(String(minecraftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(minecraftBuild, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unlink a build from a Minecraft version
         * @param {string} minecraftId A minecraft UUID or slug
         * @param {MinecraftBuildParams} minecraftBuild The build data to unlink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMinecraftFromBuild: async (minecraftId: string, minecraftBuild: MinecraftBuildParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minecraftId' is not null or undefined
            assertParamExists('deleteMinecraftFromBuild', 'minecraftId', minecraftId)
            // verify required parameter 'minecraftBuild' is not null or undefined
            assertParamExists('deleteMinecraftFromBuild', 'minecraftBuild', minecraftBuild)
            const localVarPath = `/minecraft/{minecraft_id}/builds`
                .replace(`{${"minecraft_id"}}`, encodeURIComponent(String(minecraftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(minecraftBuild, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch the builds assigned to a Minecraft version
         * @param {string} minecraftId A minecraft UUID or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMinecraftBuilds: async (minecraftId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minecraftId' is not null or undefined
            assertParamExists('listMinecraftBuilds', 'minecraftId', minecraftId)
            const localVarPath = `/minecraft/{minecraft_id}/builds`
                .replace(`{${"minecraft_id"}}`, encodeURIComponent(String(minecraftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch the available Minecraft versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMinecrafts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/minecraft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search for available Minecraft versions
         * @param {string} minecraftId A search token to search Minecraft versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMinecrafts: async (minecraftId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minecraftId' is not null or undefined
            assertParamExists('searchMinecrafts', 'minecraftId', minecraftId)
            const localVarPath = `/minecraft/{minecraft_id}`
                .replace(`{${"minecraft_id"}}`, encodeURIComponent(String(minecraftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the available Minecraft versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMinecraft: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/minecraft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MinecraftApi - functional programming interface
 * @export
 */
export const MinecraftApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MinecraftApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Assign a build to a Minecraft version
         * @param {string} minecraftId A minecraft UUID or slug
         * @param {MinecraftBuildParams} minecraftBuild The build data to append
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appendMinecraftToBuild(minecraftId: string, minecraftBuild: MinecraftBuildParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Build>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appendMinecraftToBuild(minecraftId, minecraftBuild, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unlink a build from a Minecraft version
         * @param {string} minecraftId A minecraft UUID or slug
         * @param {MinecraftBuildParams} minecraftBuild The build data to unlink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMinecraftFromBuild(minecraftId: string, minecraftBuild: MinecraftBuildParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Build>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMinecraftFromBuild(minecraftId, minecraftBuild, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fetch the builds assigned to a Minecraft version
         * @param {string} minecraftId A minecraft UUID or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMinecraftBuilds(minecraftId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Build>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMinecraftBuilds(minecraftId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fetch the available Minecraft versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMinecrafts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Minecraft>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMinecrafts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search for available Minecraft versions
         * @param {string} minecraftId A search token to search Minecraft versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMinecrafts(minecraftId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Minecraft>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMinecrafts(minecraftId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the available Minecraft versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMinecraft(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMinecraft(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MinecraftApi - factory interface
 * @export
 */
export const MinecraftApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MinecraftApiFp(configuration)
    return {
        /**
         * 
         * @summary Assign a build to a Minecraft version
         * @param {string} minecraftId A minecraft UUID or slug
         * @param {MinecraftBuildParams} minecraftBuild The build data to append
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appendMinecraftToBuild(minecraftId: string, minecraftBuild: MinecraftBuildParams, options?: any): AxiosPromise<Array<Build>> {
            return localVarFp.appendMinecraftToBuild(minecraftId, minecraftBuild, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unlink a build from a Minecraft version
         * @param {string} minecraftId A minecraft UUID or slug
         * @param {MinecraftBuildParams} minecraftBuild The build data to unlink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMinecraftFromBuild(minecraftId: string, minecraftBuild: MinecraftBuildParams, options?: any): AxiosPromise<Array<Build>> {
            return localVarFp.deleteMinecraftFromBuild(minecraftId, minecraftBuild, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch the builds assigned to a Minecraft version
         * @param {string} minecraftId A minecraft UUID or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMinecraftBuilds(minecraftId: string, options?: any): AxiosPromise<Array<Build>> {
            return localVarFp.listMinecraftBuilds(minecraftId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch the available Minecraft versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMinecrafts(options?: any): AxiosPromise<Array<Minecraft>> {
            return localVarFp.listMinecrafts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search for available Minecraft versions
         * @param {string} minecraftId A search token to search Minecraft versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMinecrafts(minecraftId: string, options?: any): AxiosPromise<Array<Minecraft>> {
            return localVarFp.searchMinecrafts(minecraftId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the available Minecraft versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMinecraft(options?: any): AxiosPromise<GeneralError> {
            return localVarFp.updateMinecraft(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for appendMinecraftToBuild operation in MinecraftApi.
 * @export
 * @interface MinecraftApiAppendMinecraftToBuildRequest
 */
export interface MinecraftApiAppendMinecraftToBuildRequest {
    /**
     * A minecraft UUID or slug
     * @type {string}
     * @memberof MinecraftApiAppendMinecraftToBuild
     */
    readonly minecraftId: string

    /**
     * The build data to append
     * @type {MinecraftBuildParams}
     * @memberof MinecraftApiAppendMinecraftToBuild
     */
    readonly minecraftBuild: MinecraftBuildParams
}

/**
 * Request parameters for deleteMinecraftFromBuild operation in MinecraftApi.
 * @export
 * @interface MinecraftApiDeleteMinecraftFromBuildRequest
 */
export interface MinecraftApiDeleteMinecraftFromBuildRequest {
    /**
     * A minecraft UUID or slug
     * @type {string}
     * @memberof MinecraftApiDeleteMinecraftFromBuild
     */
    readonly minecraftId: string

    /**
     * The build data to unlink
     * @type {MinecraftBuildParams}
     * @memberof MinecraftApiDeleteMinecraftFromBuild
     */
    readonly minecraftBuild: MinecraftBuildParams
}

/**
 * Request parameters for listMinecraftBuilds operation in MinecraftApi.
 * @export
 * @interface MinecraftApiListMinecraftBuildsRequest
 */
export interface MinecraftApiListMinecraftBuildsRequest {
    /**
     * A minecraft UUID or slug
     * @type {string}
     * @memberof MinecraftApiListMinecraftBuilds
     */
    readonly minecraftId: string
}

/**
 * Request parameters for searchMinecrafts operation in MinecraftApi.
 * @export
 * @interface MinecraftApiSearchMinecraftsRequest
 */
export interface MinecraftApiSearchMinecraftsRequest {
    /**
     * A search token to search Minecraft versions
     * @type {string}
     * @memberof MinecraftApiSearchMinecrafts
     */
    readonly minecraftId: string
}

/**
 * MinecraftApi - object-oriented interface
 * @export
 * @class MinecraftApi
 * @extends {BaseAPI}
 */
export class MinecraftApi extends BaseAPI {
    /**
     * 
     * @summary Assign a build to a Minecraft version
     * @param {MinecraftApiAppendMinecraftToBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MinecraftApi
     */
    public appendMinecraftToBuild(requestParameters: MinecraftApiAppendMinecraftToBuildRequest, options?: AxiosRequestConfig) {
        return MinecraftApiFp(this.configuration).appendMinecraftToBuild(requestParameters.minecraftId, requestParameters.minecraftBuild, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unlink a build from a Minecraft version
     * @param {MinecraftApiDeleteMinecraftFromBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MinecraftApi
     */
    public deleteMinecraftFromBuild(requestParameters: MinecraftApiDeleteMinecraftFromBuildRequest, options?: AxiosRequestConfig) {
        return MinecraftApiFp(this.configuration).deleteMinecraftFromBuild(requestParameters.minecraftId, requestParameters.minecraftBuild, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch the builds assigned to a Minecraft version
     * @param {MinecraftApiListMinecraftBuildsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MinecraftApi
     */
    public listMinecraftBuilds(requestParameters: MinecraftApiListMinecraftBuildsRequest, options?: AxiosRequestConfig) {
        return MinecraftApiFp(this.configuration).listMinecraftBuilds(requestParameters.minecraftId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch the available Minecraft versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MinecraftApi
     */
    public listMinecrafts(options?: AxiosRequestConfig) {
        return MinecraftApiFp(this.configuration).listMinecrafts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search for available Minecraft versions
     * @param {MinecraftApiSearchMinecraftsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MinecraftApi
     */
    public searchMinecrafts(requestParameters: MinecraftApiSearchMinecraftsRequest, options?: AxiosRequestConfig) {
        return MinecraftApiFp(this.configuration).searchMinecrafts(requestParameters.minecraftId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the available Minecraft versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MinecraftApi
     */
    public updateMinecraft(options?: AxiosRequestConfig) {
        return MinecraftApiFp(this.configuration).updateMinecraft(options).then((request) => request(this.axios, this.basePath));
    }
}
