/* tslint:disable */
/* eslint-disable */
/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * Contact: kleister@webhippie.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { AttachMinecraftToBuildRequest } from "../model";
// @ts-ignore
import type { ListMinecraftBuilds200Response } from "../model";
// @ts-ignore
import type { ListMinecrafts200Response } from "../model";
// @ts-ignore
import type { Notification } from "../model";
/**
 * MinecraftApi - axios parameter creator
 */
export const MinecraftApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Attach a build to a Minecraft version
     * @param {string} minecraftId A minecraft identifier or slug
     * @param {AttachMinecraftToBuildRequest} attachMinecraftToBuildRequest The minecraft build data to create or update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachMinecraftToBuild: async (
      minecraftId: string,
      attachMinecraftToBuildRequest: AttachMinecraftToBuildRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'minecraftId' is not null or undefined
      assertParamExists("attachMinecraftToBuild", "minecraftId", minecraftId);
      // verify required parameter 'attachMinecraftToBuildRequest' is not null or undefined
      assertParamExists(
        "attachMinecraftToBuild",
        "attachMinecraftToBuildRequest",
        attachMinecraftToBuildRequest,
      );
      const localVarPath = `/minecraft/{minecraft_id}/builds`.replace(
        `{${"minecraft_id"}}`,
        encodeURIComponent(String(minecraftId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        attachMinecraftToBuildRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a build from a Minecraft version
     * @param {string} minecraftId A minecraft identifier or slug
     * @param {AttachMinecraftToBuildRequest} attachMinecraftToBuildRequest The minecraft build data to create or update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinecraftFromBuild: async (
      minecraftId: string,
      attachMinecraftToBuildRequest: AttachMinecraftToBuildRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'minecraftId' is not null or undefined
      assertParamExists("deleteMinecraftFromBuild", "minecraftId", minecraftId);
      // verify required parameter 'attachMinecraftToBuildRequest' is not null or undefined
      assertParamExists(
        "deleteMinecraftFromBuild",
        "attachMinecraftToBuildRequest",
        attachMinecraftToBuildRequest,
      );
      const localVarPath = `/minecraft/{minecraft_id}/builds`.replace(
        `{${"minecraft_id"}}`,
        encodeURIComponent(String(minecraftId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        attachMinecraftToBuildRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch the builds attached to a Minecraft version
     * @param {string} minecraftId A minecraft identifier or slug
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListMinecraftBuildsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMinecraftBuilds: async (
      minecraftId: string,
      search?: string,
      sort?: string,
      order?: ListMinecraftBuildsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'minecraftId' is not null or undefined
      assertParamExists("listMinecraftBuilds", "minecraftId", minecraftId);
      const localVarPath = `/minecraft/{minecraft_id}/builds`.replace(
        `{${"minecraft_id"}}`,
        encodeURIComponent(String(minecraftId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch the available Minecraft versions
     * @param {string} [search] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMinecrafts: async (
      search?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/minecraft`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the available Minecraft versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMinecraft: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/minecraft`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MinecraftApi - functional programming interface
 */
export const MinecraftApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    MinecraftApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Attach a build to a Minecraft version
     * @param {string} minecraftId A minecraft identifier or slug
     * @param {AttachMinecraftToBuildRequest} attachMinecraftToBuildRequest The minecraft build data to create or update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachMinecraftToBuild(
      minecraftId: string,
      attachMinecraftToBuildRequest: AttachMinecraftToBuildRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachMinecraftToBuild(
          minecraftId,
          attachMinecraftToBuildRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MinecraftApi.attachMinecraftToBuild"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a build from a Minecraft version
     * @param {string} minecraftId A minecraft identifier or slug
     * @param {AttachMinecraftToBuildRequest} attachMinecraftToBuildRequest The minecraft build data to create or update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMinecraftFromBuild(
      minecraftId: string,
      attachMinecraftToBuildRequest: AttachMinecraftToBuildRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteMinecraftFromBuild(
          minecraftId,
          attachMinecraftToBuildRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MinecraftApi.deleteMinecraftFromBuild"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch the builds attached to a Minecraft version
     * @param {string} minecraftId A minecraft identifier or slug
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListMinecraftBuildsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listMinecraftBuilds(
      minecraftId: string,
      search?: string,
      sort?: string,
      order?: ListMinecraftBuildsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ListMinecraftBuilds200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listMinecraftBuilds(
          minecraftId,
          search,
          sort,
          order,
          limit,
          offset,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MinecraftApi.listMinecraftBuilds"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch the available Minecraft versions
     * @param {string} [search] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listMinecrafts(
      search?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ListMinecrafts200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listMinecrafts(
        search,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MinecraftApi.listMinecrafts"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update the available Minecraft versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateMinecraft(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateMinecraft(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MinecraftApi.updateMinecraft"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * MinecraftApi - factory interface
 */
export const MinecraftApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = MinecraftApiFp(configuration);
  return {
    /**
     *
     * @summary Attach a build to a Minecraft version
     * @param {MinecraftApiAttachMinecraftToBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachMinecraftToBuild(
      requestParameters: MinecraftApiAttachMinecraftToBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachMinecraftToBuild(
          requestParameters.minecraftId,
          requestParameters.attachMinecraftToBuildRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a build from a Minecraft version
     * @param {MinecraftApiDeleteMinecraftFromBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinecraftFromBuild(
      requestParameters: MinecraftApiDeleteMinecraftFromBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteMinecraftFromBuild(
          requestParameters.minecraftId,
          requestParameters.attachMinecraftToBuildRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch the builds attached to a Minecraft version
     * @param {MinecraftApiListMinecraftBuildsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMinecraftBuilds(
      requestParameters: MinecraftApiListMinecraftBuildsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ListMinecraftBuilds200Response> {
      return localVarFp
        .listMinecraftBuilds(
          requestParameters.minecraftId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch the available Minecraft versions
     * @param {MinecraftApiListMinecraftsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMinecrafts(
      requestParameters: MinecraftApiListMinecraftsRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ListMinecrafts200Response> {
      return localVarFp
        .listMinecrafts(requestParameters.search, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the available Minecraft versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMinecraft(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .updateMinecraft(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for attachMinecraftToBuild operation in MinecraftApi.
 */
export interface MinecraftApiAttachMinecraftToBuildRequest {
  /**
   * A minecraft identifier or slug
   */
  readonly minecraftId: string;

  /**
   * The minecraft build data to create or update
   */
  readonly attachMinecraftToBuildRequest: AttachMinecraftToBuildRequest;
}

/**
 * Request parameters for deleteMinecraftFromBuild operation in MinecraftApi.
 */
export interface MinecraftApiDeleteMinecraftFromBuildRequest {
  /**
   * A minecraft identifier or slug
   */
  readonly minecraftId: string;

  /**
   * The minecraft build data to create or update
   */
  readonly attachMinecraftToBuildRequest: AttachMinecraftToBuildRequest;
}

/**
 * Request parameters for listMinecraftBuilds operation in MinecraftApi.
 */
export interface MinecraftApiListMinecraftBuildsRequest {
  /**
   * A minecraft identifier or slug
   */
  readonly minecraftId: string;

  /**
   * Search query
   */
  readonly search?: string;

  /**
   * Sorting column
   */
  readonly sort?: string;

  /**
   * Sorting order
   */
  readonly order?: ListMinecraftBuildsOrderEnum;

  /**
   * Paging limit
   */
  readonly limit?: number;

  /**
   * Paging offset
   */
  readonly offset?: number;
}

/**
 * Request parameters for listMinecrafts operation in MinecraftApi.
 */
export interface MinecraftApiListMinecraftsRequest {
  /**
   * Search query
   */
  readonly search?: string;
}

/**
 * MinecraftApi - object-oriented interface
 */
export class MinecraftApi extends BaseAPI {
  /**
   *
   * @summary Attach a build to a Minecraft version
   * @param {MinecraftApiAttachMinecraftToBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public attachMinecraftToBuild(
    requestParameters: MinecraftApiAttachMinecraftToBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MinecraftApiFp(this.configuration)
      .attachMinecraftToBuild(
        requestParameters.minecraftId,
        requestParameters.attachMinecraftToBuildRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a build from a Minecraft version
   * @param {MinecraftApiDeleteMinecraftFromBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public deleteMinecraftFromBuild(
    requestParameters: MinecraftApiDeleteMinecraftFromBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MinecraftApiFp(this.configuration)
      .deleteMinecraftFromBuild(
        requestParameters.minecraftId,
        requestParameters.attachMinecraftToBuildRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch the builds attached to a Minecraft version
   * @param {MinecraftApiListMinecraftBuildsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public listMinecraftBuilds(
    requestParameters: MinecraftApiListMinecraftBuildsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MinecraftApiFp(this.configuration)
      .listMinecraftBuilds(
        requestParameters.minecraftId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch the available Minecraft versions
   * @param {MinecraftApiListMinecraftsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public listMinecrafts(
    requestParameters: MinecraftApiListMinecraftsRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return MinecraftApiFp(this.configuration)
      .listMinecrafts(requestParameters.search, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the available Minecraft versions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public updateMinecraft(options?: RawAxiosRequestConfig) {
    return MinecraftApiFp(this.configuration)
      .updateMinecraft(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

export const ListMinecraftBuildsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListMinecraftBuildsOrderEnum =
  (typeof ListMinecraftBuildsOrderEnum)[keyof typeof ListMinecraftBuildsOrderEnum];
