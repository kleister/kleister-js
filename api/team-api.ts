/* tslint:disable */
/* eslint-disable */
/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * Contact: kleister@webhippie.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { Notification } from "../model";
// @ts-ignore
import type { Team } from "../model";
// @ts-ignore
import type { TeamModParams } from "../model";
// @ts-ignore
import type { TeamMods } from "../model";
// @ts-ignore
import type { TeamPackParams } from "../model";
// @ts-ignore
import type { TeamPacks } from "../model";
// @ts-ignore
import type { TeamUserParams } from "../model";
// @ts-ignore
import type { TeamUsers } from "../model";
// @ts-ignore
import type { Teams } from "../model";
/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Attach a mod to team
     * @param {string} teamId A team identifier or slug
     * @param {TeamModParams} teamModParams The team mod data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachTeamToMod: async (
      teamId: string,
      teamModParams: TeamModParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("attachTeamToMod", "teamId", teamId);
      // verify required parameter 'teamModParams' is not null or undefined
      assertParamExists("attachTeamToMod", "teamModParams", teamModParams);
      const localVarPath = `/teams/{team_id}/mods`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamModParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Attach a pack to team
     * @param {string} teamId A team identifier or slug
     * @param {TeamPackParams} teamPackParams The team pack data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachTeamToPack: async (
      teamId: string,
      teamPackParams: TeamPackParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("attachTeamToPack", "teamId", teamId);
      // verify required parameter 'teamPackParams' is not null or undefined
      assertParamExists("attachTeamToPack", "teamPackParams", teamPackParams);
      const localVarPath = `/teams/{team_id}/packs`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamPackParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Attach a user to team
     * @param {string} teamId A team identifier or slug
     * @param {TeamUserParams} teamUserParams The team user data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachTeamToUser: async (
      teamId: string,
      teamUserParams: TeamUserParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("attachTeamToUser", "teamId", teamId);
      // verify required parameter 'teamUserParams' is not null or undefined
      assertParamExists("attachTeamToUser", "teamUserParams", teamUserParams);
      const localVarPath = `/teams/{team_id}/users`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamUserParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new team
     * @param {Team} team The team data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTeam: async (
      team: Team,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'team' is not null or undefined
      assertParamExists("createTeam", "team", team);
      const localVarPath = `/teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        team,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a specific team
     * @param {string} teamId A team identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeam: async (
      teamId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("deleteTeam", "teamId", teamId);
      const localVarPath = `/teams/{team_id}`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a mod from team
     * @param {string} teamId A team identifier or slug
     * @param {TeamModParams} teamModParams The team mod data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromMod: async (
      teamId: string,
      teamModParams: TeamModParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("deleteTeamFromMod", "teamId", teamId);
      // verify required parameter 'teamModParams' is not null or undefined
      assertParamExists("deleteTeamFromMod", "teamModParams", teamModParams);
      const localVarPath = `/teams/{team_id}/mods`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamModParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a pack from team
     * @param {string} teamId A team identifier or slug
     * @param {TeamPackParams} teamPackParams The team pack data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromPack: async (
      teamId: string,
      teamPackParams: TeamPackParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("deleteTeamFromPack", "teamId", teamId);
      // verify required parameter 'teamPackParams' is not null or undefined
      assertParamExists("deleteTeamFromPack", "teamPackParams", teamPackParams);
      const localVarPath = `/teams/{team_id}/packs`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamPackParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a user from team
     * @param {string} teamId A team identifier or slug
     * @param {TeamUserParams} teamUserParams The team user data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromUser: async (
      teamId: string,
      teamUserParams: TeamUserParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("deleteTeamFromUser", "teamId", teamId);
      // verify required parameter 'teamUserParams' is not null or undefined
      assertParamExists("deleteTeamFromUser", "teamUserParams", teamUserParams);
      const localVarPath = `/teams/{team_id}/users`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamUserParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all mods attached to team
     * @param {string} teamId A team identifier or slug
     * @param {string} [search] Search query
     * @param {ListTeamModsSortEnum} [sort] Sorting column
     * @param {ListTeamModsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamMods: async (
      teamId: string,
      search?: string,
      sort?: ListTeamModsSortEnum,
      order?: ListTeamModsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("listTeamMods", "teamId", teamId);
      const localVarPath = `/teams/{team_id}/mods`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all packs attached to team
     * @param {string} teamId A team identifier or slug
     * @param {string} [search] Search query
     * @param {ListTeamPacksSortEnum} [sort] Sorting column
     * @param {ListTeamPacksOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamPacks: async (
      teamId: string,
      search?: string,
      sort?: ListTeamPacksSortEnum,
      order?: ListTeamPacksOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("listTeamPacks", "teamId", teamId);
      const localVarPath = `/teams/{team_id}/packs`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all users attached to team
     * @param {string} teamId A team identifier or slug
     * @param {string} [search] Search query
     * @param {ListTeamUsersSortEnum} [sort] Sorting column
     * @param {ListTeamUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamUsers: async (
      teamId: string,
      search?: string,
      sort?: ListTeamUsersSortEnum,
      order?: ListTeamUsersOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("listTeamUsers", "teamId", teamId);
      const localVarPath = `/teams/{team_id}/users`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all available teams
     * @param {string} [search] Search query
     * @param {ListTeamsSortEnum} [sort] Sorting column
     * @param {ListTeamsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeams: async (
      search?: string,
      sort?: ListTeamsSortEnum,
      order?: ListTeamsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update mod perms for team
     * @param {string} teamId A team identifier or slug
     * @param {TeamModParams} teamModParams The team mod data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamMod: async (
      teamId: string,
      teamModParams: TeamModParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("permitTeamMod", "teamId", teamId);
      // verify required parameter 'teamModParams' is not null or undefined
      assertParamExists("permitTeamMod", "teamModParams", teamModParams);
      const localVarPath = `/teams/{team_id}/mods`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamModParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update pack perms for team
     * @param {string} teamId A team identifier or slug
     * @param {TeamPackParams} teamPackParams The team pack data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamPack: async (
      teamId: string,
      teamPackParams: TeamPackParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("permitTeamPack", "teamId", teamId);
      // verify required parameter 'teamPackParams' is not null or undefined
      assertParamExists("permitTeamPack", "teamPackParams", teamPackParams);
      const localVarPath = `/teams/{team_id}/packs`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamPackParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update user perms for team
     * @param {string} teamId A team identifier or slug
     * @param {TeamUserParams} teamUserParams The team user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamUser: async (
      teamId: string,
      teamUserParams: TeamUserParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("permitTeamUser", "teamId", teamId);
      // verify required parameter 'teamUserParams' is not null or undefined
      assertParamExists("permitTeamUser", "teamUserParams", teamUserParams);
      const localVarPath = `/teams/{team_id}/users`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamUserParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch a specific team
     * @param {string} teamId A team identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showTeam: async (
      teamId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("showTeam", "teamId", teamId);
      const localVarPath = `/teams/{team_id}`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a specific team
     * @param {string} teamId A team identifier or slug
     * @param {Team} team The team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTeam: async (
      teamId: string,
      team: Team,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("updateTeam", "teamId", teamId);
      // verify required parameter 'team' is not null or undefined
      assertParamExists("updateTeam", "team", team);
      const localVarPath = `/teams/{team_id}`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        team,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Attach a mod to team
     * @param {string} teamId A team identifier or slug
     * @param {TeamModParams} teamModParams The team mod data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachTeamToMod(
      teamId: string,
      teamModParams: TeamModParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachTeamToMod(
        teamId,
        teamModParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.attachTeamToMod"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Attach a pack to team
     * @param {string} teamId A team identifier or slug
     * @param {TeamPackParams} teamPackParams The team pack data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachTeamToPack(
      teamId: string,
      teamPackParams: TeamPackParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachTeamToPack(
          teamId,
          teamPackParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.attachTeamToPack"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Attach a user to team
     * @param {string} teamId A team identifier or slug
     * @param {TeamUserParams} teamUserParams The team user data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachTeamToUser(
      teamId: string,
      teamUserParams: TeamUserParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachTeamToUser(
          teamId,
          teamUserParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.attachTeamToUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new team
     * @param {Team} team The team data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTeam(
      team: Team,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createTeam(
        team,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.createTeam"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a specific team
     * @param {string} teamId A team identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTeam(
      teamId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeam(
        teamId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.deleteTeam"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a mod from team
     * @param {string} teamId A team identifier or slug
     * @param {TeamModParams} teamModParams The team mod data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTeamFromMod(
      teamId: string,
      teamModParams: TeamModParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTeamFromMod(
          teamId,
          teamModParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.deleteTeamFromMod"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a pack from team
     * @param {string} teamId A team identifier or slug
     * @param {TeamPackParams} teamPackParams The team pack data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTeamFromPack(
      teamId: string,
      teamPackParams: TeamPackParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTeamFromPack(
          teamId,
          teamPackParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.deleteTeamFromPack"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a user from team
     * @param {string} teamId A team identifier or slug
     * @param {TeamUserParams} teamUserParams The team user data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTeamFromUser(
      teamId: string,
      teamUserParams: TeamUserParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTeamFromUser(
          teamId,
          teamUserParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.deleteTeamFromUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all mods attached to team
     * @param {string} teamId A team identifier or slug
     * @param {string} [search] Search query
     * @param {ListTeamModsSortEnum} [sort] Sorting column
     * @param {ListTeamModsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTeamMods(
      teamId: string,
      search?: string,
      sort?: ListTeamModsSortEnum,
      order?: ListTeamModsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamMods>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamMods(
        teamId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.listTeamMods"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all packs attached to team
     * @param {string} teamId A team identifier or slug
     * @param {string} [search] Search query
     * @param {ListTeamPacksSortEnum} [sort] Sorting column
     * @param {ListTeamPacksOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTeamPacks(
      teamId: string,
      search?: string,
      sort?: ListTeamPacksSortEnum,
      order?: ListTeamPacksOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamPacks>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamPacks(
        teamId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.listTeamPacks"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all users attached to team
     * @param {string} teamId A team identifier or slug
     * @param {string} [search] Search query
     * @param {ListTeamUsersSortEnum} [sort] Sorting column
     * @param {ListTeamUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTeamUsers(
      teamId: string,
      search?: string,
      sort?: ListTeamUsersSortEnum,
      order?: ListTeamUsersOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamUsers>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamUsers(
        teamId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.listTeamUsers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all available teams
     * @param {string} [search] Search query
     * @param {ListTeamsSortEnum} [sort] Sorting column
     * @param {ListTeamsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTeams(
      search?: string,
      sort?: ListTeamsSortEnum,
      order?: ListTeamsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teams>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTeams(
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.listTeams"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update mod perms for team
     * @param {string} teamId A team identifier or slug
     * @param {TeamModParams} teamModParams The team mod data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitTeamMod(
      teamId: string,
      teamModParams: TeamModParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitTeamMod(
        teamId,
        teamModParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.permitTeamMod"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update pack perms for team
     * @param {string} teamId A team identifier or slug
     * @param {TeamPackParams} teamPackParams The team pack data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitTeamPack(
      teamId: string,
      teamPackParams: TeamPackParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitTeamPack(
        teamId,
        teamPackParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.permitTeamPack"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update user perms for team
     * @param {string} teamId A team identifier or slug
     * @param {TeamUserParams} teamUserParams The team user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitTeamUser(
      teamId: string,
      teamUserParams: TeamUserParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitTeamUser(
        teamId,
        teamUserParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.permitTeamUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch a specific team
     * @param {string} teamId A team identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showTeam(
      teamId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showTeam(
        teamId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.showTeam"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a specific team
     * @param {string} teamId A team identifier or slug
     * @param {Team} team The team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateTeam(
      teamId: string,
      team: Team,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeam(
        teamId,
        team,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.updateTeam"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TeamApiFp(configuration);
  return {
    /**
     *
     * @summary Attach a mod to team
     * @param {TeamApiAttachTeamToModRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachTeamToMod(
      requestParameters: TeamApiAttachTeamToModRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachTeamToMod(
          requestParameters.teamId,
          requestParameters.teamModParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Attach a pack to team
     * @param {TeamApiAttachTeamToPackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachTeamToPack(
      requestParameters: TeamApiAttachTeamToPackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachTeamToPack(
          requestParameters.teamId,
          requestParameters.teamPackParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Attach a user to team
     * @param {TeamApiAttachTeamToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachTeamToUser(
      requestParameters: TeamApiAttachTeamToUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachTeamToUser(
          requestParameters.teamId,
          requestParameters.teamUserParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new team
     * @param {TeamApiCreateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTeam(
      requestParameters: TeamApiCreateTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Team> {
      return localVarFp
        .createTeam(requestParameters.team, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a specific team
     * @param {TeamApiDeleteTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeam(
      requestParameters: TeamApiDeleteTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteTeam(requestParameters.teamId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a mod from team
     * @param {TeamApiDeleteTeamFromModRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromMod(
      requestParameters: TeamApiDeleteTeamFromModRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteTeamFromMod(
          requestParameters.teamId,
          requestParameters.teamModParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a pack from team
     * @param {TeamApiDeleteTeamFromPackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromPack(
      requestParameters: TeamApiDeleteTeamFromPackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteTeamFromPack(
          requestParameters.teamId,
          requestParameters.teamPackParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a user from team
     * @param {TeamApiDeleteTeamFromUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromUser(
      requestParameters: TeamApiDeleteTeamFromUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteTeamFromUser(
          requestParameters.teamId,
          requestParameters.teamUserParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all mods attached to team
     * @param {TeamApiListTeamModsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamMods(
      requestParameters: TeamApiListTeamModsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TeamMods> {
      return localVarFp
        .listTeamMods(
          requestParameters.teamId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all packs attached to team
     * @param {TeamApiListTeamPacksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamPacks(
      requestParameters: TeamApiListTeamPacksRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TeamPacks> {
      return localVarFp
        .listTeamPacks(
          requestParameters.teamId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all users attached to team
     * @param {TeamApiListTeamUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamUsers(
      requestParameters: TeamApiListTeamUsersRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TeamUsers> {
      return localVarFp
        .listTeamUsers(
          requestParameters.teamId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all available teams
     * @param {TeamApiListTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeams(
      requestParameters: TeamApiListTeamsRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Teams> {
      return localVarFp
        .listTeams(
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update mod perms for team
     * @param {TeamApiPermitTeamModRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamMod(
      requestParameters: TeamApiPermitTeamModRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitTeamMod(
          requestParameters.teamId,
          requestParameters.teamModParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update pack perms for team
     * @param {TeamApiPermitTeamPackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamPack(
      requestParameters: TeamApiPermitTeamPackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitTeamPack(
          requestParameters.teamId,
          requestParameters.teamPackParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update user perms for team
     * @param {TeamApiPermitTeamUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamUser(
      requestParameters: TeamApiPermitTeamUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitTeamUser(
          requestParameters.teamId,
          requestParameters.teamUserParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch a specific team
     * @param {TeamApiShowTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showTeam(
      requestParameters: TeamApiShowTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Team> {
      return localVarFp
        .showTeam(requestParameters.teamId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a specific team
     * @param {TeamApiUpdateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTeam(
      requestParameters: TeamApiUpdateTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Team> {
      return localVarFp
        .updateTeam(requestParameters.teamId, requestParameters.team, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for attachTeamToMod operation in TeamApi.
 * @export
 * @interface TeamApiAttachTeamToModRequest
 */
export interface TeamApiAttachTeamToModRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiAttachTeamToMod
   */
  readonly teamId: string;

  /**
   * The team mod data to attach
   * @type {TeamModParams}
   * @memberof TeamApiAttachTeamToMod
   */
  readonly teamModParams: TeamModParams;
}

/**
 * Request parameters for attachTeamToPack operation in TeamApi.
 * @export
 * @interface TeamApiAttachTeamToPackRequest
 */
export interface TeamApiAttachTeamToPackRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiAttachTeamToPack
   */
  readonly teamId: string;

  /**
   * The team pack data to attach
   * @type {TeamPackParams}
   * @memberof TeamApiAttachTeamToPack
   */
  readonly teamPackParams: TeamPackParams;
}

/**
 * Request parameters for attachTeamToUser operation in TeamApi.
 * @export
 * @interface TeamApiAttachTeamToUserRequest
 */
export interface TeamApiAttachTeamToUserRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiAttachTeamToUser
   */
  readonly teamId: string;

  /**
   * The team user data to attach
   * @type {TeamUserParams}
   * @memberof TeamApiAttachTeamToUser
   */
  readonly teamUserParams: TeamUserParams;
}

/**
 * Request parameters for createTeam operation in TeamApi.
 * @export
 * @interface TeamApiCreateTeamRequest
 */
export interface TeamApiCreateTeamRequest {
  /**
   * The team data to create
   * @type {Team}
   * @memberof TeamApiCreateTeam
   */
  readonly team: Team;
}

/**
 * Request parameters for deleteTeam operation in TeamApi.
 * @export
 * @interface TeamApiDeleteTeamRequest
 */
export interface TeamApiDeleteTeamRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiDeleteTeam
   */
  readonly teamId: string;
}

/**
 * Request parameters for deleteTeamFromMod operation in TeamApi.
 * @export
 * @interface TeamApiDeleteTeamFromModRequest
 */
export interface TeamApiDeleteTeamFromModRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiDeleteTeamFromMod
   */
  readonly teamId: string;

  /**
   * The team mod data to unlink
   * @type {TeamModParams}
   * @memberof TeamApiDeleteTeamFromMod
   */
  readonly teamModParams: TeamModParams;
}

/**
 * Request parameters for deleteTeamFromPack operation in TeamApi.
 * @export
 * @interface TeamApiDeleteTeamFromPackRequest
 */
export interface TeamApiDeleteTeamFromPackRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiDeleteTeamFromPack
   */
  readonly teamId: string;

  /**
   * The team pack data to unlink
   * @type {TeamPackParams}
   * @memberof TeamApiDeleteTeamFromPack
   */
  readonly teamPackParams: TeamPackParams;
}

/**
 * Request parameters for deleteTeamFromUser operation in TeamApi.
 * @export
 * @interface TeamApiDeleteTeamFromUserRequest
 */
export interface TeamApiDeleteTeamFromUserRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiDeleteTeamFromUser
   */
  readonly teamId: string;

  /**
   * The team user data to unlink
   * @type {TeamUserParams}
   * @memberof TeamApiDeleteTeamFromUser
   */
  readonly teamUserParams: TeamUserParams;
}

/**
 * Request parameters for listTeamMods operation in TeamApi.
 * @export
 * @interface TeamApiListTeamModsRequest
 */
export interface TeamApiListTeamModsRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiListTeamMods
   */
  readonly teamId: string;

  /**
   * Search query
   * @type {string}
   * @memberof TeamApiListTeamMods
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'modname' | 'email' | 'fullname' | 'admin' | 'active'}
   * @memberof TeamApiListTeamMods
   */
  readonly sort?: ListTeamModsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof TeamApiListTeamMods
   */
  readonly order?: ListTeamModsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof TeamApiListTeamMods
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof TeamApiListTeamMods
   */
  readonly offset?: number;
}

/**
 * Request parameters for listTeamPacks operation in TeamApi.
 * @export
 * @interface TeamApiListTeamPacksRequest
 */
export interface TeamApiListTeamPacksRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiListTeamPacks
   */
  readonly teamId: string;

  /**
   * Search query
   * @type {string}
   * @memberof TeamApiListTeamPacks
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'packname' | 'email' | 'fullname' | 'admin' | 'active'}
   * @memberof TeamApiListTeamPacks
   */
  readonly sort?: ListTeamPacksSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof TeamApiListTeamPacks
   */
  readonly order?: ListTeamPacksOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof TeamApiListTeamPacks
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof TeamApiListTeamPacks
   */
  readonly offset?: number;
}

/**
 * Request parameters for listTeamUsers operation in TeamApi.
 * @export
 * @interface TeamApiListTeamUsersRequest
 */
export interface TeamApiListTeamUsersRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiListTeamUsers
   */
  readonly teamId: string;

  /**
   * Search query
   * @type {string}
   * @memberof TeamApiListTeamUsers
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'username' | 'email' | 'fullname' | 'admin' | 'active'}
   * @memberof TeamApiListTeamUsers
   */
  readonly sort?: ListTeamUsersSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof TeamApiListTeamUsers
   */
  readonly order?: ListTeamUsersOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof TeamApiListTeamUsers
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof TeamApiListTeamUsers
   */
  readonly offset?: number;
}

/**
 * Request parameters for listTeams operation in TeamApi.
 * @export
 * @interface TeamApiListTeamsRequest
 */
export interface TeamApiListTeamsRequest {
  /**
   * Search query
   * @type {string}
   * @memberof TeamApiListTeams
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'slug' | 'name'}
   * @memberof TeamApiListTeams
   */
  readonly sort?: ListTeamsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof TeamApiListTeams
   */
  readonly order?: ListTeamsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof TeamApiListTeams
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof TeamApiListTeams
   */
  readonly offset?: number;
}

/**
 * Request parameters for permitTeamMod operation in TeamApi.
 * @export
 * @interface TeamApiPermitTeamModRequest
 */
export interface TeamApiPermitTeamModRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiPermitTeamMod
   */
  readonly teamId: string;

  /**
   * The team mod data to update
   * @type {TeamModParams}
   * @memberof TeamApiPermitTeamMod
   */
  readonly teamModParams: TeamModParams;
}

/**
 * Request parameters for permitTeamPack operation in TeamApi.
 * @export
 * @interface TeamApiPermitTeamPackRequest
 */
export interface TeamApiPermitTeamPackRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiPermitTeamPack
   */
  readonly teamId: string;

  /**
   * The team pack data to update
   * @type {TeamPackParams}
   * @memberof TeamApiPermitTeamPack
   */
  readonly teamPackParams: TeamPackParams;
}

/**
 * Request parameters for permitTeamUser operation in TeamApi.
 * @export
 * @interface TeamApiPermitTeamUserRequest
 */
export interface TeamApiPermitTeamUserRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiPermitTeamUser
   */
  readonly teamId: string;

  /**
   * The team user data to update
   * @type {TeamUserParams}
   * @memberof TeamApiPermitTeamUser
   */
  readonly teamUserParams: TeamUserParams;
}

/**
 * Request parameters for showTeam operation in TeamApi.
 * @export
 * @interface TeamApiShowTeamRequest
 */
export interface TeamApiShowTeamRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiShowTeam
   */
  readonly teamId: string;
}

/**
 * Request parameters for updateTeam operation in TeamApi.
 * @export
 * @interface TeamApiUpdateTeamRequest
 */
export interface TeamApiUpdateTeamRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiUpdateTeam
   */
  readonly teamId: string;

  /**
   * The team data to update
   * @type {Team}
   * @memberof TeamApiUpdateTeam
   */
  readonly team: Team;
}

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
  /**
   *
   * @summary Attach a mod to team
   * @param {TeamApiAttachTeamToModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public attachTeamToMod(
    requestParameters: TeamApiAttachTeamToModRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .attachTeamToMod(
        requestParameters.teamId,
        requestParameters.teamModParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Attach a pack to team
   * @param {TeamApiAttachTeamToPackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public attachTeamToPack(
    requestParameters: TeamApiAttachTeamToPackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .attachTeamToPack(
        requestParameters.teamId,
        requestParameters.teamPackParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Attach a user to team
   * @param {TeamApiAttachTeamToUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public attachTeamToUser(
    requestParameters: TeamApiAttachTeamToUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .attachTeamToUser(
        requestParameters.teamId,
        requestParameters.teamUserParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new team
   * @param {TeamApiCreateTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public createTeam(
    requestParameters: TeamApiCreateTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .createTeam(requestParameters.team, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a specific team
   * @param {TeamApiDeleteTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public deleteTeam(
    requestParameters: TeamApiDeleteTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .deleteTeam(requestParameters.teamId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a mod from team
   * @param {TeamApiDeleteTeamFromModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public deleteTeamFromMod(
    requestParameters: TeamApiDeleteTeamFromModRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .deleteTeamFromMod(
        requestParameters.teamId,
        requestParameters.teamModParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a pack from team
   * @param {TeamApiDeleteTeamFromPackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public deleteTeamFromPack(
    requestParameters: TeamApiDeleteTeamFromPackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .deleteTeamFromPack(
        requestParameters.teamId,
        requestParameters.teamPackParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a user from team
   * @param {TeamApiDeleteTeamFromUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public deleteTeamFromUser(
    requestParameters: TeamApiDeleteTeamFromUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .deleteTeamFromUser(
        requestParameters.teamId,
        requestParameters.teamUserParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all mods attached to team
   * @param {TeamApiListTeamModsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public listTeamMods(
    requestParameters: TeamApiListTeamModsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .listTeamMods(
        requestParameters.teamId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all packs attached to team
   * @param {TeamApiListTeamPacksRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public listTeamPacks(
    requestParameters: TeamApiListTeamPacksRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .listTeamPacks(
        requestParameters.teamId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all users attached to team
   * @param {TeamApiListTeamUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public listTeamUsers(
    requestParameters: TeamApiListTeamUsersRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .listTeamUsers(
        requestParameters.teamId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all available teams
   * @param {TeamApiListTeamsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public listTeams(
    requestParameters: TeamApiListTeamsRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .listTeams(
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update mod perms for team
   * @param {TeamApiPermitTeamModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public permitTeamMod(
    requestParameters: TeamApiPermitTeamModRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .permitTeamMod(
        requestParameters.teamId,
        requestParameters.teamModParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update pack perms for team
   * @param {TeamApiPermitTeamPackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public permitTeamPack(
    requestParameters: TeamApiPermitTeamPackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .permitTeamPack(
        requestParameters.teamId,
        requestParameters.teamPackParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update user perms for team
   * @param {TeamApiPermitTeamUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public permitTeamUser(
    requestParameters: TeamApiPermitTeamUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .permitTeamUser(
        requestParameters.teamId,
        requestParameters.teamUserParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch a specific team
   * @param {TeamApiShowTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public showTeam(
    requestParameters: TeamApiShowTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .showTeam(requestParameters.teamId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a specific team
   * @param {TeamApiUpdateTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public updateTeam(
    requestParameters: TeamApiUpdateTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .updateTeam(requestParameters.teamId, requestParameters.team, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ListTeamModsSortEnum = {
  Modname: "modname",
  Email: "email",
  Fullname: "fullname",
  Admin: "admin",
  Active: "active",
} as const;
export type ListTeamModsSortEnum =
  (typeof ListTeamModsSortEnum)[keyof typeof ListTeamModsSortEnum];
/**
 * @export
 */
export const ListTeamModsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListTeamModsOrderEnum =
  (typeof ListTeamModsOrderEnum)[keyof typeof ListTeamModsOrderEnum];
/**
 * @export
 */
export const ListTeamPacksSortEnum = {
  Packname: "packname",
  Email: "email",
  Fullname: "fullname",
  Admin: "admin",
  Active: "active",
} as const;
export type ListTeamPacksSortEnum =
  (typeof ListTeamPacksSortEnum)[keyof typeof ListTeamPacksSortEnum];
/**
 * @export
 */
export const ListTeamPacksOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListTeamPacksOrderEnum =
  (typeof ListTeamPacksOrderEnum)[keyof typeof ListTeamPacksOrderEnum];
/**
 * @export
 */
export const ListTeamUsersSortEnum = {
  Username: "username",
  Email: "email",
  Fullname: "fullname",
  Admin: "admin",
  Active: "active",
} as const;
export type ListTeamUsersSortEnum =
  (typeof ListTeamUsersSortEnum)[keyof typeof ListTeamUsersSortEnum];
/**
 * @export
 */
export const ListTeamUsersOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListTeamUsersOrderEnum =
  (typeof ListTeamUsersOrderEnum)[keyof typeof ListTeamUsersOrderEnum];
/**
 * @export
 */
export const ListTeamsSortEnum = {
  Slug: "slug",
  Name: "name",
} as const;
export type ListTeamsSortEnum =
  (typeof ListTeamsSortEnum)[keyof typeof ListTeamsSortEnum];
/**
 * @export
 */
export const ListTeamsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListTeamsOrderEnum =
  (typeof ListTeamsOrderEnum)[keyof typeof ListTeamsOrderEnum];
