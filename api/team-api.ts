/* tslint:disable */
/* eslint-disable */
/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { GeneralError } from "../model";
// @ts-ignore
import { Team } from "../model";
// @ts-ignore
import { TeamMod } from "../model";
// @ts-ignore
import { TeamModParams } from "../model";
// @ts-ignore
import { TeamPack } from "../model";
// @ts-ignore
import { TeamPackParams } from "../model";
// @ts-ignore
import { TeamUser } from "../model";
// @ts-ignore
import { TeamUserParams } from "../model";
// @ts-ignore
import { ValidationError } from "../model";
/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Assign a mod to team
     * @param {string} teamId A team UUID or slug
     * @param {TeamModParams} teamMod The team mod data to assign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appendTeamToMod: async (
      teamId: string,
      teamMod: TeamModParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("appendTeamToMod", "teamId", teamId);
      // verify required parameter 'teamMod' is not null or undefined
      assertParamExists("appendTeamToMod", "teamMod", teamMod);
      const localVarPath = `/teams/{team_id}/mods`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamMod,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Assign a pack to team
     * @param {string} teamId A team UUID or slug
     * @param {TeamPackParams} teamPack The team pack data to assign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appendTeamToPack: async (
      teamId: string,
      teamPack: TeamPackParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("appendTeamToPack", "teamId", teamId);
      // verify required parameter 'teamPack' is not null or undefined
      assertParamExists("appendTeamToPack", "teamPack", teamPack);
      const localVarPath = `/teams/{team_id}/packs`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamPack,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Assign a user to team
     * @param {string} teamId A team UUID or slug
     * @param {TeamUserParams} teamUser The team user data to assign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appendTeamToUser: async (
      teamId: string,
      teamUser: TeamUserParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("appendTeamToUser", "teamId", teamId);
      // verify required parameter 'teamUser' is not null or undefined
      assertParamExists("appendTeamToUser", "teamUser", teamUser);
      const localVarPath = `/teams/{team_id}/users`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamUser,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new team
     * @param {Team} team The team data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTeam: async (
      team: Team,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'team' is not null or undefined
      assertParamExists("createTeam", "team", team);
      const localVarPath = `/teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        team,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a specific team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeam: async (
      teamId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("deleteTeam", "teamId", teamId);
      const localVarPath = `/teams/{team_id}`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a mod from team
     * @param {string} teamId A team UUID or slug
     * @param {TeamModParams} teamMod The team mod data to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromMod: async (
      teamId: string,
      teamMod: TeamModParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("deleteTeamFromMod", "teamId", teamId);
      // verify required parameter 'teamMod' is not null or undefined
      assertParamExists("deleteTeamFromMod", "teamMod", teamMod);
      const localVarPath = `/teams/{team_id}/mods`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamMod,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a pack from team
     * @param {string} teamId A team UUID or slug
     * @param {TeamPackParams} teamPack The team pack data to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromPack: async (
      teamId: string,
      teamPack: TeamPackParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("deleteTeamFromPack", "teamId", teamId);
      // verify required parameter 'teamPack' is not null or undefined
      assertParamExists("deleteTeamFromPack", "teamPack", teamPack);
      const localVarPath = `/teams/{team_id}/packs`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamPack,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a user from team
     * @param {string} teamId A team UUID or slug
     * @param {TeamUserParams} teamUser The team user data to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromUser: async (
      teamId: string,
      teamUser: TeamUserParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("deleteTeamFromUser", "teamId", teamId);
      // verify required parameter 'teamUser' is not null or undefined
      assertParamExists("deleteTeamFromUser", "teamUser", teamUser);
      const localVarPath = `/teams/{team_id}/users`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamUser,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all mods assigned to team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamMods: async (
      teamId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("listTeamMods", "teamId", teamId);
      const localVarPath = `/teams/{team_id}/mods`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all packs assigned to team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamPacks: async (
      teamId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("listTeamPacks", "teamId", teamId);
      const localVarPath = `/teams/{team_id}/packs`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all users assigned to team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamUsers: async (
      teamId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("listTeamUsers", "teamId", teamId);
      const localVarPath = `/teams/{team_id}/users`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all available teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeams: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update mod perms for team
     * @param {string} teamId A team UUID or slug
     * @param {TeamModParams} teamMod The team mod data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamMod: async (
      teamId: string,
      teamMod: TeamModParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("permitTeamMod", "teamId", teamId);
      // verify required parameter 'teamMod' is not null or undefined
      assertParamExists("permitTeamMod", "teamMod", teamMod);
      const localVarPath = `/teams/{team_id}/mods`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamMod,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update pack perms for team
     * @param {string} teamId A team UUID or slug
     * @param {TeamPackParams} teamPack The team pack data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamPack: async (
      teamId: string,
      teamPack: TeamPackParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("permitTeamPack", "teamId", teamId);
      // verify required parameter 'teamPack' is not null or undefined
      assertParamExists("permitTeamPack", "teamPack", teamPack);
      const localVarPath = `/teams/{team_id}/packs`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamPack,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update user perms for team
     * @param {string} teamId A team UUID or slug
     * @param {TeamUserParams} teamUser The team user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamUser: async (
      teamId: string,
      teamUser: TeamUserParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("permitTeamUser", "teamId", teamId);
      // verify required parameter 'teamUser' is not null or undefined
      assertParamExists("permitTeamUser", "teamUser", teamUser);
      const localVarPath = `/teams/{team_id}/users`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamUser,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch a specific team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showTeam: async (
      teamId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("showTeam", "teamId", teamId);
      const localVarPath = `/teams/{team_id}`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a specific team
     * @param {string} teamId A team UUID or slug
     * @param {Team} team The team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTeam: async (
      teamId: string,
      team: Team,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("updateTeam", "teamId", teamId);
      // verify required parameter 'team' is not null or undefined
      assertParamExists("updateTeam", "team", team);
      const localVarPath = `/teams/{team_id}`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        team,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Assign a mod to team
     * @param {string} teamId A team UUID or slug
     * @param {TeamModParams} teamMod The team mod data to assign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appendTeamToMod(
      teamId: string,
      teamMod: TeamModParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.appendTeamToMod(
        teamId,
        teamMod,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Assign a pack to team
     * @param {string} teamId A team UUID or slug
     * @param {TeamPackParams} teamPack The team pack data to assign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appendTeamToPack(
      teamId: string,
      teamPack: TeamPackParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.appendTeamToPack(
          teamId,
          teamPack,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Assign a user to team
     * @param {string} teamId A team UUID or slug
     * @param {TeamUserParams} teamUser The team user data to assign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appendTeamToUser(
      teamId: string,
      teamUser: TeamUserParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.appendTeamToUser(
          teamId,
          teamUser,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a new team
     * @param {Team} team The team data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTeam(
      team: Team,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createTeam(
        team,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete a specific team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTeam(
      teamId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeam(
        teamId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove a mod from team
     * @param {string} teamId A team UUID or slug
     * @param {TeamModParams} teamMod The team mod data to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTeamFromMod(
      teamId: string,
      teamMod: TeamModParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTeamFromMod(
          teamId,
          teamMod,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove a pack from team
     * @param {string} teamId A team UUID or slug
     * @param {TeamPackParams} teamPack The team pack data to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTeamFromPack(
      teamId: string,
      teamPack: TeamPackParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTeamFromPack(
          teamId,
          teamPack,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove a user from team
     * @param {string} teamId A team UUID or slug
     * @param {TeamUserParams} teamUser The team user data to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTeamFromUser(
      teamId: string,
      teamUser: TeamUserParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTeamFromUser(
          teamId,
          teamUser,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Fetch all mods assigned to team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTeamMods(
      teamId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamMod>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamMods(
        teamId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Fetch all packs assigned to team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTeamPacks(
      teamId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<TeamPack>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamPacks(
        teamId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Fetch all users assigned to team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTeamUsers(
      teamId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<TeamUser>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamUsers(
        teamId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Fetch all available teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTeams(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Team>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTeams(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update mod perms for team
     * @param {string} teamId A team UUID or slug
     * @param {TeamModParams} teamMod The team mod data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitTeamMod(
      teamId: string,
      teamMod: TeamModParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitTeamMod(
        teamId,
        teamMod,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update pack perms for team
     * @param {string} teamId A team UUID or slug
     * @param {TeamPackParams} teamPack The team pack data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitTeamPack(
      teamId: string,
      teamPack: TeamPackParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitTeamPack(
        teamId,
        teamPack,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update user perms for team
     * @param {string} teamId A team UUID or slug
     * @param {TeamUserParams} teamUser The team user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitTeamUser(
      teamId: string,
      teamUser: TeamUserParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitTeamUser(
        teamId,
        teamUser,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Fetch a specific team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showTeam(
      teamId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showTeam(
        teamId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a specific team
     * @param {string} teamId A team UUID or slug
     * @param {Team} team The team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateTeam(
      teamId: string,
      team: Team,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeam(
        teamId,
        team,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = TeamApiFp(configuration);
  return {
    /**
     *
     * @summary Assign a mod to team
     * @param {string} teamId A team UUID or slug
     * @param {TeamModParams} teamMod The team mod data to assign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appendTeamToMod(
      teamId: string,
      teamMod: TeamModParams,
      options?: any
    ): AxiosPromise<GeneralError> {
      return localVarFp
        .appendTeamToMod(teamId, teamMod, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Assign a pack to team
     * @param {string} teamId A team UUID or slug
     * @param {TeamPackParams} teamPack The team pack data to assign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appendTeamToPack(
      teamId: string,
      teamPack: TeamPackParams,
      options?: any
    ): AxiosPromise<GeneralError> {
      return localVarFp
        .appendTeamToPack(teamId, teamPack, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Assign a user to team
     * @param {string} teamId A team UUID or slug
     * @param {TeamUserParams} teamUser The team user data to assign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appendTeamToUser(
      teamId: string,
      teamUser: TeamUserParams,
      options?: any
    ): AxiosPromise<GeneralError> {
      return localVarFp
        .appendTeamToUser(teamId, teamUser, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new team
     * @param {Team} team The team data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTeam(team: Team, options?: any): AxiosPromise<Team> {
      return localVarFp
        .createTeam(team, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a specific team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeam(teamId: string, options?: any): AxiosPromise<GeneralError> {
      return localVarFp
        .deleteTeam(teamId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a mod from team
     * @param {string} teamId A team UUID or slug
     * @param {TeamModParams} teamMod The team mod data to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromMod(
      teamId: string,
      teamMod: TeamModParams,
      options?: any
    ): AxiosPromise<GeneralError> {
      return localVarFp
        .deleteTeamFromMod(teamId, teamMod, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a pack from team
     * @param {string} teamId A team UUID or slug
     * @param {TeamPackParams} teamPack The team pack data to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromPack(
      teamId: string,
      teamPack: TeamPackParams,
      options?: any
    ): AxiosPromise<GeneralError> {
      return localVarFp
        .deleteTeamFromPack(teamId, teamPack, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a user from team
     * @param {string} teamId A team UUID or slug
     * @param {TeamUserParams} teamUser The team user data to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromUser(
      teamId: string,
      teamUser: TeamUserParams,
      options?: any
    ): AxiosPromise<GeneralError> {
      return localVarFp
        .deleteTeamFromUser(teamId, teamUser, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all mods assigned to team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamMods(teamId: string, options?: any): AxiosPromise<Array<TeamMod>> {
      return localVarFp
        .listTeamMods(teamId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all packs assigned to team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamPacks(
      teamId: string,
      options?: any
    ): AxiosPromise<Array<TeamPack>> {
      return localVarFp
        .listTeamPacks(teamId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all users assigned to team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamUsers(
      teamId: string,
      options?: any
    ): AxiosPromise<Array<TeamUser>> {
      return localVarFp
        .listTeamUsers(teamId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all available teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeams(options?: any): AxiosPromise<Array<Team>> {
      return localVarFp
        .listTeams(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update mod perms for team
     * @param {string} teamId A team UUID or slug
     * @param {TeamModParams} teamMod The team mod data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamMod(
      teamId: string,
      teamMod: TeamModParams,
      options?: any
    ): AxiosPromise<GeneralError> {
      return localVarFp
        .permitTeamMod(teamId, teamMod, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update pack perms for team
     * @param {string} teamId A team UUID or slug
     * @param {TeamPackParams} teamPack The team pack data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamPack(
      teamId: string,
      teamPack: TeamPackParams,
      options?: any
    ): AxiosPromise<GeneralError> {
      return localVarFp
        .permitTeamPack(teamId, teamPack, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update user perms for team
     * @param {string} teamId A team UUID or slug
     * @param {TeamUserParams} teamUser The team user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamUser(
      teamId: string,
      teamUser: TeamUserParams,
      options?: any
    ): AxiosPromise<GeneralError> {
      return localVarFp
        .permitTeamUser(teamId, teamUser, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch a specific team
     * @param {string} teamId A team UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showTeam(teamId: string, options?: any): AxiosPromise<Team> {
      return localVarFp
        .showTeam(teamId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a specific team
     * @param {string} teamId A team UUID or slug
     * @param {Team} team The team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTeam(teamId: string, team: Team, options?: any): AxiosPromise<Team> {
      return localVarFp
        .updateTeam(teamId, team, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for appendTeamToMod operation in TeamApi.
 * @export
 * @interface TeamApiAppendTeamToModRequest
 */
export interface TeamApiAppendTeamToModRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiAppendTeamToMod
   */
  readonly teamId: string;

  /**
   * The team mod data to assign
   * @type {TeamModParams}
   * @memberof TeamApiAppendTeamToMod
   */
  readonly teamMod: TeamModParams;
}

/**
 * Request parameters for appendTeamToPack operation in TeamApi.
 * @export
 * @interface TeamApiAppendTeamToPackRequest
 */
export interface TeamApiAppendTeamToPackRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiAppendTeamToPack
   */
  readonly teamId: string;

  /**
   * The team pack data to assign
   * @type {TeamPackParams}
   * @memberof TeamApiAppendTeamToPack
   */
  readonly teamPack: TeamPackParams;
}

/**
 * Request parameters for appendTeamToUser operation in TeamApi.
 * @export
 * @interface TeamApiAppendTeamToUserRequest
 */
export interface TeamApiAppendTeamToUserRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiAppendTeamToUser
   */
  readonly teamId: string;

  /**
   * The team user data to assign
   * @type {TeamUserParams}
   * @memberof TeamApiAppendTeamToUser
   */
  readonly teamUser: TeamUserParams;
}

/**
 * Request parameters for createTeam operation in TeamApi.
 * @export
 * @interface TeamApiCreateTeamRequest
 */
export interface TeamApiCreateTeamRequest {
  /**
   * The team data to create
   * @type {Team}
   * @memberof TeamApiCreateTeam
   */
  readonly team: Team;
}

/**
 * Request parameters for deleteTeam operation in TeamApi.
 * @export
 * @interface TeamApiDeleteTeamRequest
 */
export interface TeamApiDeleteTeamRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiDeleteTeam
   */
  readonly teamId: string;
}

/**
 * Request parameters for deleteTeamFromMod operation in TeamApi.
 * @export
 * @interface TeamApiDeleteTeamFromModRequest
 */
export interface TeamApiDeleteTeamFromModRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiDeleteTeamFromMod
   */
  readonly teamId: string;

  /**
   * The team mod data to delete
   * @type {TeamModParams}
   * @memberof TeamApiDeleteTeamFromMod
   */
  readonly teamMod: TeamModParams;
}

/**
 * Request parameters for deleteTeamFromPack operation in TeamApi.
 * @export
 * @interface TeamApiDeleteTeamFromPackRequest
 */
export interface TeamApiDeleteTeamFromPackRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiDeleteTeamFromPack
   */
  readonly teamId: string;

  /**
   * The team pack data to delete
   * @type {TeamPackParams}
   * @memberof TeamApiDeleteTeamFromPack
   */
  readonly teamPack: TeamPackParams;
}

/**
 * Request parameters for deleteTeamFromUser operation in TeamApi.
 * @export
 * @interface TeamApiDeleteTeamFromUserRequest
 */
export interface TeamApiDeleteTeamFromUserRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiDeleteTeamFromUser
   */
  readonly teamId: string;

  /**
   * The team user data to delete
   * @type {TeamUserParams}
   * @memberof TeamApiDeleteTeamFromUser
   */
  readonly teamUser: TeamUserParams;
}

/**
 * Request parameters for listTeamMods operation in TeamApi.
 * @export
 * @interface TeamApiListTeamModsRequest
 */
export interface TeamApiListTeamModsRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiListTeamMods
   */
  readonly teamId: string;
}

/**
 * Request parameters for listTeamPacks operation in TeamApi.
 * @export
 * @interface TeamApiListTeamPacksRequest
 */
export interface TeamApiListTeamPacksRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiListTeamPacks
   */
  readonly teamId: string;
}

/**
 * Request parameters for listTeamUsers operation in TeamApi.
 * @export
 * @interface TeamApiListTeamUsersRequest
 */
export interface TeamApiListTeamUsersRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiListTeamUsers
   */
  readonly teamId: string;
}

/**
 * Request parameters for permitTeamMod operation in TeamApi.
 * @export
 * @interface TeamApiPermitTeamModRequest
 */
export interface TeamApiPermitTeamModRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiPermitTeamMod
   */
  readonly teamId: string;

  /**
   * The team mod data to update
   * @type {TeamModParams}
   * @memberof TeamApiPermitTeamMod
   */
  readonly teamMod: TeamModParams;
}

/**
 * Request parameters for permitTeamPack operation in TeamApi.
 * @export
 * @interface TeamApiPermitTeamPackRequest
 */
export interface TeamApiPermitTeamPackRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiPermitTeamPack
   */
  readonly teamId: string;

  /**
   * The team pack data to update
   * @type {TeamPackParams}
   * @memberof TeamApiPermitTeamPack
   */
  readonly teamPack: TeamPackParams;
}

/**
 * Request parameters for permitTeamUser operation in TeamApi.
 * @export
 * @interface TeamApiPermitTeamUserRequest
 */
export interface TeamApiPermitTeamUserRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiPermitTeamUser
   */
  readonly teamId: string;

  /**
   * The team user data to update
   * @type {TeamUserParams}
   * @memberof TeamApiPermitTeamUser
   */
  readonly teamUser: TeamUserParams;
}

/**
 * Request parameters for showTeam operation in TeamApi.
 * @export
 * @interface TeamApiShowTeamRequest
 */
export interface TeamApiShowTeamRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiShowTeam
   */
  readonly teamId: string;
}

/**
 * Request parameters for updateTeam operation in TeamApi.
 * @export
 * @interface TeamApiUpdateTeamRequest
 */
export interface TeamApiUpdateTeamRequest {
  /**
   * A team UUID or slug
   * @type {string}
   * @memberof TeamApiUpdateTeam
   */
  readonly teamId: string;

  /**
   * The team data to update
   * @type {Team}
   * @memberof TeamApiUpdateTeam
   */
  readonly team: Team;
}

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
  /**
   *
   * @summary Assign a mod to team
   * @param {TeamApiAppendTeamToModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public appendTeamToMod(
    requestParameters: TeamApiAppendTeamToModRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .appendTeamToMod(
        requestParameters.teamId,
        requestParameters.teamMod,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Assign a pack to team
   * @param {TeamApiAppendTeamToPackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public appendTeamToPack(
    requestParameters: TeamApiAppendTeamToPackRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .appendTeamToPack(
        requestParameters.teamId,
        requestParameters.teamPack,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Assign a user to team
   * @param {TeamApiAppendTeamToUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public appendTeamToUser(
    requestParameters: TeamApiAppendTeamToUserRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .appendTeamToUser(
        requestParameters.teamId,
        requestParameters.teamUser,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new team
   * @param {TeamApiCreateTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public createTeam(
    requestParameters: TeamApiCreateTeamRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .createTeam(requestParameters.team, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a specific team
   * @param {TeamApiDeleteTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public deleteTeam(
    requestParameters: TeamApiDeleteTeamRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .deleteTeam(requestParameters.teamId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a mod from team
   * @param {TeamApiDeleteTeamFromModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public deleteTeamFromMod(
    requestParameters: TeamApiDeleteTeamFromModRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .deleteTeamFromMod(
        requestParameters.teamId,
        requestParameters.teamMod,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a pack from team
   * @param {TeamApiDeleteTeamFromPackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public deleteTeamFromPack(
    requestParameters: TeamApiDeleteTeamFromPackRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .deleteTeamFromPack(
        requestParameters.teamId,
        requestParameters.teamPack,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a user from team
   * @param {TeamApiDeleteTeamFromUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public deleteTeamFromUser(
    requestParameters: TeamApiDeleteTeamFromUserRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .deleteTeamFromUser(
        requestParameters.teamId,
        requestParameters.teamUser,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all mods assigned to team
   * @param {TeamApiListTeamModsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public listTeamMods(
    requestParameters: TeamApiListTeamModsRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .listTeamMods(requestParameters.teamId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all packs assigned to team
   * @param {TeamApiListTeamPacksRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public listTeamPacks(
    requestParameters: TeamApiListTeamPacksRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .listTeamPacks(requestParameters.teamId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all users assigned to team
   * @param {TeamApiListTeamUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public listTeamUsers(
    requestParameters: TeamApiListTeamUsersRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .listTeamUsers(requestParameters.teamId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all available teams
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public listTeams(options?: AxiosRequestConfig) {
    return TeamApiFp(this.configuration)
      .listTeams(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update mod perms for team
   * @param {TeamApiPermitTeamModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public permitTeamMod(
    requestParameters: TeamApiPermitTeamModRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .permitTeamMod(
        requestParameters.teamId,
        requestParameters.teamMod,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update pack perms for team
   * @param {TeamApiPermitTeamPackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public permitTeamPack(
    requestParameters: TeamApiPermitTeamPackRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .permitTeamPack(
        requestParameters.teamId,
        requestParameters.teamPack,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update user perms for team
   * @param {TeamApiPermitTeamUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public permitTeamUser(
    requestParameters: TeamApiPermitTeamUserRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .permitTeamUser(
        requestParameters.teamId,
        requestParameters.teamUser,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch a specific team
   * @param {TeamApiShowTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public showTeam(
    requestParameters: TeamApiShowTeamRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .showTeam(requestParameters.teamId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a specific team
   * @param {TeamApiUpdateTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public updateTeam(
    requestParameters: TeamApiUpdateTeamRequest,
    options?: AxiosRequestConfig
  ) {
    return TeamApiFp(this.configuration)
      .updateTeam(requestParameters.teamId, requestParameters.team, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
