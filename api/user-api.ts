/* tslint:disable */
/* eslint-disable */
/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * Contact: kleister@webhippie.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { Notification } from "../model";
// @ts-ignore
import type { User } from "../model";
// @ts-ignore
import type { UserModParams } from "../model";
// @ts-ignore
import type { UserMods } from "../model";
// @ts-ignore
import type { UserPackParams } from "../model";
// @ts-ignore
import type { UserPacks } from "../model";
// @ts-ignore
import type { UserTeamParams } from "../model";
// @ts-ignore
import type { UserTeams } from "../model";
// @ts-ignore
import type { Users } from "../model";
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Attach a mod to user
     * @param {string} userId A user identifier or slug
     * @param {UserModParams} userModParams The user mod data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachUserToMod: async (
      userId: string,
      userModParams: UserModParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("attachUserToMod", "userId", userId);
      // verify required parameter 'userModParams' is not null or undefined
      assertParamExists("attachUserToMod", "userModParams", userModParams);
      const localVarPath = `/users/{user_id}/mods`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userModParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Attach a pack to user
     * @param {string} userId A user identifier or slug
     * @param {UserPackParams} userPackParams The user pack data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachUserToPack: async (
      userId: string,
      userPackParams: UserPackParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("attachUserToPack", "userId", userId);
      // verify required parameter 'userPackParams' is not null or undefined
      assertParamExists("attachUserToPack", "userPackParams", userPackParams);
      const localVarPath = `/users/{user_id}/packs`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userPackParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Attach a team to user
     * @param {string} userId A user identifier or slug
     * @param {UserTeamParams} userTeamParams The user team data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachUserToTeam: async (
      userId: string,
      userTeamParams: UserTeamParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("attachUserToTeam", "userId", userId);
      // verify required parameter 'userTeamParams' is not null or undefined
      assertParamExists("attachUserToTeam", "userTeamParams", userTeamParams);
      const localVarPath = `/users/{user_id}/teams`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userTeamParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new user
     * @param {User} user The user data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: async (
      user: User,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'user' is not null or undefined
      assertParamExists("createUser", "user", user);
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a specific user
     * @param {string} userId A user identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: async (
      userId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("deleteUser", "userId", userId);
      const localVarPath = `/users/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a mod from user
     * @param {string} userId A user identifier or slug
     * @param {UserModParams} userModParams The user mod data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromMod: async (
      userId: string,
      userModParams: UserModParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("deleteUserFromMod", "userId", userId);
      // verify required parameter 'userModParams' is not null or undefined
      assertParamExists("deleteUserFromMod", "userModParams", userModParams);
      const localVarPath = `/users/{user_id}/mods`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userModParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a pack from user
     * @param {string} userId A user identifier or slug
     * @param {UserPackParams} userPackParams The user pack data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromPack: async (
      userId: string,
      userPackParams: UserPackParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("deleteUserFromPack", "userId", userId);
      // verify required parameter 'userPackParams' is not null or undefined
      assertParamExists("deleteUserFromPack", "userPackParams", userPackParams);
      const localVarPath = `/users/{user_id}/packs`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userPackParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a team from user
     * @param {string} userId A user identifier or slug
     * @param {UserTeamParams} userTeamParams The user team data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromTeam: async (
      userId: string,
      userTeamParams: UserTeamParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("deleteUserFromTeam", "userId", userId);
      // verify required parameter 'userTeamParams' is not null or undefined
      assertParamExists("deleteUserFromTeam", "userTeamParams", userTeamParams);
      const localVarPath = `/users/{user_id}/teams`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userTeamParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all mods attached to user
     * @param {string} userId A user identifier or slug
     * @param {string} [search] Search query
     * @param {ListUserModsSortEnum} [sort] Sorting column
     * @param {ListUserModsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserMods: async (
      userId: string,
      search?: string,
      sort?: ListUserModsSortEnum,
      order?: ListUserModsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("listUserMods", "userId", userId);
      const localVarPath = `/users/{user_id}/mods`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all packs attached to user
     * @param {string} userId A user identifier or slug
     * @param {string} [search] Search query
     * @param {ListUserPacksSortEnum} [sort] Sorting column
     * @param {ListUserPacksOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserPacks: async (
      userId: string,
      search?: string,
      sort?: ListUserPacksSortEnum,
      order?: ListUserPacksOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("listUserPacks", "userId", userId);
      const localVarPath = `/users/{user_id}/packs`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all teams attached to user
     * @param {string} userId A user identifier or slug
     * @param {string} [search] Search query
     * @param {ListUserTeamsSortEnum} [sort] Sorting column
     * @param {ListUserTeamsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserTeams: async (
      userId: string,
      search?: string,
      sort?: ListUserTeamsSortEnum,
      order?: ListUserTeamsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("listUserTeams", "userId", userId);
      const localVarPath = `/users/{user_id}/teams`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all available users
     * @param {string} [search] Search query
     * @param {ListUsersSortEnum} [sort] Sorting column
     * @param {ListUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: async (
      search?: string,
      sort?: ListUsersSortEnum,
      order?: ListUsersOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update mod perms for user
     * @param {string} userId A user identifier or slug
     * @param {UserModParams} userModParams The user mod data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitUserMod: async (
      userId: string,
      userModParams: UserModParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("permitUserMod", "userId", userId);
      // verify required parameter 'userModParams' is not null or undefined
      assertParamExists("permitUserMod", "userModParams", userModParams);
      const localVarPath = `/users/{user_id}/mods`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userModParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update pack perms for user
     * @param {string} userId A user identifier or slug
     * @param {UserPackParams} userPackParams The user pack data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitUserPack: async (
      userId: string,
      userPackParams: UserPackParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("permitUserPack", "userId", userId);
      // verify required parameter 'userPackParams' is not null or undefined
      assertParamExists("permitUserPack", "userPackParams", userPackParams);
      const localVarPath = `/users/{user_id}/packs`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userPackParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update team perms for user
     * @param {string} userId A user identifier or slug
     * @param {UserTeamParams} userTeamParams The user team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitUserTeam: async (
      userId: string,
      userTeamParams: UserTeamParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("permitUserTeam", "userId", userId);
      // verify required parameter 'userTeamParams' is not null or undefined
      assertParamExists("permitUserTeam", "userTeamParams", userTeamParams);
      const localVarPath = `/users/{user_id}/teams`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userTeamParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch a specific user
     * @param {string} userId A user identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showUser: async (
      userId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("showUser", "userId", userId);
      const localVarPath = `/users/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a specific user
     * @param {string} userId A user identifier or slug
     * @param {User} user The user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: async (
      userId: string,
      user: User,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("updateUser", "userId", userId);
      // verify required parameter 'user' is not null or undefined
      assertParamExists("updateUser", "user", user);
      const localVarPath = `/users/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Attach a mod to user
     * @param {string} userId A user identifier or slug
     * @param {UserModParams} userModParams The user mod data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachUserToMod(
      userId: string,
      userModParams: UserModParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachUserToMod(
        userId,
        userModParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.attachUserToMod"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Attach a pack to user
     * @param {string} userId A user identifier or slug
     * @param {UserPackParams} userPackParams The user pack data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachUserToPack(
      userId: string,
      userPackParams: UserPackParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachUserToPack(
          userId,
          userPackParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.attachUserToPack"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Attach a team to user
     * @param {string} userId A user identifier or slug
     * @param {UserTeamParams} userTeamParams The user team data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachUserToTeam(
      userId: string,
      userTeamParams: UserTeamParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachUserToTeam(
          userId,
          userTeamParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.attachUserToTeam"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new user
     * @param {User} user The user data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUser(
      user: User,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(
        user,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.createUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a specific user
     * @param {string} userId A user identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUser(
      userId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(
        userId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.deleteUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a mod from user
     * @param {string} userId A user identifier or slug
     * @param {UserModParams} userModParams The user mod data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserFromMod(
      userId: string,
      userModParams: UserModParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUserFromMod(
          userId,
          userModParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.deleteUserFromMod"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a pack from user
     * @param {string} userId A user identifier or slug
     * @param {UserPackParams} userPackParams The user pack data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserFromPack(
      userId: string,
      userPackParams: UserPackParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUserFromPack(
          userId,
          userPackParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.deleteUserFromPack"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a team from user
     * @param {string} userId A user identifier or slug
     * @param {UserTeamParams} userTeamParams The user team data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserFromTeam(
      userId: string,
      userTeamParams: UserTeamParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUserFromTeam(
          userId,
          userTeamParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.deleteUserFromTeam"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all mods attached to user
     * @param {string} userId A user identifier or slug
     * @param {string} [search] Search query
     * @param {ListUserModsSortEnum} [sort] Sorting column
     * @param {ListUserModsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUserMods(
      userId: string,
      search?: string,
      sort?: ListUserModsSortEnum,
      order?: ListUserModsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMods>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUserMods(
        userId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.listUserMods"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all packs attached to user
     * @param {string} userId A user identifier or slug
     * @param {string} [search] Search query
     * @param {ListUserPacksSortEnum} [sort] Sorting column
     * @param {ListUserPacksOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUserPacks(
      userId: string,
      search?: string,
      sort?: ListUserPacksSortEnum,
      order?: ListUserPacksOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPacks>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUserPacks(
        userId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.listUserPacks"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all teams attached to user
     * @param {string} userId A user identifier or slug
     * @param {string} [search] Search query
     * @param {ListUserTeamsSortEnum} [sort] Sorting column
     * @param {ListUserTeamsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUserTeams(
      userId: string,
      search?: string,
      sort?: ListUserTeamsSortEnum,
      order?: ListUserTeamsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTeams>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUserTeams(
        userId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.listUserTeams"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all available users
     * @param {string} [search] Search query
     * @param {ListUsersSortEnum} [sort] Sorting column
     * @param {ListUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUsers(
      search?: string,
      sort?: ListUsersSortEnum,
      order?: ListUsersOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.listUsers"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update mod perms for user
     * @param {string} userId A user identifier or slug
     * @param {UserModParams} userModParams The user mod data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitUserMod(
      userId: string,
      userModParams: UserModParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitUserMod(
        userId,
        userModParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.permitUserMod"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update pack perms for user
     * @param {string} userId A user identifier or slug
     * @param {UserPackParams} userPackParams The user pack data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitUserPack(
      userId: string,
      userPackParams: UserPackParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitUserPack(
        userId,
        userPackParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.permitUserPack"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update team perms for user
     * @param {string} userId A user identifier or slug
     * @param {UserTeamParams} userTeamParams The user team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitUserTeam(
      userId: string,
      userTeamParams: UserTeamParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitUserTeam(
        userId,
        userTeamParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.permitUserTeam"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch a specific user
     * @param {string} userId A user identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showUser(
      userId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showUser(
        userId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.showUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a specific user
     * @param {string} userId A user identifier or slug
     * @param {User} user The user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUser(
      userId: string,
      user: User,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(
        userId,
        user,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.updateUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @summary Attach a mod to user
     * @param {UserApiAttachUserToModRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachUserToMod(
      requestParameters: UserApiAttachUserToModRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachUserToMod(
          requestParameters.userId,
          requestParameters.userModParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Attach a pack to user
     * @param {UserApiAttachUserToPackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachUserToPack(
      requestParameters: UserApiAttachUserToPackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachUserToPack(
          requestParameters.userId,
          requestParameters.userPackParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Attach a team to user
     * @param {UserApiAttachUserToTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachUserToTeam(
      requestParameters: UserApiAttachUserToTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachUserToTeam(
          requestParameters.userId,
          requestParameters.userTeamParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new user
     * @param {UserApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(
      requestParameters: UserApiCreateUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<User> {
      return localVarFp
        .createUser(requestParameters.user, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a specific user
     * @param {UserApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(
      requestParameters: UserApiDeleteUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteUser(requestParameters.userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a mod from user
     * @param {UserApiDeleteUserFromModRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromMod(
      requestParameters: UserApiDeleteUserFromModRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteUserFromMod(
          requestParameters.userId,
          requestParameters.userModParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a pack from user
     * @param {UserApiDeleteUserFromPackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromPack(
      requestParameters: UserApiDeleteUserFromPackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteUserFromPack(
          requestParameters.userId,
          requestParameters.userPackParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a team from user
     * @param {UserApiDeleteUserFromTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromTeam(
      requestParameters: UserApiDeleteUserFromTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteUserFromTeam(
          requestParameters.userId,
          requestParameters.userTeamParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all mods attached to user
     * @param {UserApiListUserModsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserMods(
      requestParameters: UserApiListUserModsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserMods> {
      return localVarFp
        .listUserMods(
          requestParameters.userId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all packs attached to user
     * @param {UserApiListUserPacksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserPacks(
      requestParameters: UserApiListUserPacksRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserPacks> {
      return localVarFp
        .listUserPacks(
          requestParameters.userId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all teams attached to user
     * @param {UserApiListUserTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserTeams(
      requestParameters: UserApiListUserTeamsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserTeams> {
      return localVarFp
        .listUserTeams(
          requestParameters.userId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all available users
     * @param {UserApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(
      requestParameters: UserApiListUsersRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Users> {
      return localVarFp
        .listUsers(
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update mod perms for user
     * @param {UserApiPermitUserModRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitUserMod(
      requestParameters: UserApiPermitUserModRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitUserMod(
          requestParameters.userId,
          requestParameters.userModParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update pack perms for user
     * @param {UserApiPermitUserPackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitUserPack(
      requestParameters: UserApiPermitUserPackRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitUserPack(
          requestParameters.userId,
          requestParameters.userPackParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update team perms for user
     * @param {UserApiPermitUserTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitUserTeam(
      requestParameters: UserApiPermitUserTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitUserTeam(
          requestParameters.userId,
          requestParameters.userTeamParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch a specific user
     * @param {UserApiShowUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showUser(
      requestParameters: UserApiShowUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<User> {
      return localVarFp
        .showUser(requestParameters.userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a specific user
     * @param {UserApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(
      requestParameters: UserApiUpdateUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<User> {
      return localVarFp
        .updateUser(requestParameters.userId, requestParameters.user, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for attachUserToMod operation in UserApi.
 * @export
 * @interface UserApiAttachUserToModRequest
 */
export interface UserApiAttachUserToModRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiAttachUserToMod
   */
  readonly userId: string;

  /**
   * The user mod data to attach
   * @type {UserModParams}
   * @memberof UserApiAttachUserToMod
   */
  readonly userModParams: UserModParams;
}

/**
 * Request parameters for attachUserToPack operation in UserApi.
 * @export
 * @interface UserApiAttachUserToPackRequest
 */
export interface UserApiAttachUserToPackRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiAttachUserToPack
   */
  readonly userId: string;

  /**
   * The user pack data to attach
   * @type {UserPackParams}
   * @memberof UserApiAttachUserToPack
   */
  readonly userPackParams: UserPackParams;
}

/**
 * Request parameters for attachUserToTeam operation in UserApi.
 * @export
 * @interface UserApiAttachUserToTeamRequest
 */
export interface UserApiAttachUserToTeamRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiAttachUserToTeam
   */
  readonly userId: string;

  /**
   * The user team data to attach
   * @type {UserTeamParams}
   * @memberof UserApiAttachUserToTeam
   */
  readonly userTeamParams: UserTeamParams;
}

/**
 * Request parameters for createUser operation in UserApi.
 * @export
 * @interface UserApiCreateUserRequest
 */
export interface UserApiCreateUserRequest {
  /**
   * The user data to create
   * @type {User}
   * @memberof UserApiCreateUser
   */
  readonly user: User;
}

/**
 * Request parameters for deleteUser operation in UserApi.
 * @export
 * @interface UserApiDeleteUserRequest
 */
export interface UserApiDeleteUserRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiDeleteUser
   */
  readonly userId: string;
}

/**
 * Request parameters for deleteUserFromMod operation in UserApi.
 * @export
 * @interface UserApiDeleteUserFromModRequest
 */
export interface UserApiDeleteUserFromModRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiDeleteUserFromMod
   */
  readonly userId: string;

  /**
   * The user mod data to unlink
   * @type {UserModParams}
   * @memberof UserApiDeleteUserFromMod
   */
  readonly userModParams: UserModParams;
}

/**
 * Request parameters for deleteUserFromPack operation in UserApi.
 * @export
 * @interface UserApiDeleteUserFromPackRequest
 */
export interface UserApiDeleteUserFromPackRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiDeleteUserFromPack
   */
  readonly userId: string;

  /**
   * The user pack data to unlink
   * @type {UserPackParams}
   * @memberof UserApiDeleteUserFromPack
   */
  readonly userPackParams: UserPackParams;
}

/**
 * Request parameters for deleteUserFromTeam operation in UserApi.
 * @export
 * @interface UserApiDeleteUserFromTeamRequest
 */
export interface UserApiDeleteUserFromTeamRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiDeleteUserFromTeam
   */
  readonly userId: string;

  /**
   * The user team data to unlink
   * @type {UserTeamParams}
   * @memberof UserApiDeleteUserFromTeam
   */
  readonly userTeamParams: UserTeamParams;
}

/**
 * Request parameters for listUserMods operation in UserApi.
 * @export
 * @interface UserApiListUserModsRequest
 */
export interface UserApiListUserModsRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiListUserMods
   */
  readonly userId: string;

  /**
   * Search query
   * @type {string}
   * @memberof UserApiListUserMods
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'slug' | 'name' | 'public'}
   * @memberof UserApiListUserMods
   */
  readonly sort?: ListUserModsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof UserApiListUserMods
   */
  readonly order?: ListUserModsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof UserApiListUserMods
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof UserApiListUserMods
   */
  readonly offset?: number;
}

/**
 * Request parameters for listUserPacks operation in UserApi.
 * @export
 * @interface UserApiListUserPacksRequest
 */
export interface UserApiListUserPacksRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiListUserPacks
   */
  readonly userId: string;

  /**
   * Search query
   * @type {string}
   * @memberof UserApiListUserPacks
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'slug' | 'name' | 'public'}
   * @memberof UserApiListUserPacks
   */
  readonly sort?: ListUserPacksSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof UserApiListUserPacks
   */
  readonly order?: ListUserPacksOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof UserApiListUserPacks
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof UserApiListUserPacks
   */
  readonly offset?: number;
}

/**
 * Request parameters for listUserTeams operation in UserApi.
 * @export
 * @interface UserApiListUserTeamsRequest
 */
export interface UserApiListUserTeamsRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiListUserTeams
   */
  readonly userId: string;

  /**
   * Search query
   * @type {string}
   * @memberof UserApiListUserTeams
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'slug' | 'name'}
   * @memberof UserApiListUserTeams
   */
  readonly sort?: ListUserTeamsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof UserApiListUserTeams
   */
  readonly order?: ListUserTeamsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof UserApiListUserTeams
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof UserApiListUserTeams
   */
  readonly offset?: number;
}

/**
 * Request parameters for listUsers operation in UserApi.
 * @export
 * @interface UserApiListUsersRequest
 */
export interface UserApiListUsersRequest {
  /**
   * Search query
   * @type {string}
   * @memberof UserApiListUsers
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'username' | 'email' | 'fullname' | 'admin' | 'active'}
   * @memberof UserApiListUsers
   */
  readonly sort?: ListUsersSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof UserApiListUsers
   */
  readonly order?: ListUsersOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof UserApiListUsers
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof UserApiListUsers
   */
  readonly offset?: number;
}

/**
 * Request parameters for permitUserMod operation in UserApi.
 * @export
 * @interface UserApiPermitUserModRequest
 */
export interface UserApiPermitUserModRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiPermitUserMod
   */
  readonly userId: string;

  /**
   * The user mod data to update
   * @type {UserModParams}
   * @memberof UserApiPermitUserMod
   */
  readonly userModParams: UserModParams;
}

/**
 * Request parameters for permitUserPack operation in UserApi.
 * @export
 * @interface UserApiPermitUserPackRequest
 */
export interface UserApiPermitUserPackRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiPermitUserPack
   */
  readonly userId: string;

  /**
   * The user pack data to update
   * @type {UserPackParams}
   * @memberof UserApiPermitUserPack
   */
  readonly userPackParams: UserPackParams;
}

/**
 * Request parameters for permitUserTeam operation in UserApi.
 * @export
 * @interface UserApiPermitUserTeamRequest
 */
export interface UserApiPermitUserTeamRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiPermitUserTeam
   */
  readonly userId: string;

  /**
   * The user team data to update
   * @type {UserTeamParams}
   * @memberof UserApiPermitUserTeam
   */
  readonly userTeamParams: UserTeamParams;
}

/**
 * Request parameters for showUser operation in UserApi.
 * @export
 * @interface UserApiShowUserRequest
 */
export interface UserApiShowUserRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiShowUser
   */
  readonly userId: string;
}

/**
 * Request parameters for updateUser operation in UserApi.
 * @export
 * @interface UserApiUpdateUserRequest
 */
export interface UserApiUpdateUserRequest {
  /**
   * A user identifier or slug
   * @type {string}
   * @memberof UserApiUpdateUser
   */
  readonly userId: string;

  /**
   * The user data to update
   * @type {User}
   * @memberof UserApiUpdateUser
   */
  readonly user: User;
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Attach a mod to user
   * @param {UserApiAttachUserToModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public attachUserToMod(
    requestParameters: UserApiAttachUserToModRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .attachUserToMod(
        requestParameters.userId,
        requestParameters.userModParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Attach a pack to user
   * @param {UserApiAttachUserToPackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public attachUserToPack(
    requestParameters: UserApiAttachUserToPackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .attachUserToPack(
        requestParameters.userId,
        requestParameters.userPackParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Attach a team to user
   * @param {UserApiAttachUserToTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public attachUserToTeam(
    requestParameters: UserApiAttachUserToTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .attachUserToTeam(
        requestParameters.userId,
        requestParameters.userTeamParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new user
   * @param {UserApiCreateUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public createUser(
    requestParameters: UserApiCreateUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .createUser(requestParameters.user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a specific user
   * @param {UserApiDeleteUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public deleteUser(
    requestParameters: UserApiDeleteUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .deleteUser(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a mod from user
   * @param {UserApiDeleteUserFromModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public deleteUserFromMod(
    requestParameters: UserApiDeleteUserFromModRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .deleteUserFromMod(
        requestParameters.userId,
        requestParameters.userModParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a pack from user
   * @param {UserApiDeleteUserFromPackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public deleteUserFromPack(
    requestParameters: UserApiDeleteUserFromPackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .deleteUserFromPack(
        requestParameters.userId,
        requestParameters.userPackParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a team from user
   * @param {UserApiDeleteUserFromTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public deleteUserFromTeam(
    requestParameters: UserApiDeleteUserFromTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .deleteUserFromTeam(
        requestParameters.userId,
        requestParameters.userTeamParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all mods attached to user
   * @param {UserApiListUserModsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public listUserMods(
    requestParameters: UserApiListUserModsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .listUserMods(
        requestParameters.userId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all packs attached to user
   * @param {UserApiListUserPacksRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public listUserPacks(
    requestParameters: UserApiListUserPacksRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .listUserPacks(
        requestParameters.userId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all teams attached to user
   * @param {UserApiListUserTeamsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public listUserTeams(
    requestParameters: UserApiListUserTeamsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .listUserTeams(
        requestParameters.userId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all available users
   * @param {UserApiListUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public listUsers(
    requestParameters: UserApiListUsersRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .listUsers(
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update mod perms for user
   * @param {UserApiPermitUserModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public permitUserMod(
    requestParameters: UserApiPermitUserModRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .permitUserMod(
        requestParameters.userId,
        requestParameters.userModParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update pack perms for user
   * @param {UserApiPermitUserPackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public permitUserPack(
    requestParameters: UserApiPermitUserPackRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .permitUserPack(
        requestParameters.userId,
        requestParameters.userPackParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update team perms for user
   * @param {UserApiPermitUserTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public permitUserTeam(
    requestParameters: UserApiPermitUserTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .permitUserTeam(
        requestParameters.userId,
        requestParameters.userTeamParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch a specific user
   * @param {UserApiShowUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public showUser(
    requestParameters: UserApiShowUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .showUser(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a specific user
   * @param {UserApiUpdateUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public updateUser(
    requestParameters: UserApiUpdateUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .updateUser(requestParameters.userId, requestParameters.user, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ListUserModsSortEnum = {
  Slug: "slug",
  Name: "name",
  Public: "public",
} as const;
export type ListUserModsSortEnum =
  (typeof ListUserModsSortEnum)[keyof typeof ListUserModsSortEnum];
/**
 * @export
 */
export const ListUserModsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListUserModsOrderEnum =
  (typeof ListUserModsOrderEnum)[keyof typeof ListUserModsOrderEnum];
/**
 * @export
 */
export const ListUserPacksSortEnum = {
  Slug: "slug",
  Name: "name",
  Public: "public",
} as const;
export type ListUserPacksSortEnum =
  (typeof ListUserPacksSortEnum)[keyof typeof ListUserPacksSortEnum];
/**
 * @export
 */
export const ListUserPacksOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListUserPacksOrderEnum =
  (typeof ListUserPacksOrderEnum)[keyof typeof ListUserPacksOrderEnum];
/**
 * @export
 */
export const ListUserTeamsSortEnum = {
  Slug: "slug",
  Name: "name",
} as const;
export type ListUserTeamsSortEnum =
  (typeof ListUserTeamsSortEnum)[keyof typeof ListUserTeamsSortEnum];
/**
 * @export
 */
export const ListUserTeamsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListUserTeamsOrderEnum =
  (typeof ListUserTeamsOrderEnum)[keyof typeof ListUserTeamsOrderEnum];
/**
 * @export
 */
export const ListUsersSortEnum = {
  Username: "username",
  Email: "email",
  Fullname: "fullname",
  Admin: "admin",
  Active: "active",
} as const;
export type ListUsersSortEnum =
  (typeof ListUsersSortEnum)[keyof typeof ListUsersSortEnum];
/**
 * @export
 */
export const ListUsersOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListUsersOrderEnum =
  (typeof ListUsersOrderEnum)[keyof typeof ListUsersOrderEnum];
