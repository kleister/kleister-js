/* tslint:disable */
/* eslint-disable */
/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * Contact: kleister@webhippie.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { Mod } from "../model";
// @ts-ignore
import type { ModTeamParams } from "../model";
// @ts-ignore
import type { ModTeams } from "../model";
// @ts-ignore
import type { ModUserParams } from "../model";
// @ts-ignore
import type { ModUsers } from "../model";
// @ts-ignore
import type { Mods } from "../model";
// @ts-ignore
import type { Notification } from "../model";
// @ts-ignore
import type { User } from "../model";
// @ts-ignore
import type { Version } from "../model";
// @ts-ignore
import type { VersionBuildParams } from "../model";
// @ts-ignore
import type { VersionBuilds } from "../model";
// @ts-ignore
import type { Versions } from "../model";
/**
 * ModApi - axios parameter creator
 * @export
 */
export const ModApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Attach a team to mod
     * @param {string} modId A mod identifier or slug
     * @param {ModTeamParams} modTeamParams The team data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachModToTeam: async (
      modId: string,
      modTeamParams: ModTeamParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("attachModToTeam", "modId", modId);
      // verify required parameter 'modTeamParams' is not null or undefined
      assertParamExists("attachModToTeam", "modTeamParams", modTeamParams);
      const localVarPath = `/mods/{mod_id}/teams`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        modTeamParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Attach a user to mod
     * @param {string} modId A mod identifier or slug
     * @param {ModUserParams} modUserParams The user data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachModToUser: async (
      modId: string,
      modUserParams: ModUserParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("attachModToUser", "modId", modId);
      // verify required parameter 'modUserParams' is not null or undefined
      assertParamExists("attachModToUser", "modUserParams", modUserParams);
      const localVarPath = `/mods/{mod_id}/users`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        modUserParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Attach a build to a version
     * @param {string} modId A mod identifier or slug
     * @param {string} versionId A version identifier or slug
     * @param {VersionBuildParams} versionBuildParams The version build data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachVersionToBuild: async (
      modId: string,
      versionId: string,
      versionBuildParams: VersionBuildParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("attachVersionToBuild", "modId", modId);
      // verify required parameter 'versionId' is not null or undefined
      assertParamExists("attachVersionToBuild", "versionId", versionId);
      // verify required parameter 'versionBuildParams' is not null or undefined
      assertParamExists(
        "attachVersionToBuild",
        "versionBuildParams",
        versionBuildParams,
      );
      const localVarPath = `/mods/{mod_id}/versions/{version_id}/builds`
        .replace(`{${"mod_id"}}`, encodeURIComponent(String(modId)))
        .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        versionBuildParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new mod
     * @param {Mod} mod The mod data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMod: async (
      mod: Mod,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'mod' is not null or undefined
      assertParamExists("createMod", "mod", mod);
      const localVarPath = `/mods`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        mod,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new version for a mod
     * @param {string} modId A mod identifier or slug
     * @param {Version} version The version data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVersion: async (
      modId: string,
      version: Version,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("createVersion", "modId", modId);
      // verify required parameter 'version' is not null or undefined
      assertParamExists("createVersion", "version", version);
      const localVarPath = `/mods/{mod_id}/versions`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        version,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a specific mod
     * @param {string} modId A mod identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMod: async (
      modId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("deleteMod", "modId", modId);
      const localVarPath = `/mods/{mod_id}`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a team from mod
     * @param {string} modId A mod identifier or slug
     * @param {ModTeamParams} modTeamParams The mod team data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModFromTeam: async (
      modId: string,
      modTeamParams: ModTeamParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("deleteModFromTeam", "modId", modId);
      // verify required parameter 'modTeamParams' is not null or undefined
      assertParamExists("deleteModFromTeam", "modTeamParams", modTeamParams);
      const localVarPath = `/mods/{mod_id}/teams`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        modTeamParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a user from mod
     * @param {string} modId A mod identifier or slug
     * @param {ModUserParams} modUserParams The mod user data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModFromUser: async (
      modId: string,
      modUserParams: ModUserParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("deleteModFromUser", "modId", modId);
      // verify required parameter 'modUserParams' is not null or undefined
      assertParamExists("deleteModFromUser", "modUserParams", modUserParams);
      const localVarPath = `/mods/{mod_id}/users`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        modUserParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a specific version for a mod
     * @param {string} modId A mod identifier or slug
     * @param {string} versionId A version identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVersion: async (
      modId: string,
      versionId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("deleteVersion", "modId", modId);
      // verify required parameter 'versionId' is not null or undefined
      assertParamExists("deleteVersion", "versionId", versionId);
      const localVarPath = `/mods/{mod_id}/versions/{version_id}`
        .replace(`{${"mod_id"}}`, encodeURIComponent(String(modId)))
        .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a build from a version
     * @param {string} modId A mod identifier or slug
     * @param {string} versionId A version identifier or slug
     * @param {VersionBuildParams} versionBuildParams The version build data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVersionFromBuild: async (
      modId: string,
      versionId: string,
      versionBuildParams: VersionBuildParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("deleteVersionFromBuild", "modId", modId);
      // verify required parameter 'versionId' is not null or undefined
      assertParamExists("deleteVersionFromBuild", "versionId", versionId);
      // verify required parameter 'versionBuildParams' is not null or undefined
      assertParamExists(
        "deleteVersionFromBuild",
        "versionBuildParams",
        versionBuildParams,
      );
      const localVarPath = `/mods/{mod_id}/versions/{version_id}/builds`
        .replace(`{${"mod_id"}}`, encodeURIComponent(String(modId)))
        .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        versionBuildParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all teams attached to mod
     * @param {string} modId A mod identifier or slug
     * @param {string} [search] Search query
     * @param {ListModTeamsSortEnum} [sort] Sorting column
     * @param {ListModTeamsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModTeams: async (
      modId: string,
      search?: string,
      sort?: ListModTeamsSortEnum,
      order?: ListModTeamsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("listModTeams", "modId", modId);
      const localVarPath = `/mods/{mod_id}/teams`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all users attached to mod
     * @param {string} modId A mod identifier or slug
     * @param {string} [search] Search query
     * @param {ListModUsersSortEnum} [sort] Sorting column
     * @param {ListModUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModUsers: async (
      modId: string,
      search?: string,
      sort?: ListModUsersSortEnum,
      order?: ListModUsersOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("listModUsers", "modId", modId);
      const localVarPath = `/mods/{mod_id}/users`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all available mods
     * @param {string} [search] Search query
     * @param {ListModsSortEnum} [sort] Sorting column
     * @param {ListModsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMods: async (
      search?: string,
      sort?: ListModsSortEnum,
      order?: ListModsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/mods`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all builds attached to version
     * @param {string} modId A mod identifier or slug
     * @param {string} versionId A version identifier or slug
     * @param {string} [search] Search query
     * @param {ListVersionBuildsSortEnum} [sort] Sorting column
     * @param {ListVersionBuildsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVersionBuilds: async (
      modId: string,
      versionId: string,
      search?: string,
      sort?: ListVersionBuildsSortEnum,
      order?: ListVersionBuildsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("listVersionBuilds", "modId", modId);
      // verify required parameter 'versionId' is not null or undefined
      assertParamExists("listVersionBuilds", "versionId", versionId);
      const localVarPath = `/mods/{mod_id}/versions/{version_id}/builds`
        .replace(`{${"mod_id"}}`, encodeURIComponent(String(modId)))
        .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all available versions for a mod
     * @param {string} modId A mod identifier or slug
     * @param {string} [search] Search query
     * @param {ListVersionsSortEnum} [sort] Sorting column
     * @param {ListVersionsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVersions: async (
      modId: string,
      search?: string,
      sort?: ListVersionsSortEnum,
      order?: ListVersionsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("listVersions", "modId", modId);
      const localVarPath = `/mods/{mod_id}/versions`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update team perms for mod
     * @param {string} modId A mod identifier or slug
     * @param {ModTeamParams} modTeamParams The team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitModTeam: async (
      modId: string,
      modTeamParams: ModTeamParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("permitModTeam", "modId", modId);
      // verify required parameter 'modTeamParams' is not null or undefined
      assertParamExists("permitModTeam", "modTeamParams", modTeamParams);
      const localVarPath = `/mods/{mod_id}/teams`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        modTeamParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update user perms for mod
     * @param {string} modId A mod identifier or slug
     * @param {ModUserParams} modUserParams The user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitModUser: async (
      modId: string,
      modUserParams: ModUserParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("permitModUser", "modId", modId);
      // verify required parameter 'modUserParams' is not null or undefined
      assertParamExists("permitModUser", "modUserParams", modUserParams);
      const localVarPath = `/mods/{mod_id}/users`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        modUserParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch a specific mod
     * @param {string} modId A mod identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showMod: async (
      modId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("showMod", "modId", modId);
      const localVarPath = `/mods/{mod_id}`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch a specific version for a mod
     * @param {string} modId A mod identifier or slug
     * @param {string} versionId A version identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showVersion: async (
      modId: string,
      versionId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("showVersion", "modId", modId);
      // verify required parameter 'versionId' is not null or undefined
      assertParamExists("showVersion", "versionId", versionId);
      const localVarPath = `/mods/{mod_id}/versions/{version_id}`
        .replace(`{${"mod_id"}}`, encodeURIComponent(String(modId)))
        .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a specific mod
     * @param {string} modId A mod identifier or slug
     * @param {Mod} mod The mod data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMod: async (
      modId: string,
      mod: Mod,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("updateMod", "modId", modId);
      // verify required parameter 'mod' is not null or undefined
      assertParamExists("updateMod", "mod", mod);
      const localVarPath = `/mods/{mod_id}`.replace(
        `{${"mod_id"}}`,
        encodeURIComponent(String(modId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        mod,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a specific version for a mod
     * @param {string} modId A mod identifier or slug
     * @param {string} versionId A version identifier or slug
     * @param {Version} version The version data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVersion: async (
      modId: string,
      versionId: string,
      version: Version,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modId' is not null or undefined
      assertParamExists("updateVersion", "modId", modId);
      // verify required parameter 'versionId' is not null or undefined
      assertParamExists("updateVersion", "versionId", versionId);
      // verify required parameter 'version' is not null or undefined
      assertParamExists("updateVersion", "version", version);
      const localVarPath = `/mods/{mod_id}/versions/{version_id}`
        .replace(`{${"mod_id"}}`, encodeURIComponent(String(modId)))
        .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        version,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ModApi - functional programming interface
 * @export
 */
export const ModApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ModApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Attach a team to mod
     * @param {string} modId A mod identifier or slug
     * @param {ModTeamParams} modTeamParams The team data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachModToTeam(
      modId: string,
      modTeamParams: ModTeamParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachModToTeam(
        modId,
        modTeamParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.attachModToTeam"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Attach a user to mod
     * @param {string} modId A mod identifier or slug
     * @param {ModUserParams} modUserParams The user data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachModToUser(
      modId: string,
      modUserParams: ModUserParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachModToUser(
        modId,
        modUserParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.attachModToUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Attach a build to a version
     * @param {string} modId A mod identifier or slug
     * @param {string} versionId A version identifier or slug
     * @param {VersionBuildParams} versionBuildParams The version build data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachVersionToBuild(
      modId: string,
      versionId: string,
      versionBuildParams: VersionBuildParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachVersionToBuild(
          modId,
          versionId,
          versionBuildParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.attachVersionToBuild"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new mod
     * @param {Mod} mod The mod data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMod(
      mod: Mod,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMod(
        mod,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.createMod"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new version for a mod
     * @param {string} modId A mod identifier or slug
     * @param {Version} version The version data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createVersion(
      modId: string,
      version: Version,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createVersion(
        modId,
        version,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.createVersion"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a specific mod
     * @param {string} modId A mod identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMod(
      modId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMod(
        modId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.deleteMod"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a team from mod
     * @param {string} modId A mod identifier or slug
     * @param {ModTeamParams} modTeamParams The mod team data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteModFromTeam(
      modId: string,
      modTeamParams: ModTeamParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteModFromTeam(
          modId,
          modTeamParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.deleteModFromTeam"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a user from mod
     * @param {string} modId A mod identifier or slug
     * @param {ModUserParams} modUserParams The mod user data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteModFromUser(
      modId: string,
      modUserParams: ModUserParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteModFromUser(
          modId,
          modUserParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.deleteModFromUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a specific version for a mod
     * @param {string} modId A mod identifier or slug
     * @param {string} versionId A version identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVersion(
      modId: string,
      versionId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVersion(
        modId,
        versionId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.deleteVersion"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a build from a version
     * @param {string} modId A mod identifier or slug
     * @param {string} versionId A version identifier or slug
     * @param {VersionBuildParams} versionBuildParams The version build data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVersionFromBuild(
      modId: string,
      versionId: string,
      versionBuildParams: VersionBuildParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteVersionFromBuild(
          modId,
          versionId,
          versionBuildParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.deleteVersionFromBuild"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all teams attached to mod
     * @param {string} modId A mod identifier or slug
     * @param {string} [search] Search query
     * @param {ListModTeamsSortEnum} [sort] Sorting column
     * @param {ListModTeamsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listModTeams(
      modId: string,
      search?: string,
      sort?: ListModTeamsSortEnum,
      order?: ListModTeamsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModTeams>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listModTeams(
        modId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.listModTeams"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all users attached to mod
     * @param {string} modId A mod identifier or slug
     * @param {string} [search] Search query
     * @param {ListModUsersSortEnum} [sort] Sorting column
     * @param {ListModUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listModUsers(
      modId: string,
      search?: string,
      sort?: ListModUsersSortEnum,
      order?: ListModUsersOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModUsers>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listModUsers(
        modId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.listModUsers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all available mods
     * @param {string} [search] Search query
     * @param {ListModsSortEnum} [sort] Sorting column
     * @param {ListModsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listMods(
      search?: string,
      sort?: ListModsSortEnum,
      order?: ListModsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mods>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listMods(
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.listMods"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all builds attached to version
     * @param {string} modId A mod identifier or slug
     * @param {string} versionId A version identifier or slug
     * @param {string} [search] Search query
     * @param {ListVersionBuildsSortEnum} [sort] Sorting column
     * @param {ListVersionBuildsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listVersionBuilds(
      modId: string,
      versionId: string,
      search?: string,
      sort?: ListVersionBuildsSortEnum,
      order?: ListVersionBuildsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionBuilds>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listVersionBuilds(
          modId,
          versionId,
          search,
          sort,
          order,
          limit,
          offset,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.listVersionBuilds"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all available versions for a mod
     * @param {string} modId A mod identifier or slug
     * @param {string} [search] Search query
     * @param {ListVersionsSortEnum} [sort] Sorting column
     * @param {ListVersionsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listVersions(
      modId: string,
      search?: string,
      sort?: ListVersionsSortEnum,
      order?: ListVersionsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Versions>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listVersions(
        modId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.listVersions"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update team perms for mod
     * @param {string} modId A mod identifier or slug
     * @param {ModTeamParams} modTeamParams The team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitModTeam(
      modId: string,
      modTeamParams: ModTeamParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitModTeam(
        modId,
        modTeamParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.permitModTeam"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update user perms for mod
     * @param {string} modId A mod identifier or slug
     * @param {ModUserParams} modUserParams The user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitModUser(
      modId: string,
      modUserParams: ModUserParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitModUser(
        modId,
        modUserParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.permitModUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch a specific mod
     * @param {string} modId A mod identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showMod(
      modId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mod>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showMod(
        modId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.showMod"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch a specific version for a mod
     * @param {string} modId A mod identifier or slug
     * @param {string} versionId A version identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showVersion(
      modId: string,
      versionId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showVersion(
        modId,
        versionId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.showVersion"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a specific mod
     * @param {string} modId A mod identifier or slug
     * @param {Mod} mod The mod data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateMod(
      modId: string,
      mod: Mod,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mod>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateMod(
        modId,
        mod,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.updateMod"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a specific version for a mod
     * @param {string} modId A mod identifier or slug
     * @param {string} versionId A version identifier or slug
     * @param {Version} version The version data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateVersion(
      modId: string,
      versionId: string,
      version: Version,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateVersion(
        modId,
        versionId,
        version,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ModApi.updateVersion"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ModApi - factory interface
 * @export
 */
export const ModApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ModApiFp(configuration);
  return {
    /**
     *
     * @summary Attach a team to mod
     * @param {ModApiAttachModToTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachModToTeam(
      requestParameters: ModApiAttachModToTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachModToTeam(
          requestParameters.modId,
          requestParameters.modTeamParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Attach a user to mod
     * @param {ModApiAttachModToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachModToUser(
      requestParameters: ModApiAttachModToUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachModToUser(
          requestParameters.modId,
          requestParameters.modUserParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Attach a build to a version
     * @param {ModApiAttachVersionToBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachVersionToBuild(
      requestParameters: ModApiAttachVersionToBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachVersionToBuild(
          requestParameters.modId,
          requestParameters.versionId,
          requestParameters.versionBuildParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new mod
     * @param {ModApiCreateModRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMod(
      requestParameters: ModApiCreateModRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<User> {
      return localVarFp
        .createMod(requestParameters.mod, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new version for a mod
     * @param {ModApiCreateVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVersion(
      requestParameters: ModApiCreateVersionRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Version> {
      return localVarFp
        .createVersion(
          requestParameters.modId,
          requestParameters.version,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a specific mod
     * @param {ModApiDeleteModRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMod(
      requestParameters: ModApiDeleteModRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteMod(requestParameters.modId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a team from mod
     * @param {ModApiDeleteModFromTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModFromTeam(
      requestParameters: ModApiDeleteModFromTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteModFromTeam(
          requestParameters.modId,
          requestParameters.modTeamParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a user from mod
     * @param {ModApiDeleteModFromUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteModFromUser(
      requestParameters: ModApiDeleteModFromUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteModFromUser(
          requestParameters.modId,
          requestParameters.modUserParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a specific version for a mod
     * @param {ModApiDeleteVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVersion(
      requestParameters: ModApiDeleteVersionRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteVersion(
          requestParameters.modId,
          requestParameters.versionId,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a build from a version
     * @param {ModApiDeleteVersionFromBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVersionFromBuild(
      requestParameters: ModApiDeleteVersionFromBuildRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteVersionFromBuild(
          requestParameters.modId,
          requestParameters.versionId,
          requestParameters.versionBuildParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all teams attached to mod
     * @param {ModApiListModTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModTeams(
      requestParameters: ModApiListModTeamsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ModTeams> {
      return localVarFp
        .listModTeams(
          requestParameters.modId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all users attached to mod
     * @param {ModApiListModUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModUsers(
      requestParameters: ModApiListModUsersRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ModUsers> {
      return localVarFp
        .listModUsers(
          requestParameters.modId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all available mods
     * @param {ModApiListModsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMods(
      requestParameters: ModApiListModsRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Mods> {
      return localVarFp
        .listMods(
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all builds attached to version
     * @param {ModApiListVersionBuildsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVersionBuilds(
      requestParameters: ModApiListVersionBuildsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<VersionBuilds> {
      return localVarFp
        .listVersionBuilds(
          requestParameters.modId,
          requestParameters.versionId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all available versions for a mod
     * @param {ModApiListVersionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVersions(
      requestParameters: ModApiListVersionsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Versions> {
      return localVarFp
        .listVersions(
          requestParameters.modId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update team perms for mod
     * @param {ModApiPermitModTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitModTeam(
      requestParameters: ModApiPermitModTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitModTeam(
          requestParameters.modId,
          requestParameters.modTeamParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update user perms for mod
     * @param {ModApiPermitModUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitModUser(
      requestParameters: ModApiPermitModUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitModUser(
          requestParameters.modId,
          requestParameters.modUserParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch a specific mod
     * @param {ModApiShowModRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showMod(
      requestParameters: ModApiShowModRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Mod> {
      return localVarFp
        .showMod(requestParameters.modId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch a specific version for a mod
     * @param {ModApiShowVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showVersion(
      requestParameters: ModApiShowVersionRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Version> {
      return localVarFp
        .showVersion(
          requestParameters.modId,
          requestParameters.versionId,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a specific mod
     * @param {ModApiUpdateModRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMod(
      requestParameters: ModApiUpdateModRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Mod> {
      return localVarFp
        .updateMod(requestParameters.modId, requestParameters.mod, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a specific version for a mod
     * @param {ModApiUpdateVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVersion(
      requestParameters: ModApiUpdateVersionRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Version> {
      return localVarFp
        .updateVersion(
          requestParameters.modId,
          requestParameters.versionId,
          requestParameters.version,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for attachModToTeam operation in ModApi.
 * @export
 * @interface ModApiAttachModToTeamRequest
 */
export interface ModApiAttachModToTeamRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiAttachModToTeam
   */
  readonly modId: string;

  /**
   * The team data to attach
   * @type {ModTeamParams}
   * @memberof ModApiAttachModToTeam
   */
  readonly modTeamParams: ModTeamParams;
}

/**
 * Request parameters for attachModToUser operation in ModApi.
 * @export
 * @interface ModApiAttachModToUserRequest
 */
export interface ModApiAttachModToUserRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiAttachModToUser
   */
  readonly modId: string;

  /**
   * The user data to attach
   * @type {ModUserParams}
   * @memberof ModApiAttachModToUser
   */
  readonly modUserParams: ModUserParams;
}

/**
 * Request parameters for attachVersionToBuild operation in ModApi.
 * @export
 * @interface ModApiAttachVersionToBuildRequest
 */
export interface ModApiAttachVersionToBuildRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiAttachVersionToBuild
   */
  readonly modId: string;

  /**
   * A version identifier or slug
   * @type {string}
   * @memberof ModApiAttachVersionToBuild
   */
  readonly versionId: string;

  /**
   * The version build data to attach
   * @type {VersionBuildParams}
   * @memberof ModApiAttachVersionToBuild
   */
  readonly versionBuildParams: VersionBuildParams;
}

/**
 * Request parameters for createMod operation in ModApi.
 * @export
 * @interface ModApiCreateModRequest
 */
export interface ModApiCreateModRequest {
  /**
   * The mod data to create
   * @type {Mod}
   * @memberof ModApiCreateMod
   */
  readonly mod: Mod;
}

/**
 * Request parameters for createVersion operation in ModApi.
 * @export
 * @interface ModApiCreateVersionRequest
 */
export interface ModApiCreateVersionRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiCreateVersion
   */
  readonly modId: string;

  /**
   * The version data to create
   * @type {Version}
   * @memberof ModApiCreateVersion
   */
  readonly version: Version;
}

/**
 * Request parameters for deleteMod operation in ModApi.
 * @export
 * @interface ModApiDeleteModRequest
 */
export interface ModApiDeleteModRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiDeleteMod
   */
  readonly modId: string;
}

/**
 * Request parameters for deleteModFromTeam operation in ModApi.
 * @export
 * @interface ModApiDeleteModFromTeamRequest
 */
export interface ModApiDeleteModFromTeamRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiDeleteModFromTeam
   */
  readonly modId: string;

  /**
   * The mod team data to unlink
   * @type {ModTeamParams}
   * @memberof ModApiDeleteModFromTeam
   */
  readonly modTeamParams: ModTeamParams;
}

/**
 * Request parameters for deleteModFromUser operation in ModApi.
 * @export
 * @interface ModApiDeleteModFromUserRequest
 */
export interface ModApiDeleteModFromUserRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiDeleteModFromUser
   */
  readonly modId: string;

  /**
   * The mod user data to unlink
   * @type {ModUserParams}
   * @memberof ModApiDeleteModFromUser
   */
  readonly modUserParams: ModUserParams;
}

/**
 * Request parameters for deleteVersion operation in ModApi.
 * @export
 * @interface ModApiDeleteVersionRequest
 */
export interface ModApiDeleteVersionRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiDeleteVersion
   */
  readonly modId: string;

  /**
   * A version identifier or slug
   * @type {string}
   * @memberof ModApiDeleteVersion
   */
  readonly versionId: string;
}

/**
 * Request parameters for deleteVersionFromBuild operation in ModApi.
 * @export
 * @interface ModApiDeleteVersionFromBuildRequest
 */
export interface ModApiDeleteVersionFromBuildRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiDeleteVersionFromBuild
   */
  readonly modId: string;

  /**
   * A version identifier or slug
   * @type {string}
   * @memberof ModApiDeleteVersionFromBuild
   */
  readonly versionId: string;

  /**
   * The version build data to unlink
   * @type {VersionBuildParams}
   * @memberof ModApiDeleteVersionFromBuild
   */
  readonly versionBuildParams: VersionBuildParams;
}

/**
 * Request parameters for listModTeams operation in ModApi.
 * @export
 * @interface ModApiListModTeamsRequest
 */
export interface ModApiListModTeamsRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiListModTeams
   */
  readonly modId: string;

  /**
   * Search query
   * @type {string}
   * @memberof ModApiListModTeams
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'slug' | 'name'}
   * @memberof ModApiListModTeams
   */
  readonly sort?: ListModTeamsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof ModApiListModTeams
   */
  readonly order?: ListModTeamsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof ModApiListModTeams
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof ModApiListModTeams
   */
  readonly offset?: number;
}

/**
 * Request parameters for listModUsers operation in ModApi.
 * @export
 * @interface ModApiListModUsersRequest
 */
export interface ModApiListModUsersRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiListModUsers
   */
  readonly modId: string;

  /**
   * Search query
   * @type {string}
   * @memberof ModApiListModUsers
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'username' | 'email' | 'fullname' | 'admin' | 'active'}
   * @memberof ModApiListModUsers
   */
  readonly sort?: ListModUsersSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof ModApiListModUsers
   */
  readonly order?: ListModUsersOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof ModApiListModUsers
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof ModApiListModUsers
   */
  readonly offset?: number;
}

/**
 * Request parameters for listMods operation in ModApi.
 * @export
 * @interface ModApiListModsRequest
 */
export interface ModApiListModsRequest {
  /**
   * Search query
   * @type {string}
   * @memberof ModApiListMods
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'name' | 'public'}
   * @memberof ModApiListMods
   */
  readonly sort?: ListModsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof ModApiListMods
   */
  readonly order?: ListModsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof ModApiListMods
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof ModApiListMods
   */
  readonly offset?: number;
}

/**
 * Request parameters for listVersionBuilds operation in ModApi.
 * @export
 * @interface ModApiListVersionBuildsRequest
 */
export interface ModApiListVersionBuildsRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiListVersionBuilds
   */
  readonly modId: string;

  /**
   * A version identifier or slug
   * @type {string}
   * @memberof ModApiListVersionBuilds
   */
  readonly versionId: string;

  /**
   * Search query
   * @type {string}
   * @memberof ModApiListVersionBuilds
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'slug' | 'name'}
   * @memberof ModApiListVersionBuilds
   */
  readonly sort?: ListVersionBuildsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof ModApiListVersionBuilds
   */
  readonly order?: ListVersionBuildsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof ModApiListVersionBuilds
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof ModApiListVersionBuilds
   */
  readonly offset?: number;
}

/**
 * Request parameters for listVersions operation in ModApi.
 * @export
 * @interface ModApiListVersionsRequest
 */
export interface ModApiListVersionsRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiListVersions
   */
  readonly modId: string;

  /**
   * Search query
   * @type {string}
   * @memberof ModApiListVersions
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'slug' | 'name'}
   * @memberof ModApiListVersions
   */
  readonly sort?: ListVersionsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof ModApiListVersions
   */
  readonly order?: ListVersionsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof ModApiListVersions
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof ModApiListVersions
   */
  readonly offset?: number;
}

/**
 * Request parameters for permitModTeam operation in ModApi.
 * @export
 * @interface ModApiPermitModTeamRequest
 */
export interface ModApiPermitModTeamRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiPermitModTeam
   */
  readonly modId: string;

  /**
   * The team data to update
   * @type {ModTeamParams}
   * @memberof ModApiPermitModTeam
   */
  readonly modTeamParams: ModTeamParams;
}

/**
 * Request parameters for permitModUser operation in ModApi.
 * @export
 * @interface ModApiPermitModUserRequest
 */
export interface ModApiPermitModUserRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiPermitModUser
   */
  readonly modId: string;

  /**
   * The user data to update
   * @type {ModUserParams}
   * @memberof ModApiPermitModUser
   */
  readonly modUserParams: ModUserParams;
}

/**
 * Request parameters for showMod operation in ModApi.
 * @export
 * @interface ModApiShowModRequest
 */
export interface ModApiShowModRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiShowMod
   */
  readonly modId: string;
}

/**
 * Request parameters for showVersion operation in ModApi.
 * @export
 * @interface ModApiShowVersionRequest
 */
export interface ModApiShowVersionRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiShowVersion
   */
  readonly modId: string;

  /**
   * A version identifier or slug
   * @type {string}
   * @memberof ModApiShowVersion
   */
  readonly versionId: string;
}

/**
 * Request parameters for updateMod operation in ModApi.
 * @export
 * @interface ModApiUpdateModRequest
 */
export interface ModApiUpdateModRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiUpdateMod
   */
  readonly modId: string;

  /**
   * The mod data to update
   * @type {Mod}
   * @memberof ModApiUpdateMod
   */
  readonly mod: Mod;
}

/**
 * Request parameters for updateVersion operation in ModApi.
 * @export
 * @interface ModApiUpdateVersionRequest
 */
export interface ModApiUpdateVersionRequest {
  /**
   * A mod identifier or slug
   * @type {string}
   * @memberof ModApiUpdateVersion
   */
  readonly modId: string;

  /**
   * A version identifier or slug
   * @type {string}
   * @memberof ModApiUpdateVersion
   */
  readonly versionId: string;

  /**
   * The version data to update
   * @type {Version}
   * @memberof ModApiUpdateVersion
   */
  readonly version: Version;
}

/**
 * ModApi - object-oriented interface
 * @export
 * @class ModApi
 * @extends {BaseAPI}
 */
export class ModApi extends BaseAPI {
  /**
   *
   * @summary Attach a team to mod
   * @param {ModApiAttachModToTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public attachModToTeam(
    requestParameters: ModApiAttachModToTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .attachModToTeam(
        requestParameters.modId,
        requestParameters.modTeamParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Attach a user to mod
   * @param {ModApiAttachModToUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public attachModToUser(
    requestParameters: ModApiAttachModToUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .attachModToUser(
        requestParameters.modId,
        requestParameters.modUserParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Attach a build to a version
   * @param {ModApiAttachVersionToBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public attachVersionToBuild(
    requestParameters: ModApiAttachVersionToBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .attachVersionToBuild(
        requestParameters.modId,
        requestParameters.versionId,
        requestParameters.versionBuildParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new mod
   * @param {ModApiCreateModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public createMod(
    requestParameters: ModApiCreateModRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .createMod(requestParameters.mod, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new version for a mod
   * @param {ModApiCreateVersionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public createVersion(
    requestParameters: ModApiCreateVersionRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .createVersion(
        requestParameters.modId,
        requestParameters.version,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a specific mod
   * @param {ModApiDeleteModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public deleteMod(
    requestParameters: ModApiDeleteModRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .deleteMod(requestParameters.modId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a team from mod
   * @param {ModApiDeleteModFromTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public deleteModFromTeam(
    requestParameters: ModApiDeleteModFromTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .deleteModFromTeam(
        requestParameters.modId,
        requestParameters.modTeamParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a user from mod
   * @param {ModApiDeleteModFromUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public deleteModFromUser(
    requestParameters: ModApiDeleteModFromUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .deleteModFromUser(
        requestParameters.modId,
        requestParameters.modUserParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a specific version for a mod
   * @param {ModApiDeleteVersionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public deleteVersion(
    requestParameters: ModApiDeleteVersionRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .deleteVersion(
        requestParameters.modId,
        requestParameters.versionId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a build from a version
   * @param {ModApiDeleteVersionFromBuildRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public deleteVersionFromBuild(
    requestParameters: ModApiDeleteVersionFromBuildRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .deleteVersionFromBuild(
        requestParameters.modId,
        requestParameters.versionId,
        requestParameters.versionBuildParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all teams attached to mod
   * @param {ModApiListModTeamsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public listModTeams(
    requestParameters: ModApiListModTeamsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .listModTeams(
        requestParameters.modId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all users attached to mod
   * @param {ModApiListModUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public listModUsers(
    requestParameters: ModApiListModUsersRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .listModUsers(
        requestParameters.modId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all available mods
   * @param {ModApiListModsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public listMods(
    requestParameters: ModApiListModsRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .listMods(
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all builds attached to version
   * @param {ModApiListVersionBuildsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public listVersionBuilds(
    requestParameters: ModApiListVersionBuildsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .listVersionBuilds(
        requestParameters.modId,
        requestParameters.versionId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all available versions for a mod
   * @param {ModApiListVersionsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public listVersions(
    requestParameters: ModApiListVersionsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .listVersions(
        requestParameters.modId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update team perms for mod
   * @param {ModApiPermitModTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public permitModTeam(
    requestParameters: ModApiPermitModTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .permitModTeam(
        requestParameters.modId,
        requestParameters.modTeamParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update user perms for mod
   * @param {ModApiPermitModUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public permitModUser(
    requestParameters: ModApiPermitModUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .permitModUser(
        requestParameters.modId,
        requestParameters.modUserParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch a specific mod
   * @param {ModApiShowModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public showMod(
    requestParameters: ModApiShowModRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .showMod(requestParameters.modId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch a specific version for a mod
   * @param {ModApiShowVersionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public showVersion(
    requestParameters: ModApiShowVersionRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .showVersion(
        requestParameters.modId,
        requestParameters.versionId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a specific mod
   * @param {ModApiUpdateModRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public updateMod(
    requestParameters: ModApiUpdateModRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .updateMod(requestParameters.modId, requestParameters.mod, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a specific version for a mod
   * @param {ModApiUpdateVersionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModApi
   */
  public updateVersion(
    requestParameters: ModApiUpdateVersionRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ModApiFp(this.configuration)
      .updateVersion(
        requestParameters.modId,
        requestParameters.versionId,
        requestParameters.version,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ListModTeamsSortEnum = {
  Slug: "slug",
  Name: "name",
} as const;
export type ListModTeamsSortEnum =
  (typeof ListModTeamsSortEnum)[keyof typeof ListModTeamsSortEnum];
/**
 * @export
 */
export const ListModTeamsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListModTeamsOrderEnum =
  (typeof ListModTeamsOrderEnum)[keyof typeof ListModTeamsOrderEnum];
/**
 * @export
 */
export const ListModUsersSortEnum = {
  Username: "username",
  Email: "email",
  Fullname: "fullname",
  Admin: "admin",
  Active: "active",
} as const;
export type ListModUsersSortEnum =
  (typeof ListModUsersSortEnum)[keyof typeof ListModUsersSortEnum];
/**
 * @export
 */
export const ListModUsersOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListModUsersOrderEnum =
  (typeof ListModUsersOrderEnum)[keyof typeof ListModUsersOrderEnum];
/**
 * @export
 */
export const ListModsSortEnum = {
  Name: "name",
  Public: "public",
} as const;
export type ListModsSortEnum =
  (typeof ListModsSortEnum)[keyof typeof ListModsSortEnum];
/**
 * @export
 */
export const ListModsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListModsOrderEnum =
  (typeof ListModsOrderEnum)[keyof typeof ListModsOrderEnum];
/**
 * @export
 */
export const ListVersionBuildsSortEnum = {
  Slug: "slug",
  Name: "name",
} as const;
export type ListVersionBuildsSortEnum =
  (typeof ListVersionBuildsSortEnum)[keyof typeof ListVersionBuildsSortEnum];
/**
 * @export
 */
export const ListVersionBuildsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListVersionBuildsOrderEnum =
  (typeof ListVersionBuildsOrderEnum)[keyof typeof ListVersionBuildsOrderEnum];
/**
 * @export
 */
export const ListVersionsSortEnum = {
  Slug: "slug",
  Name: "name",
} as const;
export type ListVersionsSortEnum =
  (typeof ListVersionsSortEnum)[keyof typeof ListVersionsSortEnum];
/**
 * @export
 */
export const ListVersionsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListVersionsOrderEnum =
  (typeof ListVersionsOrderEnum)[keyof typeof ListVersionsOrderEnum];
