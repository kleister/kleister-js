/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/* eslint-disable no-unused-vars */
import ApiClient from '../ApiClient'
import BuildVersion from '../model/BuildVersion'
import Mod from '../model/Mod'
import ModTeamParams from '../model/ModTeamParams'
import ModUserParams from '../model/ModUserParams'
import TeamMod from '../model/TeamMod'
import UserMod from '../model/UserMod'
import Version from '../model/Version'
import VersionBuildParams from '../model/VersionBuildParams'
/* eslint-enable no-unused-vars */

/**
* Mod service.
* @module kleister/api/ModApi
* @version 1.0.0-alpha1
*/
export default class ModApi {
  /**
    * Constructs a new ModApi.
    * @alias module:kleister/api/ModApi
    * @class
    * @param {module:kleister/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:kleister/ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }

  /**
     * Assign a team to mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/ModTeamParams} params The mod team data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  appendModToTeamWithHttpInfo (modId, params) {
    let postBody = params
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling appendModToTeam")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling appendModToTeam")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Object
    return this.apiClient.callApi(
      '/mods/{mod_id}/teams', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a team to mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/ModTeamParams} params The mod team data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  appendModToTeam (modId, params) {
    return this.appendModToTeamWithHttpInfo(modId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Assign a user to mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/ModUserParams} params The mod user data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  appendModToUserWithHttpInfo (modId, params) {
    let postBody = params
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling appendModToUser")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling appendModToUser")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Object
    return this.apiClient.callApi(
      '/mods/{mod_id}/users', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a user to mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/ModUserParams} params The mod user data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  appendModToUser (modId, params) {
    return this.appendModToUserWithHttpInfo(modId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Assign a build to a version
     * @param {String} modId A mod UUID or slug
     * @param {String} versionId A version UUID or slug
     * @param {module:kleister/model/VersionBuildParams} params The build data to append to version
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  appendVersionToBuildWithHttpInfo (modId, versionId, params) {
    let postBody = params
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling appendVersionToBuild")
    }
    // verify the required parameter 'versionId' is set
    if (versionId === undefined || versionId === null) {
      throw new Error("Missing the required parameter 'versionId' when calling appendVersionToBuild")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling appendVersionToBuild")
    }

    let pathParams = {
      'mod_id': modId,
      'version_id': versionId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Object
    return this.apiClient.callApi(
      '/mods/{mod_id}/versions/{version_id}/builds', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a build to a version
     * @param {String} modId A mod UUID or slug
     * @param {String} versionId A version UUID or slug
     * @param {module:kleister/model/VersionBuildParams} params The build data to append to version
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  appendVersionToBuild (modId, versionId, params) {
    return this.appendVersionToBuildWithHttpInfo(modId, versionId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Create a new mod
     * @param {module:kleister/model/Mod} params The mod data to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Mod} and HTTP response
     */
  createModWithHttpInfo (params) {
    let postBody = params
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling createMod")
    }

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Mod
    return this.apiClient.callApi(
      '/mods', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Create a new mod
     * @param {module:kleister/model/Mod} params The mod data to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Mod}
     */
  createMod (params) {
    return this.createModWithHttpInfo(params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Create a new version for a mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/Version} params The version data to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Version} and HTTP response
     */
  createVersionWithHttpInfo (modId, params) {
    let postBody = params
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling createVersion")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling createVersion")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Version
    return this.apiClient.callApi(
      '/mods/{mod_id}/versions', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Create a new version for a mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/Version} params The version data to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Version}
     */
  createVersion (modId, params) {
    return this.createVersionWithHttpInfo(modId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Delete a specific mod
     * @param {String} modId A mod UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  deleteModWithHttpInfo (modId) {
    let postBody = null
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling deleteMod")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = Object
    return this.apiClient.callApi(
      '/mods/{mod_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Delete a specific mod
     * @param {String} modId A mod UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  deleteMod (modId) {
    return this.deleteModWithHttpInfo(modId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Remove a team from mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/ModTeamParams} params The mod team data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  deleteModFromTeamWithHttpInfo (modId, params) {
    let postBody = params
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling deleteModFromTeam")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling deleteModFromTeam")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Object
    return this.apiClient.callApi(
      '/mods/{mod_id}/teams', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Remove a team from mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/ModTeamParams} params The mod team data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  deleteModFromTeam (modId, params) {
    return this.deleteModFromTeamWithHttpInfo(modId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Remove a user from mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/ModUserParams} params The mod user data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  deleteModFromUserWithHttpInfo (modId, params) {
    let postBody = params
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling deleteModFromUser")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling deleteModFromUser")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Object
    return this.apiClient.callApi(
      '/mods/{mod_id}/users', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Remove a user from mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/ModUserParams} params The mod user data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  deleteModFromUser (modId, params) {
    return this.deleteModFromUserWithHttpInfo(modId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Delete a specific version for a mod
     * @param {String} modId A mod UUID or slug
     * @param {String} versionId A version UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  deleteVersionWithHttpInfo (modId, versionId) {
    let postBody = null
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling deleteVersion")
    }
    // verify the required parameter 'versionId' is set
    if (versionId === undefined || versionId === null) {
      throw new Error("Missing the required parameter 'versionId' when calling deleteVersion")
    }

    let pathParams = {
      'mod_id': modId,
      'version_id': versionId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = Object
    return this.apiClient.callApi(
      '/mods/{mod_id}/versions/{version_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Delete a specific version for a mod
     * @param {String} modId A mod UUID or slug
     * @param {String} versionId A version UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  deleteVersion (modId, versionId) {
    return this.deleteVersionWithHttpInfo(modId, versionId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Unlink a build from a version
     * @param {String} modId A mod UUID or slug
     * @param {String} versionId A version UUID or slug
     * @param {module:kleister/model/VersionBuildParams} params The build data to unlink from version
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  deleteVersionFromBuildWithHttpInfo (modId, versionId, params) {
    let postBody = params
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling deleteVersionFromBuild")
    }
    // verify the required parameter 'versionId' is set
    if (versionId === undefined || versionId === null) {
      throw new Error("Missing the required parameter 'versionId' when calling deleteVersionFromBuild")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling deleteVersionFromBuild")
    }

    let pathParams = {
      'mod_id': modId,
      'version_id': versionId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Object
    return this.apiClient.callApi(
      '/mods/{mod_id}/versions/{version_id}/builds', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Unlink a build from a version
     * @param {String} modId A mod UUID or slug
     * @param {String} versionId A version UUID or slug
     * @param {module:kleister/model/VersionBuildParams} params The build data to unlink from version
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  deleteVersionFromBuild (modId, versionId, params) {
    return this.deleteVersionFromBuildWithHttpInfo(modId, versionId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all teams assigned to mod
     * @param {String} modId A mod UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/TeamMod>} and HTTP response
     */
  listModTeamsWithHttpInfo (modId) {
    let postBody = null
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling listModTeams")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [TeamMod]
    return this.apiClient.callApi(
      '/mods/{mod_id}/teams', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all teams assigned to mod
     * @param {String} modId A mod UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/TeamMod>}
     */
  listModTeams (modId) {
    return this.listModTeamsWithHttpInfo(modId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all users assigned to mod
     * @param {String} modId A mod UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/UserMod>} and HTTP response
     */
  listModUsersWithHttpInfo (modId) {
    let postBody = null
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling listModUsers")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [UserMod]
    return this.apiClient.callApi(
      '/mods/{mod_id}/users', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all users assigned to mod
     * @param {String} modId A mod UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/UserMod>}
     */
  listModUsers (modId) {
    return this.listModUsersWithHttpInfo(modId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all available mods
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/Mod>} and HTTP response
     */
  listModsWithHttpInfo () {
    let postBody = null

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [Mod]
    return this.apiClient.callApi(
      '/mods', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all available mods
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/Mod>}
     */
  listMods () {
    return this.listModsWithHttpInfo()
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all builds assigned to version
     * @param {String} modId A mod UUID or slug
     * @param {String} versionId A version UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/BuildVersion>} and HTTP response
     */
  listVersionBuildsWithHttpInfo (modId, versionId) {
    let postBody = null
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling listVersionBuilds")
    }
    // verify the required parameter 'versionId' is set
    if (versionId === undefined || versionId === null) {
      throw new Error("Missing the required parameter 'versionId' when calling listVersionBuilds")
    }

    let pathParams = {
      'mod_id': modId,
      'version_id': versionId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [BuildVersion]
    return this.apiClient.callApi(
      '/mods/{mod_id}/versions/{version_id}/builds', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all builds assigned to version
     * @param {String} modId A mod UUID or slug
     * @param {String} versionId A version UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/BuildVersion>}
     */
  listVersionBuilds (modId, versionId) {
    return this.listVersionBuildsWithHttpInfo(modId, versionId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all available versions for a mod
     * @param {String} modId A mod UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/Version>} and HTTP response
     */
  listVersionsWithHttpInfo (modId) {
    let postBody = null
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling listVersions")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [Version]
    return this.apiClient.callApi(
      '/mods/{mod_id}/versions', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all available versions for a mod
     * @param {String} modId A mod UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/Version>}
     */
  listVersions (modId) {
    return this.listVersionsWithHttpInfo(modId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update team perms for mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/ModTeamParams} params The mod team data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  permitModTeamWithHttpInfo (modId, params) {
    let postBody = params
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling permitModTeam")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling permitModTeam")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Object
    return this.apiClient.callApi(
      '/mods/{mod_id}/teams', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update team perms for mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/ModTeamParams} params The mod team data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  permitModTeam (modId, params) {
    return this.permitModTeamWithHttpInfo(modId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update user perms for mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/ModUserParams} params The mod user data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  permitModUserWithHttpInfo (modId, params) {
    let postBody = params
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling permitModUser")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling permitModUser")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Object
    return this.apiClient.callApi(
      '/mods/{mod_id}/users', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update user perms for mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/ModUserParams} params The mod user data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  permitModUser (modId, params) {
    return this.permitModUserWithHttpInfo(modId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch a specific mod
     * @param {String} modId A mod UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Mod} and HTTP response
     */
  showModWithHttpInfo (modId) {
    let postBody = null
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling showMod")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = Mod
    return this.apiClient.callApi(
      '/mods/{mod_id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch a specific mod
     * @param {String} modId A mod UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Mod}
     */
  showMod (modId) {
    return this.showModWithHttpInfo(modId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch a specific version for a mod
     * @param {String} modId A mod UUID or slug
     * @param {String} versionId A version UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Version} and HTTP response
     */
  showVersionWithHttpInfo (modId, versionId) {
    let postBody = null
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling showVersion")
    }
    // verify the required parameter 'versionId' is set
    if (versionId === undefined || versionId === null) {
      throw new Error("Missing the required parameter 'versionId' when calling showVersion")
    }

    let pathParams = {
      'mod_id': modId,
      'version_id': versionId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = Version
    return this.apiClient.callApi(
      '/mods/{mod_id}/versions/{version_id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch a specific version for a mod
     * @param {String} modId A mod UUID or slug
     * @param {String} versionId A version UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Version}
     */
  showVersion (modId, versionId) {
    return this.showVersionWithHttpInfo(modId, versionId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update a specific mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/Mod} params The mod data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Mod} and HTTP response
     */
  updateModWithHttpInfo (modId, params) {
    let postBody = params
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling updateMod")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling updateMod")
    }

    let pathParams = {
      'mod_id': modId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Mod
    return this.apiClient.callApi(
      '/mods/{mod_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update a specific mod
     * @param {String} modId A mod UUID or slug
     * @param {module:kleister/model/Mod} params The mod data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Mod}
     */
  updateMod (modId, params) {
    return this.updateModWithHttpInfo(modId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update a specific version for a mod
     * @param {String} modId A mod UUID or slug
     * @param {String} versionId A version UUID or slug
     * @param {module:kleister/model/Version} params The version data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Version} and HTTP response
     */
  updateVersionWithHttpInfo (modId, versionId, params) {
    let postBody = params
    // verify the required parameter 'modId' is set
    if (modId === undefined || modId === null) {
      throw new Error("Missing the required parameter 'modId' when calling updateVersion")
    }
    // verify the required parameter 'versionId' is set
    if (versionId === undefined || versionId === null) {
      throw new Error("Missing the required parameter 'versionId' when calling updateVersion")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling updateVersion")
    }

    let pathParams = {
      'mod_id': modId,
      'version_id': versionId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Version
    return this.apiClient.callApi(
      '/mods/{mod_id}/versions/{version_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update a specific version for a mod
     * @param {String} modId A mod UUID or slug
     * @param {String} versionId A version UUID or slug
     * @param {module:kleister/model/Version} params The version data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Version}
     */
  updateVersion (modId, versionId, params) {
    return this.updateVersionWithHttpInfo(modId, versionId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }
}
