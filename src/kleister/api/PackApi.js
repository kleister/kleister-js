/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/* eslint-disable no-unused-vars */
import ApiClient from '../ApiClient'
import Build from '../model/Build'
import BuildVersion from '../model/BuildVersion'
import BuildVersionParams from '../model/BuildVersionParams'
import GeneralError from '../model/GeneralError'
import Pack from '../model/Pack'
import PackTeamParams from '../model/PackTeamParams'
import PackUserParams from '../model/PackUserParams'
import TeamPack from '../model/TeamPack'
import UserPack from '../model/UserPack'
import ValidationError from '../model/ValidationError'
/* eslint-enable no-unused-vars */

/**
* Pack service.
* @module kleister/api/PackApi
* @version 1.0.0-alpha1
*/
export default class PackApi {
  /**
    * Constructs a new PackApi.
    * @alias module:kleister/api/PackApi
    * @class
    * @param {module:kleister/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:kleister/ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }

  /**
     * Assign a version to a build
     * @param {String} packId A pack UUID or slug
     * @param {String} buildId A build UUID or slug
     * @param {module:kleister/model/BuildVersionParams} buildVersion The version data to append to build
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  appendBuildToVersionWithHttpInfo (packId, buildId, buildVersion) {
    let postBody = buildVersion
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling appendBuildToVersion")
    }
    // verify the required parameter 'buildId' is set
    if (buildId === undefined || buildId === null) {
      throw new Error("Missing the required parameter 'buildId' when calling appendBuildToVersion")
    }
    // verify the required parameter 'buildVersion' is set
    if (buildVersion === undefined || buildVersion === null) {
      throw new Error("Missing the required parameter 'buildVersion' when calling appendBuildToVersion")
    }

    let pathParams = {
      'pack_id': packId,
      'build_id': buildId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/packs/{pack_id}/builds/{build_id}/versions', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a version to a build
     * @param {String} packId A pack UUID or slug
     * @param {String} buildId A build UUID or slug
     * @param {module:kleister/model/BuildVersionParams} buildVersion The version data to append to build
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  appendBuildToVersion (packId, buildId, buildVersion) {
    return this.appendBuildToVersionWithHttpInfo(packId, buildId, buildVersion)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Assign a team to pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/PackTeamParams} packTeam The pack team data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  appendPackToTeamWithHttpInfo (packId, packTeam) {
    let postBody = packTeam
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling appendPackToTeam")
    }
    // verify the required parameter 'packTeam' is set
    if (packTeam === undefined || packTeam === null) {
      throw new Error("Missing the required parameter 'packTeam' when calling appendPackToTeam")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/packs/{pack_id}/teams', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a team to pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/PackTeamParams} packTeam The pack team data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  appendPackToTeam (packId, packTeam) {
    return this.appendPackToTeamWithHttpInfo(packId, packTeam)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Assign a user to pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/PackUserParams} packUser The pack user data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  appendPackToUserWithHttpInfo (packId, packUser) {
    let postBody = packUser
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling appendPackToUser")
    }
    // verify the required parameter 'packUser' is set
    if (packUser === undefined || packUser === null) {
      throw new Error("Missing the required parameter 'packUser' when calling appendPackToUser")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/packs/{pack_id}/users', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a user to pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/PackUserParams} packUser The pack user data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  appendPackToUser (packId, packUser) {
    return this.appendPackToUserWithHttpInfo(packId, packUser)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Create a new build for a pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/Build} build The build data to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Build} and HTTP response
     */
  createBuildWithHttpInfo (packId, build) {
    let postBody = build
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling createBuild")
    }
    // verify the required parameter 'build' is set
    if (build === undefined || build === null) {
      throw new Error("Missing the required parameter 'build' when calling createBuild")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Build
    return this.apiClient.callApi(
      '/packs/{pack_id}/builds', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Create a new build for a pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/Build} build The build data to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Build}
     */
  createBuild (packId, build) {
    return this.createBuildWithHttpInfo(packId, build)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Create a new pack
     * @param {module:kleister/model/Pack} pack The pack data to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Pack} and HTTP response
     */
  createPackWithHttpInfo (pack) {
    let postBody = pack
    // verify the required parameter 'pack' is set
    if (pack === undefined || pack === null) {
      throw new Error("Missing the required parameter 'pack' when calling createPack")
    }

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Pack
    return this.apiClient.callApi(
      '/packs', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Create a new pack
     * @param {module:kleister/model/Pack} pack The pack data to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Pack}
     */
  createPack (pack) {
    return this.createPackWithHttpInfo(pack)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Delete a specific build for a pack
     * @param {String} packId A pack UUID or slug
     * @param {String} buildId A build UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deleteBuildWithHttpInfo (packId, buildId) {
    let postBody = null
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling deleteBuild")
    }
    // verify the required parameter 'buildId' is set
    if (buildId === undefined || buildId === null) {
      throw new Error("Missing the required parameter 'buildId' when calling deleteBuild")
    }

    let pathParams = {
      'pack_id': packId,
      'build_id': buildId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/packs/{pack_id}/builds/{build_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Delete a specific build for a pack
     * @param {String} packId A pack UUID or slug
     * @param {String} buildId A build UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deleteBuild (packId, buildId) {
    return this.deleteBuildWithHttpInfo(packId, buildId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Unlink a version from a build
     * @param {String} packId A pack UUID or slug
     * @param {String} buildId A build UUID or slug
     * @param {module:kleister/model/BuildVersionParams} buildVersion The version data to unlink from build
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deleteBuildFromVersionWithHttpInfo (packId, buildId, buildVersion) {
    let postBody = buildVersion
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling deleteBuildFromVersion")
    }
    // verify the required parameter 'buildId' is set
    if (buildId === undefined || buildId === null) {
      throw new Error("Missing the required parameter 'buildId' when calling deleteBuildFromVersion")
    }
    // verify the required parameter 'buildVersion' is set
    if (buildVersion === undefined || buildVersion === null) {
      throw new Error("Missing the required parameter 'buildVersion' when calling deleteBuildFromVersion")
    }

    let pathParams = {
      'pack_id': packId,
      'build_id': buildId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/packs/{pack_id}/builds/{build_id}/versions', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Unlink a version from a build
     * @param {String} packId A pack UUID or slug
     * @param {String} buildId A build UUID or slug
     * @param {module:kleister/model/BuildVersionParams} buildVersion The version data to unlink from build
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deleteBuildFromVersion (packId, buildId, buildVersion) {
    return this.deleteBuildFromVersionWithHttpInfo(packId, buildId, buildVersion)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Delete a specific pack
     * @param {String} packId A pack UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deletePackWithHttpInfo (packId) {
    let postBody = null
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling deletePack")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/packs/{pack_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Delete a specific pack
     * @param {String} packId A pack UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deletePack (packId) {
    return this.deletePackWithHttpInfo(packId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Remove a team from pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/PackTeamParams} packTeam The pack team data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deletePackFromTeamWithHttpInfo (packId, packTeam) {
    let postBody = packTeam
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling deletePackFromTeam")
    }
    // verify the required parameter 'packTeam' is set
    if (packTeam === undefined || packTeam === null) {
      throw new Error("Missing the required parameter 'packTeam' when calling deletePackFromTeam")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/packs/{pack_id}/teams', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Remove a team from pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/PackTeamParams} packTeam The pack team data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deletePackFromTeam (packId, packTeam) {
    return this.deletePackFromTeamWithHttpInfo(packId, packTeam)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Remove a user from pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/PackUserParams} packUser The pack user data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deletePackFromUserWithHttpInfo (packId, packUser) {
    let postBody = packUser
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling deletePackFromUser")
    }
    // verify the required parameter 'packUser' is set
    if (packUser === undefined || packUser === null) {
      throw new Error("Missing the required parameter 'packUser' when calling deletePackFromUser")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/packs/{pack_id}/users', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Remove a user from pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/PackUserParams} packUser The pack user data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deletePackFromUser (packId, packUser) {
    return this.deletePackFromUserWithHttpInfo(packId, packUser)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all versions assigned to build
     * @param {String} packId A pack UUID or slug
     * @param {String} buildId A build UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/BuildVersion>} and HTTP response
     */
  listBuildVersionsWithHttpInfo (packId, buildId) {
    let postBody = null
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling listBuildVersions")
    }
    // verify the required parameter 'buildId' is set
    if (buildId === undefined || buildId === null) {
      throw new Error("Missing the required parameter 'buildId' when calling listBuildVersions")
    }

    let pathParams = {
      'pack_id': packId,
      'build_id': buildId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [BuildVersion]
    return this.apiClient.callApi(
      '/packs/{pack_id}/builds/{build_id}/versions', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all versions assigned to build
     * @param {String} packId A pack UUID or slug
     * @param {String} buildId A build UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/BuildVersion>}
     */
  listBuildVersions (packId, buildId) {
    return this.listBuildVersionsWithHttpInfo(packId, buildId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all available builds for a pack
     * @param {String} packId A pack UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/Build>} and HTTP response
     */
  listBuildsWithHttpInfo (packId) {
    let postBody = null
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling listBuilds")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [Build]
    return this.apiClient.callApi(
      '/packs/{pack_id}/builds', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all available builds for a pack
     * @param {String} packId A pack UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/Build>}
     */
  listBuilds (packId) {
    return this.listBuildsWithHttpInfo(packId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all teams assigned to pack
     * @param {String} packId A pack UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/TeamPack>} and HTTP response
     */
  listPackTeamsWithHttpInfo (packId) {
    let postBody = null
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling listPackTeams")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [TeamPack]
    return this.apiClient.callApi(
      '/packs/{pack_id}/teams', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all teams assigned to pack
     * @param {String} packId A pack UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/TeamPack>}
     */
  listPackTeams (packId) {
    return this.listPackTeamsWithHttpInfo(packId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all users assigned to pack
     * @param {String} packId A pack UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/UserPack>} and HTTP response
     */
  listPackUsersWithHttpInfo (packId) {
    let postBody = null
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling listPackUsers")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [UserPack]
    return this.apiClient.callApi(
      '/packs/{pack_id}/users', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all users assigned to pack
     * @param {String} packId A pack UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/UserPack>}
     */
  listPackUsers (packId) {
    return this.listPackUsersWithHttpInfo(packId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all available packs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/Pack>} and HTTP response
     */
  listPacksWithHttpInfo () {
    let postBody = null

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [Pack]
    return this.apiClient.callApi(
      '/packs', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all available packs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/Pack>}
     */
  listPacks () {
    return this.listPacksWithHttpInfo()
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update team perms for pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/PackTeamParams} packTeam The pack team data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  permitPackTeamWithHttpInfo (packId, packTeam) {
    let postBody = packTeam
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling permitPackTeam")
    }
    // verify the required parameter 'packTeam' is set
    if (packTeam === undefined || packTeam === null) {
      throw new Error("Missing the required parameter 'packTeam' when calling permitPackTeam")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/packs/{pack_id}/teams', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update team perms for pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/PackTeamParams} packTeam The pack team data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  permitPackTeam (packId, packTeam) {
    return this.permitPackTeamWithHttpInfo(packId, packTeam)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update user perms for pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/PackUserParams} packUser The pack user data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  permitPackUserWithHttpInfo (packId, packUser) {
    let postBody = packUser
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling permitPackUser")
    }
    // verify the required parameter 'packUser' is set
    if (packUser === undefined || packUser === null) {
      throw new Error("Missing the required parameter 'packUser' when calling permitPackUser")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/packs/{pack_id}/users', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update user perms for pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/PackUserParams} packUser The pack user data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  permitPackUser (packId, packUser) {
    return this.permitPackUserWithHttpInfo(packId, packUser)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch a specific build for a pack
     * @param {String} packId A pack UUID or slug
     * @param {String} buildId A build UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Build} and HTTP response
     */
  showBuildWithHttpInfo (packId, buildId) {
    let postBody = null
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling showBuild")
    }
    // verify the required parameter 'buildId' is set
    if (buildId === undefined || buildId === null) {
      throw new Error("Missing the required parameter 'buildId' when calling showBuild")
    }

    let pathParams = {
      'pack_id': packId,
      'build_id': buildId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = Build
    return this.apiClient.callApi(
      '/packs/{pack_id}/builds/{build_id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch a specific build for a pack
     * @param {String} packId A pack UUID or slug
     * @param {String} buildId A build UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Build}
     */
  showBuild (packId, buildId) {
    return this.showBuildWithHttpInfo(packId, buildId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch a specific pack
     * @param {String} packId A pack UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Pack} and HTTP response
     */
  showPackWithHttpInfo (packId) {
    let postBody = null
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling showPack")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = Pack
    return this.apiClient.callApi(
      '/packs/{pack_id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch a specific pack
     * @param {String} packId A pack UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Pack}
     */
  showPack (packId) {
    return this.showPackWithHttpInfo(packId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update a specific build for a pack
     * @param {String} packId A pack UUID or slug
     * @param {String} buildId A build UUID or slug
     * @param {module:kleister/model/Build} build The build data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Build} and HTTP response
     */
  updateBuildWithHttpInfo (packId, buildId, build) {
    let postBody = build
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling updateBuild")
    }
    // verify the required parameter 'buildId' is set
    if (buildId === undefined || buildId === null) {
      throw new Error("Missing the required parameter 'buildId' when calling updateBuild")
    }
    // verify the required parameter 'build' is set
    if (build === undefined || build === null) {
      throw new Error("Missing the required parameter 'build' when calling updateBuild")
    }

    let pathParams = {
      'pack_id': packId,
      'build_id': buildId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Build
    return this.apiClient.callApi(
      '/packs/{pack_id}/builds/{build_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update a specific build for a pack
     * @param {String} packId A pack UUID or slug
     * @param {String} buildId A build UUID or slug
     * @param {module:kleister/model/Build} build The build data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Build}
     */
  updateBuild (packId, buildId, build) {
    return this.updateBuildWithHttpInfo(packId, buildId, build)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update a specific pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/Pack} pack The pack data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Pack} and HTTP response
     */
  updatePackWithHttpInfo (packId, pack) {
    let postBody = pack
    // verify the required parameter 'packId' is set
    if (packId === undefined || packId === null) {
      throw new Error("Missing the required parameter 'packId' when calling updatePack")
    }
    // verify the required parameter 'pack' is set
    if (pack === undefined || pack === null) {
      throw new Error("Missing the required parameter 'pack' when calling updatePack")
    }

    let pathParams = {
      'pack_id': packId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Pack
    return this.apiClient.callApi(
      '/packs/{pack_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update a specific pack
     * @param {String} packId A pack UUID or slug
     * @param {module:kleister/model/Pack} pack The pack data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Pack}
     */
  updatePack (packId, pack) {
    return this.updatePackWithHttpInfo(packId, pack)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }
}
