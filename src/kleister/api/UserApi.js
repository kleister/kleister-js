/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/* eslint-disable no-unused-vars */
import ApiClient from '../ApiClient'
import GeneralError from '../model/GeneralError'
import TeamUser from '../model/TeamUser'
import User from '../model/User'
import UserMod from '../model/UserMod'
import UserModParams from '../model/UserModParams'
import UserPack from '../model/UserPack'
import UserPackParams from '../model/UserPackParams'
import UserTeamParams from '../model/UserTeamParams'
import ValidationError from '../model/ValidationError'
/* eslint-enable no-unused-vars */

/**
* User service.
* @module kleister/api/UserApi
* @version 1.0.0-alpha1
*/
export default class UserApi {
  /**
    * Constructs a new UserApi.
    * @alias module:kleister/api/UserApi
    * @class
    * @param {module:kleister/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:kleister/ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }

  /**
     * Assign a mod to user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserModParams} params The user mod data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  appendUserToModWithHttpInfo (userId, params) {
    let postBody = params
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling appendUserToMod")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling appendUserToMod")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/users/{user_id}/mods', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a mod to user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserModParams} params The user mod data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  appendUserToMod (userId, params) {
    return this.appendUserToModWithHttpInfo(userId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Assign a pack to user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserPackParams} params The user pack data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  appendUserToPackWithHttpInfo (userId, params) {
    let postBody = params
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling appendUserToPack")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling appendUserToPack")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/users/{user_id}/packs', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a pack to user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserPackParams} params The user pack data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  appendUserToPack (userId, params) {
    return this.appendUserToPackWithHttpInfo(userId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Assign a team to user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserTeamParams} params The user team data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  appendUserToTeamWithHttpInfo (userId, params) {
    let postBody = params
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling appendUserToTeam")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling appendUserToTeam")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/users/{user_id}/teams', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a team to user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserTeamParams} params The user team data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  appendUserToTeam (userId, params) {
    return this.appendUserToTeamWithHttpInfo(userId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Create a new user
     * @param {module:kleister/model/User} params The user data to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/User} and HTTP response
     */
  createUserWithHttpInfo (params) {
    let postBody = params
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling createUser")
    }

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = User
    return this.apiClient.callApi(
      '/users', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Create a new user
     * @param {module:kleister/model/User} params The user data to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/User}
     */
  createUser (params) {
    return this.createUserWithHttpInfo(params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Delete a specific user
     * @param {String} userId A user UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deleteUserWithHttpInfo (userId) {
    let postBody = null
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling deleteUser")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/users/{user_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Delete a specific user
     * @param {String} userId A user UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deleteUser (userId) {
    return this.deleteUserWithHttpInfo(userId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Remove a mod from user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserModParams} params The user mod data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deleteUserFromModWithHttpInfo (userId, params) {
    let postBody = params
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling deleteUserFromMod")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling deleteUserFromMod")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/users/{user_id}/mods', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Remove a mod from user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserModParams} params The user mod data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deleteUserFromMod (userId, params) {
    return this.deleteUserFromModWithHttpInfo(userId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Remove a pack from user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserPackParams} params The user pack data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deleteUserFromPackWithHttpInfo (userId, params) {
    let postBody = params
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling deleteUserFromPack")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling deleteUserFromPack")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/users/{user_id}/packs', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Remove a pack from user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserPackParams} params The user pack data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deleteUserFromPack (userId, params) {
    return this.deleteUserFromPackWithHttpInfo(userId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Remove a team from user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserTeamParams} params The user team data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deleteUserFromTeamWithHttpInfo (userId, params) {
    let postBody = params
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling deleteUserFromTeam")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling deleteUserFromTeam")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/users/{user_id}/teams', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Remove a team from user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserTeamParams} params The user team data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deleteUserFromTeam (userId, params) {
    return this.deleteUserFromTeamWithHttpInfo(userId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all mods assigned to user
     * @param {String} userId A user UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/UserMod>} and HTTP response
     */
  listUserModsWithHttpInfo (userId) {
    let postBody = null
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling listUserMods")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [UserMod]
    return this.apiClient.callApi(
      '/users/{user_id}/mods', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all mods assigned to user
     * @param {String} userId A user UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/UserMod>}
     */
  listUserMods (userId) {
    return this.listUserModsWithHttpInfo(userId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all packs assigned to user
     * @param {String} userId A user UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/UserPack>} and HTTP response
     */
  listUserPacksWithHttpInfo (userId) {
    let postBody = null
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling listUserPacks")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [UserPack]
    return this.apiClient.callApi(
      '/users/{user_id}/packs', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all packs assigned to user
     * @param {String} userId A user UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/UserPack>}
     */
  listUserPacks (userId) {
    return this.listUserPacksWithHttpInfo(userId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all teams assigned to user
     * @param {String} userId A user UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/TeamUser>} and HTTP response
     */
  listUserTeamsWithHttpInfo (userId) {
    let postBody = null
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling listUserTeams")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [TeamUser]
    return this.apiClient.callApi(
      '/users/{user_id}/teams', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all teams assigned to user
     * @param {String} userId A user UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/TeamUser>}
     */
  listUserTeams (userId) {
    return this.listUserTeamsWithHttpInfo(userId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all available users
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/User>} and HTTP response
     */
  listUsersWithHttpInfo () {
    let postBody = null

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [User]
    return this.apiClient.callApi(
      '/users', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all available users
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/User>}
     */
  listUsers () {
    return this.listUsersWithHttpInfo()
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update mod perms for user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserModParams} params The user mod data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  permitUserModWithHttpInfo (userId, params) {
    let postBody = params
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling permitUserMod")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling permitUserMod")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/users/{user_id}/mods', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update mod perms for user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserModParams} params The user mod data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  permitUserMod (userId, params) {
    return this.permitUserModWithHttpInfo(userId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update pack perms for user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserPackParams} params The user pack data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  permitUserPackWithHttpInfo (userId, params) {
    let postBody = params
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling permitUserPack")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling permitUserPack")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/users/{user_id}/packs', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update pack perms for user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserPackParams} params The user pack data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  permitUserPack (userId, params) {
    return this.permitUserPackWithHttpInfo(userId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update team perms for user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserTeamParams} params The user team data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  permitUserTeamWithHttpInfo (userId, params) {
    let postBody = params
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling permitUserTeam")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling permitUserTeam")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/users/{user_id}/teams', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update team perms for user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/UserTeamParams} params The user team data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  permitUserTeam (userId, params) {
    return this.permitUserTeamWithHttpInfo(userId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch a specific user
     * @param {String} userId A user UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/User} and HTTP response
     */
  showUserWithHttpInfo (userId) {
    let postBody = null
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling showUser")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = User
    return this.apiClient.callApi(
      '/users/{user_id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch a specific user
     * @param {String} userId A user UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/User}
     */
  showUser (userId) {
    return this.showUserWithHttpInfo(userId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update a specific user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/User} params The user data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/User} and HTTP response
     */
  updateUserWithHttpInfo (userId, params) {
    let postBody = params
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling updateUser")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling updateUser")
    }

    let pathParams = {
      'user_id': userId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = User
    return this.apiClient.callApi(
      '/users/{user_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update a specific user
     * @param {String} userId A user UUID or slug
     * @param {module:kleister/model/User} params The user data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/User}
     */
  updateUser (userId, params) {
    return this.updateUserWithHttpInfo(userId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }
}
