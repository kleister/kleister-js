/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/* eslint-disable no-unused-vars */
import ApiClient from '../ApiClient'
import AuthToken from '../model/AuthToken'
import Profile from '../model/Profile'
/* eslint-enable no-unused-vars */

/**
* Profile service.
* @module kleister/api/ProfileApi
* @version 1.0.0-alpha1
*/
export default class ProfileApi {
  /**
    * Constructs a new ProfileApi.
    * @alias module:kleister/api/ProfileApi
    * @class
    * @param {module:kleister/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:kleister/ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }

  /**
     * Retrieve an unlimited auth token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Profile} and HTTP response
     */
  showProfileWithHttpInfo () {
    let postBody = null

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = Profile
    return this.apiClient.callApi(
      '/profile/self', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Retrieve an unlimited auth token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Profile}
     */
  showProfile () {
    return this.showProfileWithHttpInfo()
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Retrieve an unlimited auth token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/AuthToken} and HTTP response
     */
  tokenProfileWithHttpInfo () {
    let postBody = null

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = AuthToken
    return this.apiClient.callApi(
      '/profile/token', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Retrieve an unlimited auth token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/AuthToken}
     */
  tokenProfile () {
    return this.tokenProfileWithHttpInfo()
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Retrieve an unlimited auth token
     * @param {module:kleister/model/Profile} params The profile data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Profile} and HTTP response
     */
  updateProfileWithHttpInfo (params) {
    let postBody = params
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling updateProfile")
    }

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Profile
    return this.apiClient.callApi(
      '/profile/self', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Retrieve an unlimited auth token
     * @param {module:kleister/model/Profile} params The profile data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Profile}
     */
  updateProfile (params) {
    return this.updateProfileWithHttpInfo(params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }
}
