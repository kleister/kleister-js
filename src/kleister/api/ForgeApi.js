/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/* eslint-disable no-unused-vars */
import ApiClient from '../ApiClient'
import Build from '../model/Build'
import Forge from '../model/Forge'
import ForgeBuildParams from '../model/ForgeBuildParams'
/* eslint-enable no-unused-vars */

/**
* Forge service.
* @module kleister/api/ForgeApi
* @version 1.0.0-alpha1
*/
export default class ForgeApi {
  /**
    * Constructs a new ForgeApi.
    * @alias module:kleister/api/ForgeApi
    * @class
    * @param {module:kleister/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:kleister/ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }

  /**
     * Assign a build to a Forge version
     * @param {String} forgeId A forge UUID or slug
     * @param {module:kleister/model/ForgeBuildParams} params The build data to append
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/Build>} and HTTP response
     */
  appendForgeToBuildWithHttpInfo (forgeId, params) {
    let postBody = params
    // verify the required parameter 'forgeId' is set
    if (forgeId === undefined || forgeId === null) {
      throw new Error("Missing the required parameter 'forgeId' when calling appendForgeToBuild")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling appendForgeToBuild")
    }

    let pathParams = {
      'forge_id': forgeId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = [Build]
    return this.apiClient.callApi(
      '/forge/{forge_id}/builds', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a build to a Forge version
     * @param {String} forgeId A forge UUID or slug
     * @param {module:kleister/model/ForgeBuildParams} params The build data to append
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/Build>}
     */
  appendForgeToBuild (forgeId, params) {
    return this.appendForgeToBuildWithHttpInfo(forgeId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Unlink a build from a Forge version
     * @param {String} forgeId A forge UUID or slug
     * @param {module:kleister/model/ForgeBuildParams} params The build data to unlink
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/Build>} and HTTP response
     */
  deleteForgeFromBuildWithHttpInfo (forgeId, params) {
    let postBody = params
    // verify the required parameter 'forgeId' is set
    if (forgeId === undefined || forgeId === null) {
      throw new Error("Missing the required parameter 'forgeId' when calling deleteForgeFromBuild")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling deleteForgeFromBuild")
    }

    let pathParams = {
      'forge_id': forgeId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = [Build]
    return this.apiClient.callApi(
      '/forge/{forge_id}/builds', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Unlink a build from a Forge version
     * @param {String} forgeId A forge UUID or slug
     * @param {module:kleister/model/ForgeBuildParams} params The build data to unlink
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/Build>}
     */
  deleteForgeFromBuild (forgeId, params) {
    return this.deleteForgeFromBuildWithHttpInfo(forgeId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch the builds assigned to a Forge version
     * @param {String} forgeId A forge UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/Build>} and HTTP response
     */
  listForgeBuildsWithHttpInfo (forgeId) {
    let postBody = null
    // verify the required parameter 'forgeId' is set
    if (forgeId === undefined || forgeId === null) {
      throw new Error("Missing the required parameter 'forgeId' when calling listForgeBuilds")
    }

    let pathParams = {
      'forge_id': forgeId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [Build]
    return this.apiClient.callApi(
      '/forge/{forge_id}/builds', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch the builds assigned to a Forge version
     * @param {String} forgeId A forge UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/Build>}
     */
  listForgeBuilds (forgeId) {
    return this.listForgeBuildsWithHttpInfo(forgeId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch the available Forge versions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/Forge>} and HTTP response
     */
  listForgesWithHttpInfo () {
    let postBody = null

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [Forge]
    return this.apiClient.callApi(
      '/forge', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch the available Forge versions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/Forge>}
     */
  listForges () {
    return this.listForgesWithHttpInfo()
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Search for available Forge versions
     * @param {String} forgeId A search token to search Forge versions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/Forge>} and HTTP response
     */
  searchForgesWithHttpInfo (forgeId) {
    let postBody = null
    // verify the required parameter 'forgeId' is set
    if (forgeId === undefined || forgeId === null) {
      throw new Error("Missing the required parameter 'forgeId' when calling searchForges")
    }

    let pathParams = {
      'forge_id': forgeId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [Forge]
    return this.apiClient.callApi(
      '/forge/{forge_id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Search for available Forge versions
     * @param {String} forgeId A search token to search Forge versions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/Forge>}
     */
  searchForges (forgeId) {
    return this.searchForgesWithHttpInfo(forgeId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update the available Forge versions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  updateForgeWithHttpInfo () {
    let postBody = null

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = Object
    return this.apiClient.callApi(
      '/forge', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update the available Forge versions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  updateForge () {
    return this.updateForgeWithHttpInfo()
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }
}
