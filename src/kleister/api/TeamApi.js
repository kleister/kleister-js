/**
 * Kleister OpenAPI
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/* eslint-disable no-unused-vars */
import ApiClient from '../ApiClient'
import GeneralError from '../model/GeneralError'
import Team from '../model/Team'
import TeamMod from '../model/TeamMod'
import TeamModParams from '../model/TeamModParams'
import TeamPack from '../model/TeamPack'
import TeamPackParams from '../model/TeamPackParams'
import TeamUser from '../model/TeamUser'
import TeamUserParams from '../model/TeamUserParams'
import ValidationError from '../model/ValidationError'
/* eslint-enable no-unused-vars */

/**
* Team service.
* @module kleister/api/TeamApi
* @version 1.0.0-alpha1
*/
export default class TeamApi {
  /**
    * Constructs a new TeamApi.
    * @alias module:kleister/api/TeamApi
    * @class
    * @param {module:kleister/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:kleister/ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }

  /**
     * Assign a mod to team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamModParams} params The team mod data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  appendTeamToModWithHttpInfo (teamId, params) {
    let postBody = params
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling appendTeamToMod")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling appendTeamToMod")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/teams/{team_id}/mods', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a mod to team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamModParams} params The team mod data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  appendTeamToMod (teamId, params) {
    return this.appendTeamToModWithHttpInfo(teamId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Assign a pack to team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamPackParams} params The team pack data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  appendTeamToPackWithHttpInfo (teamId, params) {
    let postBody = params
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling appendTeamToPack")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling appendTeamToPack")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/teams/{team_id}/packs', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a pack to team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamPackParams} params The team pack data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  appendTeamToPack (teamId, params) {
    return this.appendTeamToPackWithHttpInfo(teamId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Assign a user to team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamUserParams} params The team user data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  appendTeamToUserWithHttpInfo (teamId, params) {
    let postBody = params
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling appendTeamToUser")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling appendTeamToUser")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/teams/{team_id}/users', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Assign a user to team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamUserParams} params The team user data to assign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  appendTeamToUser (teamId, params) {
    return this.appendTeamToUserWithHttpInfo(teamId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Create a new team
     * @param {module:kleister/model/Team} params The team data to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Team} and HTTP response
     */
  createTeamWithHttpInfo (params) {
    let postBody = params
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling createTeam")
    }

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Team
    return this.apiClient.callApi(
      '/teams', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Create a new team
     * @param {module:kleister/model/Team} params The team data to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Team}
     */
  createTeam (params) {
    return this.createTeamWithHttpInfo(params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Delete a specific team
     * @param {String} teamId A team UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deleteTeamWithHttpInfo (teamId) {
    let postBody = null
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling deleteTeam")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/teams/{team_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Delete a specific team
     * @param {String} teamId A team UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deleteTeam (teamId) {
    return this.deleteTeamWithHttpInfo(teamId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Remove a mod from team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamModParams} params The team mod data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deleteTeamFromModWithHttpInfo (teamId, params) {
    let postBody = params
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling deleteTeamFromMod")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling deleteTeamFromMod")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/teams/{team_id}/mods', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Remove a mod from team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamModParams} params The team mod data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deleteTeamFromMod (teamId, params) {
    return this.deleteTeamFromModWithHttpInfo(teamId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Remove a pack from team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamPackParams} params The team pack data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deleteTeamFromPackWithHttpInfo (teamId, params) {
    let postBody = params
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling deleteTeamFromPack")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling deleteTeamFromPack")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/teams/{team_id}/packs', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Remove a pack from team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamPackParams} params The team pack data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deleteTeamFromPack (teamId, params) {
    return this.deleteTeamFromPackWithHttpInfo(teamId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Remove a user from team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamUserParams} params The team user data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  deleteTeamFromUserWithHttpInfo (teamId, params) {
    let postBody = params
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling deleteTeamFromUser")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling deleteTeamFromUser")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/teams/{team_id}/users', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Remove a user from team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamUserParams} params The team user data to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  deleteTeamFromUser (teamId, params) {
    return this.deleteTeamFromUserWithHttpInfo(teamId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all mods assigned to team
     * @param {String} teamId A team UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/TeamMod>} and HTTP response
     */
  listTeamModsWithHttpInfo (teamId) {
    let postBody = null
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling listTeamMods")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [TeamMod]
    return this.apiClient.callApi(
      '/teams/{team_id}/mods', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all mods assigned to team
     * @param {String} teamId A team UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/TeamMod>}
     */
  listTeamMods (teamId) {
    return this.listTeamModsWithHttpInfo(teamId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all packs assigned to team
     * @param {String} teamId A team UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/TeamPack>} and HTTP response
     */
  listTeamPacksWithHttpInfo (teamId) {
    let postBody = null
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling listTeamPacks")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [TeamPack]
    return this.apiClient.callApi(
      '/teams/{team_id}/packs', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all packs assigned to team
     * @param {String} teamId A team UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/TeamPack>}
     */
  listTeamPacks (teamId) {
    return this.listTeamPacksWithHttpInfo(teamId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all users assigned to team
     * @param {String} teamId A team UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/TeamUser>} and HTTP response
     */
  listTeamUsersWithHttpInfo (teamId) {
    let postBody = null
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling listTeamUsers")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [TeamUser]
    return this.apiClient.callApi(
      '/teams/{team_id}/users', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all users assigned to team
     * @param {String} teamId A team UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/TeamUser>}
     */
  listTeamUsers (teamId) {
    return this.listTeamUsersWithHttpInfo(teamId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch all available teams
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:kleister/model/Team>} and HTTP response
     */
  listTeamsWithHttpInfo () {
    let postBody = null

    let pathParams = {
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [Team]
    return this.apiClient.callApi(
      '/teams', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch all available teams
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:kleister/model/Team>}
     */
  listTeams () {
    return this.listTeamsWithHttpInfo()
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update mod perms for team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamModParams} params The team mod data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  permitTeamModWithHttpInfo (teamId, params) {
    let postBody = params
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling permitTeamMod")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling permitTeamMod")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/teams/{team_id}/mods', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update mod perms for team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamModParams} params The team mod data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  permitTeamMod (teamId, params) {
    return this.permitTeamModWithHttpInfo(teamId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update pack perms for team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamPackParams} params The team pack data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  permitTeamPackWithHttpInfo (teamId, params) {
    let postBody = params
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling permitTeamPack")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling permitTeamPack")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/teams/{team_id}/packs', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update pack perms for team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamPackParams} params The team pack data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  permitTeamPack (teamId, params) {
    return this.permitTeamPackWithHttpInfo(teamId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update user perms for team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamUserParams} params The team user data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/GeneralError} and HTTP response
     */
  permitTeamUserWithHttpInfo (teamId, params) {
    let postBody = params
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling permitTeamUser")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling permitTeamUser")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = GeneralError
    return this.apiClient.callApi(
      '/teams/{team_id}/users', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update user perms for team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/TeamUserParams} params The team user data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/GeneralError}
     */
  permitTeamUser (teamId, params) {
    return this.permitTeamUserWithHttpInfo(teamId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Fetch a specific team
     * @param {String} teamId A team UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Team} and HTTP response
     */
  showTeamWithHttpInfo (teamId) {
    let postBody = null
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling showTeam")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = Team
    return this.apiClient.callApi(
      '/teams/{team_id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Fetch a specific team
     * @param {String} teamId A team UUID or slug
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Team}
     */
  showTeam (teamId) {
    return this.showTeamWithHttpInfo(teamId)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }

  /**
     * Update a specific team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/Team} params The team data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:kleister/model/Team} and HTTP response
     */
  updateTeamWithHttpInfo (teamId, params) {
    let postBody = params
    // verify the required parameter 'teamId' is set
    if (teamId === undefined || teamId === null) {
      throw new Error("Missing the required parameter 'teamId' when calling updateTeam")
    }
    // verify the required parameter 'params' is set
    if (params === undefined || params === null) {
      throw new Error("Missing the required parameter 'params' when calling updateTeam")
    }

    let pathParams = {
      'team_id': teamId
    }
    let queryParams = {
    }
    let headerParams = {
    }
    let formParams = {
    }

    let authNames = []
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = Team
    return this.apiClient.callApi(
      '/teams/{team_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Update a specific team
     * @param {String} teamId A team UUID or slug
     * @param {module:kleister/model/Team} params The team data to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:kleister/model/Team}
     */
  updateTeam (teamId, params) {
    return this.updateTeamWithHttpInfo(teamId, params)
      .then(function (responseAndData) {
        return responseAndData.data
      })
  }
}
